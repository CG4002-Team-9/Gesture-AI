-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln818 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln111_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal dense_1_weights_V_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_0_ce0 : STD_LOGIC;
    signal dense_1_weights_V_0_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_weights_V_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_1_ce0 : STD_LOGIC;
    signal dense_1_weights_V_1_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_weights_V_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_2_ce0 : STD_LOGIC;
    signal dense_1_weights_V_2_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_weights_V_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_3_ce0 : STD_LOGIC;
    signal dense_1_weights_V_3_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_weights_V_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_4_ce0 : STD_LOGIC;
    signal dense_1_weights_V_4_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_weights_V_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_5_ce0 : STD_LOGIC;
    signal dense_1_weights_V_5_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_weights_V_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_6_ce0 : STD_LOGIC;
    signal dense_1_weights_V_6_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_weights_V_7_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_7_ce0 : STD_LOGIC;
    signal dense_1_weights_V_7_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_weights_V_8_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_8_ce0 : STD_LOGIC;
    signal dense_1_weights_V_8_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_weights_V_9_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_9_ce0 : STD_LOGIC;
    signal dense_1_weights_V_9_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_weights_V_10_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_10_ce0 : STD_LOGIC;
    signal dense_1_weights_V_10_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_weights_V_11_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_11_ce0 : STD_LOGIC;
    signal dense_1_weights_V_11_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_weights_V_12_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_12_ce0 : STD_LOGIC;
    signal dense_1_weights_V_12_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_weights_V_13_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_13_ce0 : STD_LOGIC;
    signal dense_1_weights_V_13_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_weights_V_14_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_14_ce0 : STD_LOGIC;
    signal dense_1_weights_V_14_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_weights_V_15_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_weights_V_15_ce0 : STD_LOGIC;
    signal dense_1_weights_V_15_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_biases_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_1_biases_V_ce0 : STD_LOGIC;
    signal dense_1_biases_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1347_14_cast_fu_440_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_14_cast_reg_1006 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln1347_13_cast_fu_444_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_13_cast_reg_1011 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_12_cast_fu_448_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_12_cast_reg_1016 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_11_cast_fu_452_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_11_cast_reg_1021 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_10_cast_fu_456_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_10_cast_reg_1026 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_9_cast_fu_460_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_9_cast_reg_1031 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_8_cast_fu_464_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_8_cast_reg_1036 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_7_cast_fu_468_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_7_cast_reg_1041 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_6_cast_fu_472_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_6_cast_reg_1046 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_5_cast_fu_476_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_5_cast_reg_1051 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_4_cast_fu_480_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_4_cast_reg_1056 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_3_cast_fu_484_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_3_cast_reg_1061 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_2_cast_fu_488_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_2_cast_reg_1066 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_1_cast_fu_492_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_1_cast_reg_1071 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_cast_fu_496_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_cast_reg_1076 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln818_cast_fu_500_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln818_cast_reg_1081 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_cast_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_1090_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_106 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln111_fu_518_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_873_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_fu_546_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_567_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_879_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_567_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_588_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_887_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_fu_588_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_609_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_895_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_fu_609_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_630_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_903_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_630_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_651_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_911_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_651_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_672_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_919_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_fu_672_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_693_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_927_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_fu_693_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_714_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_935_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_714_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_735_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_943_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_735_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_756_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_951_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_fu_756_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_777_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_959_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_777_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_798_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_967_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_fu_798_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_819_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_975_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_819_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_836_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_983_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_fu_836_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_853_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_991_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln_fu_853_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal dense_1_biases_V_load_cast_fu_862_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_873_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_879_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_879_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_887_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_887_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_895_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_895_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_903_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_903_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_911_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_911_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_919_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_919_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_927_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_927_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_935_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_935_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_943_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_943_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_951_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_951_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_959_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_959_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_967_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_967_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_975_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_975_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_983_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_983_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_991_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_991_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gesture_model_mul_mul_16s_9s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component gesture_model_mac_muladd_16s_9s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_4_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_5_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_6_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_7_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_8_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_9_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_10_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_11_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_12_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_13_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_14_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_15_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_biases_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component gesture_model_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    dense_1_weights_V_0_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_0_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_0_address0,
        ce0 => dense_1_weights_V_0_ce0,
        q0 => dense_1_weights_V_0_q0);

    dense_1_weights_V_1_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_1_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_1_address0,
        ce0 => dense_1_weights_V_1_ce0,
        q0 => dense_1_weights_V_1_q0);

    dense_1_weights_V_2_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_2_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_2_address0,
        ce0 => dense_1_weights_V_2_ce0,
        q0 => dense_1_weights_V_2_q0);

    dense_1_weights_V_3_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_3_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_3_address0,
        ce0 => dense_1_weights_V_3_ce0,
        q0 => dense_1_weights_V_3_q0);

    dense_1_weights_V_4_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_4_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_4_address0,
        ce0 => dense_1_weights_V_4_ce0,
        q0 => dense_1_weights_V_4_q0);

    dense_1_weights_V_5_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_5_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_5_address0,
        ce0 => dense_1_weights_V_5_ce0,
        q0 => dense_1_weights_V_5_q0);

    dense_1_weights_V_6_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_6_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_6_address0,
        ce0 => dense_1_weights_V_6_ce0,
        q0 => dense_1_weights_V_6_q0);

    dense_1_weights_V_7_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_7_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_7_address0,
        ce0 => dense_1_weights_V_7_ce0,
        q0 => dense_1_weights_V_7_q0);

    dense_1_weights_V_8_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_8_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_8_address0,
        ce0 => dense_1_weights_V_8_ce0,
        q0 => dense_1_weights_V_8_q0);

    dense_1_weights_V_9_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_9_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_9_address0,
        ce0 => dense_1_weights_V_9_ce0,
        q0 => dense_1_weights_V_9_q0);

    dense_1_weights_V_10_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_10_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_10_address0,
        ce0 => dense_1_weights_V_10_ce0,
        q0 => dense_1_weights_V_10_q0);

    dense_1_weights_V_11_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_11_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_11_address0,
        ce0 => dense_1_weights_V_11_ce0,
        q0 => dense_1_weights_V_11_q0);

    dense_1_weights_V_12_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_12_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_12_address0,
        ce0 => dense_1_weights_V_12_ce0,
        q0 => dense_1_weights_V_12_q0);

    dense_1_weights_V_13_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_13_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_13_address0,
        ce0 => dense_1_weights_V_13_ce0,
        q0 => dense_1_weights_V_13_q0);

    dense_1_weights_V_14_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_14_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_14_address0,
        ce0 => dense_1_weights_V_14_ce0,
        q0 => dense_1_weights_V_14_q0);

    dense_1_weights_V_15_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_weights_V_15_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_15_address0,
        ce0 => dense_1_weights_V_15_ce0,
        q0 => dense_1_weights_V_15_q0);

    dense_1_biases_V_U : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1_dense_1_biases_V_ROM_AUTO_1R
    generic map (
        DataWidth => 7,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_biases_V_address0,
        ce0 => dense_1_biases_V_ce0,
        q0 => dense_1_biases_V_q0);

    mul_mul_16s_9s_24_4_1_U49 : component gesture_model_mul_mul_16s_9s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_873_p0,
        din1 => dense_1_weights_V_0_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_873_p2);

    mac_muladd_16s_9s_24ns_24_4_1_U50 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_879_p0,
        din1 => dense_1_weights_V_1_q0,
        din2 => grp_fu_879_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_879_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U51 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_887_p0,
        din1 => dense_1_weights_V_2_q0,
        din2 => grp_fu_887_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_887_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U52 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_895_p0,
        din1 => dense_1_weights_V_3_q0,
        din2 => grp_fu_895_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_895_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U53 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_903_p0,
        din1 => dense_1_weights_V_4_q0,
        din2 => grp_fu_903_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_903_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U54 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_911_p0,
        din1 => dense_1_weights_V_5_q0,
        din2 => grp_fu_911_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_911_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U55 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_919_p0,
        din1 => dense_1_weights_V_6_q0,
        din2 => grp_fu_919_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_919_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U56 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_927_p0,
        din1 => dense_1_weights_V_7_q0,
        din2 => grp_fu_927_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_927_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U57 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_935_p0,
        din1 => dense_1_weights_V_8_q0,
        din2 => grp_fu_935_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_935_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U58 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_943_p0,
        din1 => dense_1_weights_V_9_q0,
        din2 => grp_fu_943_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_943_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U59 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_951_p0,
        din1 => dense_1_weights_V_10_q0,
        din2 => grp_fu_951_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_951_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U60 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_959_p0,
        din1 => dense_1_weights_V_11_q0,
        din2 => grp_fu_959_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_959_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U61 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_967_p0,
        din1 => dense_1_weights_V_12_q0,
        din2 => grp_fu_967_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_967_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U62 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_975_p0,
        din1 => dense_1_weights_V_13_q0,
        din2 => grp_fu_975_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_975_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U63 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_983_p0,
        din1 => dense_1_weights_V_14_q0,
        din2 => grp_fu_983_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_983_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U64 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_991_p0,
        din1 => dense_1_weights_V_15_q0,
        din2 => grp_fu_991_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_991_p3);

    flow_control_loop_pipe_sequential_init_U : component gesture_model_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln111_fu_512_p2 = ap_const_lv1_0))) then 
                    i_fu_106 <= add_ln111_fu_518_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_106 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                    i_cast_reg_1090_pp0_iter10_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter9_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter11_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter10_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter12_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter11_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter13_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter12_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter14_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter13_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter15_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter14_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter16_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter15_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter17_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter16_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter18_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter17_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter2_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter1_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter3_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter2_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter4_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter3_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter5_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter4_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter6_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter5_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter7_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter6_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter8_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter7_reg(4 downto 0);
                    i_cast_reg_1090_pp0_iter9_reg(4 downto 0) <= i_cast_reg_1090_pp0_iter8_reg(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    i_cast_reg_1090_pp0_iter1_reg(4 downto 0) <= i_cast_reg_1090(4 downto 0);
                sext_ln1347_10_cast_reg_1026 <= sext_ln1347_10_cast_fu_456_p1;
                sext_ln1347_11_cast_reg_1021 <= sext_ln1347_11_cast_fu_452_p1;
                sext_ln1347_12_cast_reg_1016 <= sext_ln1347_12_cast_fu_448_p1;
                sext_ln1347_13_cast_reg_1011 <= sext_ln1347_13_cast_fu_444_p1;
                sext_ln1347_14_cast_reg_1006 <= sext_ln1347_14_cast_fu_440_p1;
                sext_ln1347_1_cast_reg_1071 <= sext_ln1347_1_cast_fu_492_p1;
                sext_ln1347_2_cast_reg_1066 <= sext_ln1347_2_cast_fu_488_p1;
                sext_ln1347_3_cast_reg_1061 <= sext_ln1347_3_cast_fu_484_p1;
                sext_ln1347_4_cast_reg_1056 <= sext_ln1347_4_cast_fu_480_p1;
                sext_ln1347_5_cast_reg_1051 <= sext_ln1347_5_cast_fu_476_p1;
                sext_ln1347_6_cast_reg_1046 <= sext_ln1347_6_cast_fu_472_p1;
                sext_ln1347_7_cast_reg_1041 <= sext_ln1347_7_cast_fu_468_p1;
                sext_ln1347_8_cast_reg_1036 <= sext_ln1347_8_cast_fu_464_p1;
                sext_ln1347_9_cast_reg_1031 <= sext_ln1347_9_cast_fu_460_p1;
                sext_ln1347_cast_reg_1076 <= sext_ln1347_cast_fu_496_p1;
                sext_ln818_cast_reg_1081 <= sext_ln818_cast_fu_500_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln111_fu_512_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    i_cast_reg_1090(4 downto 0) <= i_cast_fu_524_p1(4 downto 0);
            end if;
        end if;
    end process;
    i_cast_reg_1090(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter2_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter3_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter4_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter5_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter6_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter7_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter8_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter9_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter10_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter11_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter12_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter13_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter14_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter15_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter16_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter17_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_1090_pp0_iter18_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln111_fu_518_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln111_fu_512_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln111_fu_512_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter18_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter18_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_106, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_106;
        end if; 
    end process;

    dense_1_biases_V_address0 <= i_cast_reg_1090_pp0_iter17_reg(5 - 1 downto 0);

    dense_1_biases_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_biases_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_biases_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        dense_1_biases_V_load_cast_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dense_1_biases_V_q0),16));

    dense_1_weights_V_0_address0 <= i_cast_fu_524_p1(5 - 1 downto 0);

    dense_1_weights_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_0_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_10_address0 <= i_cast_reg_1090_pp0_iter9_reg(5 - 1 downto 0);

    dense_1_weights_V_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_10_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_11_address0 <= i_cast_reg_1090_pp0_iter10_reg(5 - 1 downto 0);

    dense_1_weights_V_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_11_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_12_address0 <= i_cast_reg_1090_pp0_iter11_reg(5 - 1 downto 0);

    dense_1_weights_V_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_12_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_13_address0 <= i_cast_reg_1090_pp0_iter12_reg(5 - 1 downto 0);

    dense_1_weights_V_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_13_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_14_address0 <= i_cast_reg_1090_pp0_iter13_reg(5 - 1 downto 0);

    dense_1_weights_V_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_14_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_15_address0 <= i_cast_reg_1090_pp0_iter14_reg(5 - 1 downto 0);

    dense_1_weights_V_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_15_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_1_address0 <= i_cast_reg_1090(5 - 1 downto 0);

    dense_1_weights_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_1_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_2_address0 <= i_cast_reg_1090_pp0_iter1_reg(5 - 1 downto 0);

    dense_1_weights_V_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_2_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_3_address0 <= i_cast_reg_1090_pp0_iter2_reg(5 - 1 downto 0);

    dense_1_weights_V_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_3_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_4_address0 <= i_cast_reg_1090_pp0_iter3_reg(5 - 1 downto 0);

    dense_1_weights_V_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_4_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_5_address0 <= i_cast_reg_1090_pp0_iter4_reg(5 - 1 downto 0);

    dense_1_weights_V_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_5_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_6_address0 <= i_cast_reg_1090_pp0_iter5_reg(5 - 1 downto 0);

    dense_1_weights_V_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_6_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_7_address0 <= i_cast_reg_1090_pp0_iter6_reg(5 - 1 downto 0);

    dense_1_weights_V_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_7_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_8_address0 <= i_cast_reg_1090_pp0_iter7_reg(5 - 1 downto 0);

    dense_1_weights_V_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_8_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_9_address0 <= i_cast_reg_1090_pp0_iter8_reg(5 - 1 downto 0);

    dense_1_weights_V_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_1_weights_V_9_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_873_p0 <= sext_ln818_cast_reg_1081(16 - 1 downto 0);
    grp_fu_879_p0 <= sext_ln1347_cast_reg_1076(16 - 1 downto 0);
    grp_fu_879_p2 <= (tmp_4_fu_546_p4 & ap_const_lv8_0);
    grp_fu_887_p0 <= sext_ln1347_1_cast_reg_1071(16 - 1 downto 0);
    grp_fu_887_p2 <= (tmp_6_fu_567_p4 & ap_const_lv8_0);
    grp_fu_895_p0 <= sext_ln1347_2_cast_reg_1066(16 - 1 downto 0);
    grp_fu_895_p2 <= (tmp_7_fu_588_p4 & ap_const_lv8_0);
    grp_fu_903_p0 <= sext_ln1347_3_cast_reg_1061(16 - 1 downto 0);
    grp_fu_903_p2 <= (tmp_9_fu_609_p4 & ap_const_lv8_0);
    grp_fu_911_p0 <= sext_ln1347_4_cast_reg_1056(16 - 1 downto 0);
    grp_fu_911_p2 <= (tmp_s_fu_630_p4 & ap_const_lv8_0);
    grp_fu_919_p0 <= sext_ln1347_5_cast_reg_1051(16 - 1 downto 0);
    grp_fu_919_p2 <= (tmp_1_fu_651_p4 & ap_const_lv8_0);
    grp_fu_927_p0 <= sext_ln1347_6_cast_reg_1046(16 - 1 downto 0);
    grp_fu_927_p2 <= (tmp_2_fu_672_p4 & ap_const_lv8_0);
    grp_fu_935_p0 <= sext_ln1347_7_cast_reg_1041(16 - 1 downto 0);
    grp_fu_935_p2 <= (tmp_3_fu_693_p4 & ap_const_lv8_0);
    grp_fu_943_p0 <= sext_ln1347_8_cast_reg_1036(16 - 1 downto 0);
    grp_fu_943_p2 <= (tmp_5_fu_714_p4 & ap_const_lv8_0);
    grp_fu_951_p0 <= sext_ln1347_9_cast_reg_1031(16 - 1 downto 0);
    grp_fu_951_p2 <= (tmp_8_fu_735_p4 & ap_const_lv8_0);
    grp_fu_959_p0 <= sext_ln1347_10_cast_reg_1026(16 - 1 downto 0);
    grp_fu_959_p2 <= (tmp_10_fu_756_p4 & ap_const_lv8_0);
    grp_fu_967_p0 <= sext_ln1347_11_cast_reg_1021(16 - 1 downto 0);
    grp_fu_967_p2 <= (tmp_11_fu_777_p4 & ap_const_lv8_0);
    grp_fu_975_p0 <= sext_ln1347_12_cast_reg_1016(16 - 1 downto 0);
    grp_fu_975_p2 <= (tmp_12_fu_798_p4 & ap_const_lv8_0);
    grp_fu_983_p0 <= sext_ln1347_13_cast_reg_1011(16 - 1 downto 0);
    grp_fu_983_p2 <= (tmp_13_fu_819_p4 & ap_const_lv8_0);
    grp_fu_991_p0 <= sext_ln1347_14_cast_reg_1006(16 - 1 downto 0);
    grp_fu_991_p2 <= (tmp_14_fu_836_p4 & ap_const_lv8_0);
    i_cast_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),64));
    icmp_ln111_fu_512_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv5_14) else "0";
    output_r_address0 <= i_cast_reg_1090_pp0_iter18_reg(5 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= std_logic_vector(unsigned(trunc_ln_fu_853_p4) + unsigned(dense_1_biases_V_load_cast_fu_862_p1));

    output_r_we0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1347_10_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_10),24));

        sext_ln1347_11_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_11),24));

        sext_ln1347_12_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_12),24));

        sext_ln1347_13_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_13),24));

        sext_ln1347_14_cast_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_14),24));

        sext_ln1347_1_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_1),24));

        sext_ln1347_2_cast_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_2),24));

        sext_ln1347_3_cast_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_3),24));

        sext_ln1347_4_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_4),24));

        sext_ln1347_5_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_5),24));

        sext_ln1347_6_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_6),24));

        sext_ln1347_7_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_7),24));

        sext_ln1347_8_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_8),24));

        sext_ln1347_9_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_9),24));

        sext_ln1347_cast_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347),24));

        sext_ln818_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln818),24));

    tmp_10_fu_756_p1 <= grp_fu_951_p3;
    tmp_10_fu_756_p4 <= tmp_10_fu_756_p1(23 downto 8);
    tmp_11_fu_777_p1 <= grp_fu_959_p3;
    tmp_11_fu_777_p4 <= tmp_11_fu_777_p1(23 downto 8);
    tmp_12_fu_798_p1 <= grp_fu_967_p3;
    tmp_12_fu_798_p4 <= tmp_12_fu_798_p1(23 downto 8);
    tmp_13_fu_819_p1 <= grp_fu_975_p3;
    tmp_13_fu_819_p4 <= tmp_13_fu_819_p1(23 downto 8);
    tmp_14_fu_836_p1 <= grp_fu_983_p3;
    tmp_14_fu_836_p4 <= tmp_14_fu_836_p1(23 downto 8);
    tmp_1_fu_651_p1 <= grp_fu_911_p3;
    tmp_1_fu_651_p4 <= tmp_1_fu_651_p1(23 downto 8);
    tmp_2_fu_672_p1 <= grp_fu_919_p3;
    tmp_2_fu_672_p4 <= tmp_2_fu_672_p1(23 downto 8);
    tmp_3_fu_693_p1 <= grp_fu_927_p3;
    tmp_3_fu_693_p4 <= tmp_3_fu_693_p1(23 downto 8);
    tmp_4_fu_546_p4 <= grp_fu_873_p2(23 downto 8);
    tmp_5_fu_714_p1 <= grp_fu_935_p3;
    tmp_5_fu_714_p4 <= tmp_5_fu_714_p1(23 downto 8);
    tmp_6_fu_567_p1 <= grp_fu_879_p3;
    tmp_6_fu_567_p4 <= tmp_6_fu_567_p1(23 downto 8);
    tmp_7_fu_588_p1 <= grp_fu_887_p3;
    tmp_7_fu_588_p4 <= tmp_7_fu_588_p1(23 downto 8);
    tmp_8_fu_735_p1 <= grp_fu_943_p3;
    tmp_8_fu_735_p4 <= tmp_8_fu_735_p1(23 downto 8);
    tmp_9_fu_609_p1 <= grp_fu_895_p3;
    tmp_9_fu_609_p4 <= tmp_9_fu_609_p1(23 downto 8);
    tmp_s_fu_630_p1 <= grp_fu_903_p3;
    tmp_s_fu_630_p4 <= tmp_s_fu_630_p1(23 downto 8);
    trunc_ln_fu_853_p1 <= grp_fu_991_p3;
    trunc_ln_fu_853_p4 <= trunc_ln_fu_853_p1(23 downto 8);
end behav;
