-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gesture_model_batch_normalization_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of gesture_model_batch_normalization_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_1FFCB : STD_LOGIC_VECTOR (16 downto 0) := "11111111111001011";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_9 : STD_LOGIC_VECTOR (10 downto 0) := "00000001001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv6_35 : STD_LOGIC_VECTOR (5 downto 0) := "110101";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv20_F : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001111";
    constant ap_const_lv20_10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_const_lv20_13 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_1A : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_1D : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_22 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_25 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_const_lv6_26 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_const_lv6_27 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_29 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_2B : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv6_2D : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_33 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter48 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter49 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter50 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter51 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter52 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter53 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln103_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter8_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter9_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter10_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter11_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter12_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter13_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter14_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter15_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter16_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter17_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter18_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter19_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter20_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_delayed : STD_LOGIC;
    signal batch_norm_1_mean_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal batch_norm_1_mean_V_ce0 : STD_LOGIC;
    signal batch_norm_1_mean_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal batch_norm_1_variance_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal batch_norm_1_variance_V_ce0 : STD_LOGIC;
    signal batch_norm_1_variance_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal batch_norm_1_gamma_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal batch_norm_1_gamma_V_ce0 : STD_LOGIC;
    signal batch_norm_1_gamma_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal batch_norm_1_beta_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal batch_norm_1_beta_V_ce0 : STD_LOGIC;
    signal batch_norm_1_beta_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter33_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter34_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter35_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter36_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter37_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter38_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter39_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter40_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter41_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter42_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter43_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter44_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter45_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter46_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter47_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter48_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter49_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter50_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter51_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_858_pp0_iter52_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_33_fu_521_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_33_reg_872 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_892 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_806_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_138 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln103_fu_239_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln_fu_828_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln813_fu_255_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_s_fu_259_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_32_fu_269_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1198_fu_277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_281_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1049_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_299_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_305_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1052_fu_321_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1052_fu_325_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1052_fu_331_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lshr_ln1052_fu_335_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_26_fu_341_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1051_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1052_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_359_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1049_fu_295_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1054_fu_373_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_27_fu_379_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1054_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1054_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1054_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1063_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1062_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1063_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1064_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1064_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1063_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln1063_fu_427_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1064_fu_443_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln_fu_399_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_9_fu_449_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1066_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_10_fu_461_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_467_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_28_fu_481_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1048_fu_497_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1070_fu_501_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1048_fu_489_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1076_fu_507_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1067_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_513_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1348_fu_537_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1348_1_fu_541_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ireg_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_fu_566_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln554_fu_580_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_35_fu_584_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln558_fu_592_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_34_fu_558_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_5_fu_596_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln544_fu_554_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln455_fu_576_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_616_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln570_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln570_fu_628_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln570_fu_634_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_640_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_6_fu_602_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln570_fu_648_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln575_fu_668_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln575_fu_672_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_15_fu_682_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln574_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln575_fu_678_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln574_3_fu_690_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_706_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln572_fu_658_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln570cast_fu_722_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln592_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln593_fu_726_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln560_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln560_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln571_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln592_fu_732_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln571_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln570_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln574_fu_698_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln571_fu_752_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln570_fu_778_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_3_fu_545_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln560_fu_786_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_806_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal rhs_2_fu_816_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_838_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_838_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter46_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter47_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter48_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter49_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter50_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter51_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter52_reg : STD_LOGIC;
    signal ap_done_int_frp : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal frp_pipeline_valid_U_valid_out : STD_LOGIC_VECTOR (53 downto 0);
    signal frp_pipeline_valid_U_num_valid_datasets : STD_LOGIC_VECTOR (6 downto 0);
    signal pf_output_r_d0_U_data_out : STD_LOGIC_VECTOR (19 downto 0);
    signal pf_output_r_d0_U_data_out_vld : STD_LOGIC;
    signal pf_output_r_d0_U_pf_ready : STD_LOGIC;
    signal pf_output_r_d0_U_pf_done : STD_LOGIC;
    signal ap_condition_frp_pvb_no_fwd_prs : BOOLEAN;
    signal ap_condition_frp_pvb_no_bkwd_prs : BOOLEAN;
    signal ap_condition_frp_pvb_pf_start : BOOLEAN;
    signal ap_frp_vld_in : STD_LOGIC;
    signal frp_pipeline_valid_U_exitcond : STD_LOGIC;
    signal pf_output_r_d0_U_data_in_vld : STD_LOGIC;
    signal pf_output_r_d0_U_frpsig_data_in : STD_LOGIC_VECTOR (19 downto 0);
    signal pf_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal pf_all_done : STD_LOGIC := '0';
    signal grp_fu_838_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component gesture_model_dsqrt_64ns_64ns_64_21_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component gesture_model_sdiv_24ns_16s_24_28_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component gesture_model_mac_muladd_24s_10ns_16s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component gesture_model_batch_normalization_1_batch_norm_1_mean_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_batch_normalization_1_batch_norm_1_variance_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gesture_model_batch_normalization_1_batch_norm_1_gamma_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component gesture_model_batch_normalization_1_batch_norm_1_beta_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gesture_model_frp_fifoout IS
    generic (
        BlockingType : INTEGER;
        PipeLatency : INTEGER;
        PipelineII : INTEGER;
        DataWidth : INTEGER;
        NumWrites : INTEGER;
        CeilLog2Stages : INTEGER;
        CeilLog2FDepth : INTEGER;
        PfAllDoneEnable : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        valid : IN STD_LOGIC_VECTOR (53 downto 0);
        data_in_vld : IN STD_LOGIC;
        data_out_vld : OUT STD_LOGIC;
        data_in_last : IN STD_LOGIC;
        pf_continue : IN STD_LOGIC;
        pf_all_done : IN STD_LOGIC;
        pf_ready : OUT STD_LOGIC;
        pf_done : OUT STD_LOGIC;
        data_out_read : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        num_valid_datasets : IN STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component gesture_model_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;


    component gesture_model_frp_pipeline_valid IS
    generic (
        PipelineLatency : INTEGER;
        PipelineII : INTEGER;
        CeilLog2Stages : INTEGER;
        ExitLatency : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        valid_in : IN STD_LOGIC;
        exitcond : IN STD_LOGIC;
        valid_out : OUT STD_LOGIC_VECTOR (53 downto 0);
        num_valid_datasets : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    batch_norm_1_mean_V_U : component gesture_model_batch_normalization_1_batch_norm_1_mean_V_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => batch_norm_1_mean_V_address0,
        ce0 => batch_norm_1_mean_V_ce0,
        q0 => batch_norm_1_mean_V_q0);

    batch_norm_1_variance_V_U : component gesture_model_batch_normalization_1_batch_norm_1_variance_V_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => batch_norm_1_variance_V_address0,
        ce0 => batch_norm_1_variance_V_ce0,
        q0 => batch_norm_1_variance_V_q0);

    batch_norm_1_gamma_V_U : component gesture_model_batch_normalization_1_batch_norm_1_gamma_V_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => batch_norm_1_gamma_V_address0,
        ce0 => batch_norm_1_gamma_V_ce0,
        q0 => batch_norm_1_gamma_V_q0);

    batch_norm_1_beta_V_U : component gesture_model_batch_normalization_1_batch_norm_1_beta_V_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => batch_norm_1_beta_V_address0,
        ce0 => batch_norm_1_beta_V_ce0,
        q0 => batch_norm_1_beta_V_q0);

    dsqrt_64ns_64ns_64_21_no_dsp_1_U38 : component gesture_model_dsqrt_64ns_64ns_64_21_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => grp_fu_220_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_220_p2);

    sdiv_24ns_16s_24_28_1_U39 : component gesture_model_sdiv_24ns_16s_24_28_1
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 24,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_806_p0,
        din1 => select_ln560_fu_786_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_806_p2);

    mac_muladd_24s_10ns_16s_24_4_1_U40 : component gesture_model_mac_muladd_24s_10ns_16s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 10,
        din2_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_806_p2,
        din1 => grp_fu_838_p1,
        din2 => rhs_2_fu_816_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_838_p3);

    flow_control_loop_delay_pipe_U : component gesture_model_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => pf_all_done,
        ap_continue_int => ap_continue_int,
        ap_done_int => pf_all_done,
        ap_continue => ap_continue,
        ap_loop_exit_ready_delayed => ap_loop_exit_ready_delayed);

    frp_pipeline_valid_U : component gesture_model_frp_pipeline_valid
    generic map (
        PipelineLatency => 54,
        PipelineII => 1,
        CeilLog2Stages => 6,
        ExitLatency => 0)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        valid_in => ap_frp_vld_in,
        exitcond => frp_pipeline_valid_U_exitcond,
        valid_out => frp_pipeline_valid_U_valid_out,
        num_valid_datasets => frp_pipeline_valid_U_num_valid_datasets);

    pf_output_r_d0_U : component gesture_model_frp_fifoout
    generic map (
        BlockingType => 0,
        PipeLatency => 54,
        PipelineII => 1,
        DataWidth => 20,
        NumWrites => 1,
        CeilLog2Stages => 6,
        CeilLog2FDepth => 6,
        PfAllDoneEnable => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => pf_output_r_d0_U_frpsig_data_in,
        data_out => pf_output_r_d0_U_data_out,
        valid => frp_pipeline_valid_U_valid_out,
        data_in_vld => pf_output_r_d0_U_data_in_vld,
        data_out_vld => pf_output_r_d0_U_data_out_vld,
        data_in_last => ap_done_int_frp,
        pf_continue => ap_continue,
        pf_all_done => pf_all_done,
        pf_ready => pf_output_r_d0_U_pf_ready,
        pf_done => pf_output_r_d0_U_pf_done,
        data_out_read => ap_const_logic_1,
        ap_start => ap_const_logic_0,
        num_valid_datasets => frp_pipeline_valid_U_num_valid_datasets);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter52_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    pf_all_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                pf_all_done <= ap_const_logic_0;
            else
                pf_all_done <= (pf_output_r_d0_U_pf_done);
            end if;
        end if;
    end process;


    i_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((frp_pipeline_valid_U_valid_out(0) = ap_const_logic_1) and ((icmp_ln103_fu_233_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                i_fu_138 <= add_ln103_fu_239_p2;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_138 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_condition_exit_pp0_iter0_stage0_pp0_iter10_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter9_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter11_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter10_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter12_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter11_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter13_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter12_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter14_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter13_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter15_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter14_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter16_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter15_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter17_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter16_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter18_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter17_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter19_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter18_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter20_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter19_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter21_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter20_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter4_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter5_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter6_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter8_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter7_reg;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter9_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
                ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
                ap_loop_exit_ready_pp0_iter47_reg <= ap_loop_exit_ready_pp0_iter46_reg;
                ap_loop_exit_ready_pp0_iter48_reg <= ap_loop_exit_ready_pp0_iter47_reg;
                ap_loop_exit_ready_pp0_iter49_reg <= ap_loop_exit_ready_pp0_iter48_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter50_reg <= ap_loop_exit_ready_pp0_iter49_reg;
                ap_loop_exit_ready_pp0_iter51_reg <= ap_loop_exit_ready_pp0_iter50_reg;
                ap_loop_exit_ready_pp0_iter52_reg <= ap_loop_exit_ready_pp0_iter51_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                d_reg_892 <= grp_fu_220_p2;
                    i_cast_reg_858_pp0_iter10_reg(4 downto 0) <= i_cast_reg_858_pp0_iter9_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter11_reg(4 downto 0) <= i_cast_reg_858_pp0_iter10_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter12_reg(4 downto 0) <= i_cast_reg_858_pp0_iter11_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter13_reg(4 downto 0) <= i_cast_reg_858_pp0_iter12_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter14_reg(4 downto 0) <= i_cast_reg_858_pp0_iter13_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter15_reg(4 downto 0) <= i_cast_reg_858_pp0_iter14_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter16_reg(4 downto 0) <= i_cast_reg_858_pp0_iter15_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter17_reg(4 downto 0) <= i_cast_reg_858_pp0_iter16_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter18_reg(4 downto 0) <= i_cast_reg_858_pp0_iter17_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter19_reg(4 downto 0) <= i_cast_reg_858_pp0_iter18_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter20_reg(4 downto 0) <= i_cast_reg_858_pp0_iter19_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter21_reg(4 downto 0) <= i_cast_reg_858_pp0_iter20_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter22_reg(4 downto 0) <= i_cast_reg_858_pp0_iter21_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter23_reg(4 downto 0) <= i_cast_reg_858_pp0_iter22_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter24_reg(4 downto 0) <= i_cast_reg_858_pp0_iter23_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter25_reg(4 downto 0) <= i_cast_reg_858_pp0_iter24_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter26_reg(4 downto 0) <= i_cast_reg_858_pp0_iter25_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter27_reg(4 downto 0) <= i_cast_reg_858_pp0_iter26_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter28_reg(4 downto 0) <= i_cast_reg_858_pp0_iter27_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter29_reg(4 downto 0) <= i_cast_reg_858_pp0_iter28_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter2_reg(4 downto 0) <= i_cast_reg_858_pp0_iter1_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter30_reg(4 downto 0) <= i_cast_reg_858_pp0_iter29_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter31_reg(4 downto 0) <= i_cast_reg_858_pp0_iter30_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter32_reg(4 downto 0) <= i_cast_reg_858_pp0_iter31_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter33_reg(4 downto 0) <= i_cast_reg_858_pp0_iter32_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter34_reg(4 downto 0) <= i_cast_reg_858_pp0_iter33_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter35_reg(4 downto 0) <= i_cast_reg_858_pp0_iter34_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter36_reg(4 downto 0) <= i_cast_reg_858_pp0_iter35_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter37_reg(4 downto 0) <= i_cast_reg_858_pp0_iter36_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter38_reg(4 downto 0) <= i_cast_reg_858_pp0_iter37_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter39_reg(4 downto 0) <= i_cast_reg_858_pp0_iter38_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter3_reg(4 downto 0) <= i_cast_reg_858_pp0_iter2_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter40_reg(4 downto 0) <= i_cast_reg_858_pp0_iter39_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter41_reg(4 downto 0) <= i_cast_reg_858_pp0_iter40_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter42_reg(4 downto 0) <= i_cast_reg_858_pp0_iter41_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter43_reg(4 downto 0) <= i_cast_reg_858_pp0_iter42_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter44_reg(4 downto 0) <= i_cast_reg_858_pp0_iter43_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter45_reg(4 downto 0) <= i_cast_reg_858_pp0_iter44_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter46_reg(4 downto 0) <= i_cast_reg_858_pp0_iter45_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter47_reg(4 downto 0) <= i_cast_reg_858_pp0_iter46_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter48_reg(4 downto 0) <= i_cast_reg_858_pp0_iter47_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter49_reg(4 downto 0) <= i_cast_reg_858_pp0_iter48_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter4_reg(4 downto 0) <= i_cast_reg_858_pp0_iter3_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter50_reg(4 downto 0) <= i_cast_reg_858_pp0_iter49_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter51_reg(4 downto 0) <= i_cast_reg_858_pp0_iter50_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter52_reg(4 downto 0) <= i_cast_reg_858_pp0_iter51_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter5_reg(4 downto 0) <= i_cast_reg_858_pp0_iter4_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter6_reg(4 downto 0) <= i_cast_reg_858_pp0_iter5_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter7_reg(4 downto 0) <= i_cast_reg_858_pp0_iter6_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter8_reg(4 downto 0) <= i_cast_reg_858_pp0_iter7_reg(4 downto 0);
                    i_cast_reg_858_pp0_iter9_reg(4 downto 0) <= i_cast_reg_858_pp0_iter8_reg(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    i_cast_reg_858_pp0_iter1_reg(4 downto 0) <= i_cast_reg_858(4 downto 0);
                p_Result_33_reg_872 <= p_Result_33_fu_521_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln103_fu_233_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_cast_reg_858(4 downto 0) <= i_cast_fu_245_p1(4 downto 0);
            end if;
        end if;
    end process;
    i_cast_reg_858(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter2_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter3_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter4_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter5_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter6_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter7_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter8_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter9_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter10_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter11_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter12_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter13_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter14_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter15_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter16_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter17_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter18_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter19_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter20_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter21_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter22_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter23_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter24_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter25_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter26_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter27_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter28_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter29_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter30_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter31_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter32_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter33_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter34_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter35_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter36_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter37_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter38_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter39_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter40_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter41_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter42_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter43_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter44_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter45_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter46_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter47_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter48_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter49_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter50_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter51_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast_reg_858_pp0_iter52_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    F2_fu_616_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_fu_576_p1));
    a_fu_353_p2 <= (icmp_ln1052_fu_347_p2 and icmp_ln1051_fu_315_p2);
    add_ln103_fu_239_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv5_1));
    add_ln1054_fu_373_p2 <= std_logic_vector(unsigned(trunc_ln1049_fu_295_p1) + unsigned(ap_const_lv17_1FFCB));
    add_ln1063_fu_417_p2 <= std_logic_vector(unsigned(sub_ln1049_fu_289_p2) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln1076_fu_507_p2 <= std_logic_vector(unsigned(sub_ln1070_fu_501_p2) + unsigned(select_ln1048_fu_489_p3));
    add_ln570_fu_628_p2 <= std_logic_vector(unsigned(F2_fu_616_p2) + unsigned(ap_const_lv12_FF8));
    and_ln1054_fu_387_p2 <= (xor_ln1054_fu_367_p2 and p_Result_27_fu_379_p3);
    and_ln570_fu_772_p2 <= (xor_ln571_fu_766_p2 and icmp_ln570_fu_622_p2);
    and_ln571_fu_746_p2 <= (xor_ln560_fu_740_p2 and icmp_ln571_fu_652_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_block_pp0_stage0 <= ap_const_boolean_0;
    ap_block_pp0_stage0_11001 <= ap_const_boolean_0;
    ap_block_pp0_stage0_subdone <= ap_const_boolean_0;
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter52 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter53 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_block_pp0_stage0_subdone, icmp_ln103_fu_233_p2, frp_pipeline_valid_U_valid_out)
    begin
        if (((frp_pipeline_valid_U_valid_out(0) = ap_const_logic_1) and ((icmp_ln103_fu_233_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_frp_pvb_no_bkwd_prs_assign_proc : process(pf_output_r_d0_U_pf_ready)
    begin
                ap_condition_frp_pvb_no_bkwd_prs <= (pf_output_r_d0_U_pf_ready = ap_const_logic_1);
    end process;

        ap_condition_frp_pvb_no_fwd_prs <= (ap_const_boolean_1 = ap_const_boolean_1);

    ap_condition_frp_pvb_pf_start_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_start_int)
    begin
                ap_condition_frp_pvb_pf_start <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_1));
    end process;


    ap_done_int_frp_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter52_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter52_reg = ap_const_logic_1))) then 
            ap_done_int_frp <= ap_const_logic_1;
        else 
            ap_done_int_frp <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_reg_pp0_iter1_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(1) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(10) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter10 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(11) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter11 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(12) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter12 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(13) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter13 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(14) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter14 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(15) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter15 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(16) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter16 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(17) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter17 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(18) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter18 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(19) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter19 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(2) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter2 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(20) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter20 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(21) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter21 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(22) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter22 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(23) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter23 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(24) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter24 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(25) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter25 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(26) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter26 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(27) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter27 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(28) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter28 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(29) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter29 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(3) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter3 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(30) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter30 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(31) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter31 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(32) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter32 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(33) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter33 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(34) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter34 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(35) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter35 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(36) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter36 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(37) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter37 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(38) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter38 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(39) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter39 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(4) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter4 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(40) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter40 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(41) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter41 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(42) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter42 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(43) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter43 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(44) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter44 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(45) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter45 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(46) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter46 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(47) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter47 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(48) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter48 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(49) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter49 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(5) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter5 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(50) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter50 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(51) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter51 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(52) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter52 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(53) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter53 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(6) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter6 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(7) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter7 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(8) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter8 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(9) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter9 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_frp_vld_in_assign_proc : process(ap_condition_frp_pvb_no_fwd_prs, ap_condition_frp_pvb_no_bkwd_prs, ap_condition_frp_pvb_pf_start)
    begin
        if (((ap_const_boolean_1 = ap_condition_frp_pvb_pf_start) and (ap_const_boolean_1 = ap_condition_frp_pvb_no_bkwd_prs) and (ap_const_boolean_1 = ap_condition_frp_pvb_no_fwd_prs))) then 
            ap_frp_vld_in <= ap_const_logic_1;
        else 
            ap_frp_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_loop_exit_ready_delayed_assign_proc : process(ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0_pp0_iter21_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0_pp0_iter21_reg))) then 
            ap_loop_exit_ready_delayed <= ap_const_logic_1;
        else 
            ap_loop_exit_ready_delayed <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_block_pp0_stage0_subdone, frp_pipeline_valid_U_valid_out)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (frp_pipeline_valid_U_valid_out(0) = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, i_fu_138, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_138;
        end if; 
    end process;

    ashr_ln575_fu_672_p2 <= std_logic_vector(shift_right(signed(man_V_6_fu_602_p3),to_integer(unsigned('0' & zext_ln575_fu_668_p1(31-1 downto 0)))));
    batch_norm_1_beta_V_address0 <= i_cast_reg_858_pp0_iter50_reg(4 - 1 downto 0);

    batch_norm_1_beta_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter51, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter51 = ap_const_logic_1))) then 
            batch_norm_1_beta_V_ce0 <= ap_const_logic_1;
        else 
            batch_norm_1_beta_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    batch_norm_1_gamma_V_address0 <= i_cast_reg_858_pp0_iter48_reg(4 - 1 downto 0);

    batch_norm_1_gamma_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter49, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter49 = ap_const_logic_1))) then 
            batch_norm_1_gamma_V_ce0 <= ap_const_logic_1;
        else 
            batch_norm_1_gamma_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    batch_norm_1_mean_V_address0 <= i_cast_reg_858_pp0_iter21_reg(4 - 1 downto 0);

    batch_norm_1_mean_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            batch_norm_1_mean_V_ce0 <= ap_const_logic_1;
        else 
            batch_norm_1_mean_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    batch_norm_1_variance_V_address0 <= i_cast_fu_245_p1(4 - 1 downto 0);

    batch_norm_1_variance_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, frp_pipeline_valid_U_valid_out)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (frp_pipeline_valid_U_valid_out(0) = ap_const_logic_1))) then 
            batch_norm_1_variance_V_ce0 <= ap_const_logic_1;
        else 
            batch_norm_1_variance_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_tmp_fu_566_p4 <= ireg_fu_551_p1(62 downto 52);

    frp_pipeline_valid_U_exitcond_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln103_fu_233_p2)
    begin
        if (((icmp_ln103_fu_233_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            frp_pipeline_valid_U_exitcond <= ap_const_logic_1;
        else 
            frp_pipeline_valid_U_exitcond <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_220_p1 <= p_Result_33_reg_872;
    grp_fu_806_p0 <= (ret_V_3_fu_545_p2 & ap_const_lv8_0);
    grp_fu_838_p1 <= grp_fu_838_p10(10 - 1 downto 0);
    grp_fu_838_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(batch_norm_1_gamma_V_q0),24));
    i_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_3),64));
    icmp_ln103_fu_233_p2 <= "1" when (ap_sig_allocacmp_i_3 = ap_const_lv5_10) else "0";
    icmp_ln1051_fu_315_p2 <= "1" when (signed(tmp_fu_305_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1052_fu_347_p2 <= "0" when (p_Result_26_fu_341_p2 = ap_const_lv17_0) else "1";
    icmp_ln1063_fu_411_p2 <= "1" when (signed(lsb_index_fu_299_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln560_fu_610_p2 <= "1" when (trunc_ln544_fu_554_p1 = ap_const_lv63_0) else "0";
    icmp_ln570_fu_622_p2 <= "1" when (signed(F2_fu_616_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln571_fu_652_p2 <= "1" when (F2_fu_616_p2 = ap_const_lv12_8) else "0";
    icmp_ln574_fu_662_p2 <= "1" when (unsigned(sh_amt_fu_640_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln592_fu_716_p2 <= "1" when (tmp_16_fu_706_p4 = ap_const_lv8_0) else "0";
    input_r_address0 <= i_cast_reg_858_pp0_iter21_reg(4 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ireg_fu_551_p1 <= d_reg_892;
    
    l_fu_281_p3_proc : process(sext_ln1198_fu_277_p1)
    begin
        l_fu_281_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln1198_fu_277_p1(i) = '1' then
                l_fu_281_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_299_p2 <= std_logic_vector(unsigned(sub_ln1049_fu_289_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    lshr_ln1052_fu_335_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv17_1FFFF),to_integer(unsigned('0' & zext_ln1052_fu_331_p1(17-1 downto 0)))));
    lshr_ln1063_fu_427_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1062_fu_407_p1),to_integer(unsigned('0' & zext_ln1063_fu_423_p1(31-1 downto 0)))));
    m_10_fu_461_p2 <= std_logic_vector(unsigned(m_9_fu_449_p3) + unsigned(zext_ln1066_fu_457_p1));
    m_9_fu_449_p3 <= 
        lshr_ln1063_fu_427_p2 when (icmp_ln1063_fu_411_p2(0) = '1') else 
        shl_ln1064_fu_443_p2;
    m_fu_467_p4 <= m_10_fu_461_p2(63 downto 1);
    man_V_5_fu_596_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln558_fu_592_p1));
    man_V_6_fu_602_p3 <= 
        man_V_5_fu_596_p2 when (p_Result_34_fu_558_p3(0) = '1') else 
        zext_ln558_fu_592_p1;
    or_ln1054_fu_393_p2 <= (and_ln1054_fu_387_p2 or a_fu_353_p2);
    or_ln571_fu_760_p2 <= (icmp_ln571_fu_652_p2 or icmp_ln560_fu_610_p2);
    or_ln_fu_399_p3 <= (ap_const_lv1_0 & or_ln1054_fu_393_p2);
    output_r_address0 <= pf_output_r_d0_U_data_out(19 downto 16);
    output_r_ce0 <= pf_output_r_d0_U_data_out_vld;
    output_r_d0 <= pf_output_r_d0_U_data_out(15 downto 0);

    output_r_we0_assign_proc : process(pf_output_r_d0_U_data_out_vld)
    begin
        if ((pf_output_r_d0_U_data_out_vld = ap_const_logic_1)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_26_fu_341_p2 <= (zext_ln813_fu_255_p1 and lshr_ln1052_fu_335_p2);
    p_Result_27_fu_379_p3 <= zext_ln813_fu_255_p1(to_integer(unsigned(add_ln1054_fu_373_p2)) downto to_integer(unsigned(add_ln1054_fu_373_p2))) when (to_integer(unsigned(add_ln1054_fu_373_p2)) >= 0 and to_integer(unsigned(add_ln1054_fu_373_p2)) <=16) else "-";
    p_Result_28_fu_481_p3 <= m_10_fu_461_p2(54 downto 54);
    p_Result_32_fu_269_p3 <= (ap_const_lv1_1 & p_Result_s_fu_259_p4);
    p_Result_33_fu_521_p5 <= (tmp_9_fu_513_p3 & zext_ln1067_fu_477_p1(51 downto 0));
    p_Result_34_fu_558_p3 <= ireg_fu_551_p1(63 downto 63);
    p_Result_35_fu_584_p3 <= (ap_const_lv1_1 & trunc_ln554_fu_580_p1);
    
    p_Result_s_fu_259_p4_proc : process(zext_ln813_fu_255_p1)
    variable vlo_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(17+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable p_Result_s_fu_259_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(17 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_10(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := zext_ln813_fu_255_p1;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(17-1-unsigned(ap_const_lv32_10(5-1 downto 0)));
            for p_Result_s_fu_259_p4_i in 0 to 17-1 loop
                v0_cpy(p_Result_s_fu_259_p4_i) := zext_ln813_fu_255_p1(17-1-p_Result_s_fu_259_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(17-1 downto 0)))));
        res_mask := res_mask(17-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_259_p4 <= resvalue(17-1 downto 0);
    end process;

    pf_output_r_address0 <= i_cast_reg_858_pp0_iter52_reg(4 - 1 downto 0);

    pf_output_r_d0_U_data_in_vld_assign_proc : process(ap_enable_reg_pp0_iter53, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter53 = ap_const_logic_1))) then 
            pf_output_r_d0_U_data_in_vld <= ap_const_logic_1;
        else 
            pf_output_r_d0_U_data_in_vld <= ap_const_logic_0;
        end if; 
    end process;

    pf_output_r_d0_U_frpsig_data_in <= (pf_output_r_address0 & trunc_ln_fu_828_p4);
    ret_V_3_fu_545_p2 <= std_logic_vector(unsigned(zext_ln1348_fu_537_p1) - unsigned(zext_ln1348_1_fu_541_p1));
    rhs_2_fu_816_p3 <= (batch_norm_1_beta_V_q0 & ap_const_lv8_0);
    select_ln1048_fu_489_p3 <= 
        ap_const_lv11_3FF when (p_Result_28_fu_481_p3(0) = '1') else 
        ap_const_lv11_3FE;
    select_ln560_fu_786_p3 <= 
        ap_const_lv16_0 when (icmp_ln560_fu_610_p2(0) = '1') else 
        select_ln570_fu_778_p3;
    select_ln570_fu_778_p3 <= 
        select_ln574_fu_698_p3 when (and_ln570_fu_772_p2(0) = '1') else 
        select_ln571_fu_752_p3;
    select_ln571_fu_752_p3 <= 
        trunc_ln572_fu_658_p1 when (and_ln571_fu_746_p2(0) = '1') else 
        select_ln592_fu_732_p3;
    select_ln574_3_fu_690_p3 <= 
        ap_const_lv16_FFFF when (tmp_15_fu_682_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln574_fu_698_p3 <= 
        trunc_ln575_fu_678_p1 when (icmp_ln574_fu_662_p2(0) = '1') else 
        select_ln574_3_fu_690_p3;
    select_ln592_fu_732_p3 <= 
        shl_ln593_fu_726_p2 when (icmp_ln592_fu_716_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln1198_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_32_fu_269_p3),32));

        sext_ln570_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_640_p3),32));

    sext_ln570cast_fu_722_p1 <= sext_ln570_fu_648_p1(16 - 1 downto 0);
    sh_amt_fu_640_p3 <= 
        add_ln570_fu_628_p2 when (icmp_ln570_fu_622_p2(0) = '1') else 
        sub_ln570_fu_634_p2;
    shl_ln1064_fu_443_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1062_fu_407_p1),to_integer(unsigned('0' & zext_ln1064_fu_439_p1(31-1 downto 0)))));
    shl_ln593_fu_726_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln572_fu_658_p1),to_integer(unsigned('0' & sext_ln570cast_fu_722_p1(16-1 downto 0)))));
    sub_ln1049_fu_289_p2 <= std_logic_vector(unsigned(ap_const_lv32_11) - unsigned(l_fu_281_p3));
    sub_ln1052_fu_325_p2 <= std_logic_vector(unsigned(ap_const_lv5_7) - unsigned(trunc_ln1052_fu_321_p1));
    sub_ln1064_fu_433_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln1049_fu_289_p2));
    sub_ln1070_fu_501_p2 <= std_logic_vector(unsigned(ap_const_lv11_9) - unsigned(trunc_ln1048_fu_497_p1));
    sub_ln570_fu_634_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(F2_fu_616_p2));
    tmp_12_fu_359_p3 <= lsb_index_fu_299_p2(31 downto 31);
    tmp_15_fu_682_p3 <= ireg_fu_551_p1(63 downto 63);
    tmp_16_fu_706_p4 <= sh_amt_fu_640_p3(11 downto 4);
    tmp_9_fu_513_p3 <= (ap_const_lv1_0 & add_ln1076_fu_507_p2);
    tmp_fu_305_p4 <= lsb_index_fu_299_p2(31 downto 1);
    trunc_ln1048_fu_497_p1 <= l_fu_281_p3(11 - 1 downto 0);
    trunc_ln1049_fu_295_p1 <= sub_ln1049_fu_289_p2(17 - 1 downto 0);
    trunc_ln1052_fu_321_p1 <= sub_ln1049_fu_289_p2(5 - 1 downto 0);
    trunc_ln544_fu_554_p1 <= ireg_fu_551_p1(63 - 1 downto 0);
    trunc_ln554_fu_580_p1 <= ireg_fu_551_p1(52 - 1 downto 0);
    trunc_ln572_fu_658_p1 <= man_V_6_fu_602_p3(16 - 1 downto 0);
    trunc_ln575_fu_678_p1 <= ashr_ln575_fu_672_p2(16 - 1 downto 0);
    trunc_ln_fu_828_p4 <= grp_fu_838_p3(23 downto 8);
    xor_ln1054_fu_367_p2 <= (tmp_12_fu_359_p3 xor ap_const_lv1_1);
    xor_ln560_fu_740_p2 <= (icmp_ln560_fu_610_p2 xor ap_const_lv1_1);
    xor_ln571_fu_766_p2 <= (or_ln571_fu_760_p2 xor ap_const_lv1_1);
    zext_ln1052_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1052_fu_325_p2),17));
    zext_ln1062_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(batch_norm_1_variance_V_q0),64));
    zext_ln1063_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1063_fu_417_p2),64));
    zext_ln1064_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1064_fu_433_p2),64));
    zext_ln1066_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_399_p3),64));
    zext_ln1067_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_fu_467_p4),64));
    zext_ln1348_1_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(batch_norm_1_mean_V_q0),16));
    zext_ln1348_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_r_q0),16));
    zext_ln455_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_fu_566_p4),12));
    zext_ln558_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_35_fu_584_p3),54));
    zext_ln575_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln570_fu_648_p1),54));
    zext_ln813_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(batch_norm_1_variance_V_q0),17));
end behav;
