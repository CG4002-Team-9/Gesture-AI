-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gesture_model_dense_1_Pipeline_VITIS_LOOP_126_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1303 : IN STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_478_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_478_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_478_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_478_p_ce : OUT STD_LOGIC );
end;


architecture behav of gesture_model_dense_1_Pipeline_VITIS_LOOP_126_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_FFCB : STD_LOGIC_VECTOR (15 downto 0) := "1111111111001011";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln126_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal sext_ln1303_cast_fu_156_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1303_cast_reg_767 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal output_addr_reg_776 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter10_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter11_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter12_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter13_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter14_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter15_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter16_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter17_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter18_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter19_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter20_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter21_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter22_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter23_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter24_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter25_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter26_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter27_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter28_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter29_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter30_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter31_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter32_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter33_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter34_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter35_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter36_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter37_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter38_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter39_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter40_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter41_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal output_addr_reg_776_pp0_iter42_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Val2_s_reg_782 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_8_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_198_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_reg_794 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1040_fu_491_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1040_reg_799 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_reg_804 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_fu_180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_124 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln126_fu_174_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_V_2_fu_209_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_214_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_9_fu_224_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1198_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_236_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1049_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_260_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1052_fu_276_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln1052_fu_280_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1052_fu_286_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln1052_fu_290_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_2_fu_296_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1051_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1052_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_314_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1049_fu_250_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1054_fu_328_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_3_fu_334_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1054_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1054_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1054_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1063_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1062_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1063_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln1064_fu_388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1064_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1063_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln1063_fu_382_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1064_fu_398_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln1054_1_fu_354_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_2_fu_404_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1066_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_3_fu_416_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_422_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_4_fu_436_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1048_fu_452_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1070_fu_456_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln1048_fu_444_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1076_fu_462_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1067_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_468_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_10_fu_475_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1040_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln756_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_fu_514_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln554_fu_528_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_12_fu_532_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln558_fu_540_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_11_fu_506_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_544_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln544_fu_502_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln455_fu_524_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_564_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln570_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln570_fu_576_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln570_fu_582_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_588_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_550_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln570_fu_596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln575_fu_616_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_6_fu_634_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln572_fu_606_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln570cast_fu_650_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln560_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln560_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln571_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ashr_ln575_fu_620_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_4_fu_626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln574_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln838_fu_690_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln574_fu_694_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln592_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln593_fu_654_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln571_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln592_fu_710_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln570_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln574_1_fu_702_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln571_fu_718_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln570_fu_726_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln560_fu_734_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_750_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_750_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_750_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gesture_model_dexp_64ns_64ns_64_13_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component gesture_model_sdiv_24ns_16s_16_28_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component gesture_model_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sdiv_24ns_16s_16_28_1_U105 : component gesture_model_sdiv_24ns_16s_16_28_1
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 24,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_750_p0,
        din1 => grp_fu_750_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_750_p2);

    flow_control_loop_pipe_sequential_init_U : component gesture_model_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter42_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln126_fu_168_p2 = ap_const_lv1_0))) then 
                    i_fu_124 <= add_ln126_fu_174_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_124 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                d_reg_804 <= grp_fu_478_p_dout0;
                output_addr_reg_776_pp0_iter10_reg <= output_addr_reg_776_pp0_iter9_reg;
                output_addr_reg_776_pp0_iter11_reg <= output_addr_reg_776_pp0_iter10_reg;
                output_addr_reg_776_pp0_iter12_reg <= output_addr_reg_776_pp0_iter11_reg;
                output_addr_reg_776_pp0_iter13_reg <= output_addr_reg_776_pp0_iter12_reg;
                output_addr_reg_776_pp0_iter14_reg <= output_addr_reg_776_pp0_iter13_reg;
                output_addr_reg_776_pp0_iter15_reg <= output_addr_reg_776_pp0_iter14_reg;
                output_addr_reg_776_pp0_iter16_reg <= output_addr_reg_776_pp0_iter15_reg;
                output_addr_reg_776_pp0_iter17_reg <= output_addr_reg_776_pp0_iter16_reg;
                output_addr_reg_776_pp0_iter18_reg <= output_addr_reg_776_pp0_iter17_reg;
                output_addr_reg_776_pp0_iter19_reg <= output_addr_reg_776_pp0_iter18_reg;
                output_addr_reg_776_pp0_iter20_reg <= output_addr_reg_776_pp0_iter19_reg;
                output_addr_reg_776_pp0_iter21_reg <= output_addr_reg_776_pp0_iter20_reg;
                output_addr_reg_776_pp0_iter22_reg <= output_addr_reg_776_pp0_iter21_reg;
                output_addr_reg_776_pp0_iter23_reg <= output_addr_reg_776_pp0_iter22_reg;
                output_addr_reg_776_pp0_iter24_reg <= output_addr_reg_776_pp0_iter23_reg;
                output_addr_reg_776_pp0_iter25_reg <= output_addr_reg_776_pp0_iter24_reg;
                output_addr_reg_776_pp0_iter26_reg <= output_addr_reg_776_pp0_iter25_reg;
                output_addr_reg_776_pp0_iter27_reg <= output_addr_reg_776_pp0_iter26_reg;
                output_addr_reg_776_pp0_iter28_reg <= output_addr_reg_776_pp0_iter27_reg;
                output_addr_reg_776_pp0_iter29_reg <= output_addr_reg_776_pp0_iter28_reg;
                output_addr_reg_776_pp0_iter2_reg <= output_addr_reg_776_pp0_iter1_reg;
                output_addr_reg_776_pp0_iter30_reg <= output_addr_reg_776_pp0_iter29_reg;
                output_addr_reg_776_pp0_iter31_reg <= output_addr_reg_776_pp0_iter30_reg;
                output_addr_reg_776_pp0_iter32_reg <= output_addr_reg_776_pp0_iter31_reg;
                output_addr_reg_776_pp0_iter33_reg <= output_addr_reg_776_pp0_iter32_reg;
                output_addr_reg_776_pp0_iter34_reg <= output_addr_reg_776_pp0_iter33_reg;
                output_addr_reg_776_pp0_iter35_reg <= output_addr_reg_776_pp0_iter34_reg;
                output_addr_reg_776_pp0_iter36_reg <= output_addr_reg_776_pp0_iter35_reg;
                output_addr_reg_776_pp0_iter37_reg <= output_addr_reg_776_pp0_iter36_reg;
                output_addr_reg_776_pp0_iter38_reg <= output_addr_reg_776_pp0_iter37_reg;
                output_addr_reg_776_pp0_iter39_reg <= output_addr_reg_776_pp0_iter38_reg;
                output_addr_reg_776_pp0_iter3_reg <= output_addr_reg_776_pp0_iter2_reg;
                output_addr_reg_776_pp0_iter40_reg <= output_addr_reg_776_pp0_iter39_reg;
                output_addr_reg_776_pp0_iter41_reg <= output_addr_reg_776_pp0_iter40_reg;
                output_addr_reg_776_pp0_iter42_reg <= output_addr_reg_776_pp0_iter41_reg;
                output_addr_reg_776_pp0_iter4_reg <= output_addr_reg_776_pp0_iter3_reg;
                output_addr_reg_776_pp0_iter5_reg <= output_addr_reg_776_pp0_iter4_reg;
                output_addr_reg_776_pp0_iter6_reg <= output_addr_reg_776_pp0_iter5_reg;
                output_addr_reg_776_pp0_iter7_reg <= output_addr_reg_776_pp0_iter6_reg;
                output_addr_reg_776_pp0_iter8_reg <= output_addr_reg_776_pp0_iter7_reg;
                output_addr_reg_776_pp0_iter9_reg <= output_addr_reg_776_pp0_iter8_reg;
                select_ln1040_reg_799 <= select_ln1040_fu_491_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                output_addr_reg_776_pp0_iter1_reg <= output_addr_reg_776;
                p_Result_8_reg_788 <= output_r_q1(15 downto 15);
                sext_ln1303_cast_reg_767 <= sext_ln1303_cast_fu_156_p1;
                tmp_V_reg_794 <= tmp_V_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln126_fu_168_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                output_addr_reg_776 <= i_4_cast_fu_180_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Val2_s_reg_782 <= output_r_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    F2_fu_564_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_fu_524_p1));
    a_fu_308_p2 <= (icmp_ln1052_fu_302_p2 and icmp_ln1051_fu_270_p2);
    add_ln1054_fu_328_p2 <= std_logic_vector(unsigned(trunc_ln1049_fu_250_p1) + unsigned(ap_const_lv16_FFCB));
    add_ln1063_fu_372_p2 <= std_logic_vector(unsigned(sub_ln1049_fu_244_p2) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln1076_fu_462_p2 <= std_logic_vector(unsigned(sub_ln1070_fu_456_p2) + unsigned(select_ln1048_fu_444_p3));
    add_ln126_fu_174_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv5_1));
    add_ln570_fu_576_p2 <= std_logic_vector(unsigned(F2_fu_564_p2) + unsigned(ap_const_lv12_FF8));
    and_ln1054_fu_342_p2 <= (xor_ln1054_fu_322_p2 and p_Result_3_fu_334_p3);
    and_ln570_fu_684_p2 <= (xor_ln571_fu_678_p2 and icmp_ln570_fu_570_p2);
    and_ln571_fu_666_p2 <= (xor_ln560_fu_660_p2 and icmp_ln571_fu_600_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln126_fu_168_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln126_fu_168_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter42_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter42_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_124, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_124;
        end if; 
    end process;

    ashr_ln575_fu_620_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_550_p3),to_integer(unsigned('0' & zext_ln575_fu_616_p1(31-1 downto 0)))));
    bitcast_ln756_fu_487_p1 <= p_Result_10_fu_475_p5;
    exp_tmp_fu_514_p4 <= ireg_fu_499_p1(62 downto 52);
    grp_fu_478_p_ce <= ap_const_logic_1;
    grp_fu_478_p_din0 <= ap_const_lv64_0;
    grp_fu_478_p_din1 <= select_ln1040_reg_799;
    grp_fu_750_p0 <= (select_ln560_fu_734_p3 & ap_const_lv8_0);
    grp_fu_750_p1 <= sext_ln1303_cast_reg_767(16 - 1 downto 0);
    i_4_cast_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
    icmp_ln1040_fu_204_p2 <= "1" when (p_Val2_s_reg_782 = ap_const_lv16_0) else "0";
    icmp_ln1051_fu_270_p2 <= "1" when (signed(tmp_fu_260_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln1052_fu_302_p2 <= "0" when (p_Result_2_fu_296_p2 = ap_const_lv16_0) else "1";
    icmp_ln1063_fu_366_p2 <= "1" when (signed(lsb_index_fu_254_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln126_fu_168_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv5_14) else "0";
    icmp_ln560_fu_558_p2 <= "1" when (trunc_ln544_fu_502_p1 = ap_const_lv63_0) else "0";
    icmp_ln570_fu_570_p2 <= "1" when (signed(F2_fu_564_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln571_fu_600_p2 <= "1" when (F2_fu_564_p2 = ap_const_lv12_8) else "0";
    icmp_ln574_fu_610_p2 <= "1" when (unsigned(sh_amt_fu_588_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln592_fu_644_p2 <= "1" when (tmp_6_fu_634_p4 = ap_const_lv8_0) else "0";
    ireg_fu_499_p1 <= d_reg_804;
    
    l_fu_236_p3_proc : process(sext_ln1198_fu_232_p1)
    begin
        l_fu_236_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if sext_ln1198_fu_232_p1(i) = '1' then
                l_fu_236_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_254_p2 <= std_logic_vector(unsigned(sub_ln1049_fu_244_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    lshr_ln1052_fu_290_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln1052_fu_286_p1(16-1 downto 0)))));
    lshr_ln1063_fu_382_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1062_fu_362_p1),to_integer(unsigned('0' & zext_ln1063_fu_378_p1(31-1 downto 0)))));
    m_2_fu_404_p3 <= 
        lshr_ln1063_fu_382_p2 when (icmp_ln1063_fu_366_p2(0) = '1') else 
        shl_ln1064_fu_398_p2;
    m_3_fu_416_p2 <= std_logic_vector(unsigned(m_2_fu_404_p3) + unsigned(zext_ln1066_fu_412_p1));
    m_fu_422_p4 <= m_3_fu_416_p2(63 downto 1);
    man_V_1_fu_544_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln558_fu_540_p1));
    man_V_2_fu_550_p3 <= 
        man_V_1_fu_544_p2 when (p_Result_11_fu_506_p3(0) = '1') else 
        zext_ln558_fu_540_p1;
    or_ln1054_1_fu_354_p3 <= (ap_const_lv1_0 & or_ln1054_fu_348_p2);
    or_ln1054_fu_348_p2 <= (and_ln1054_fu_342_p2 or a_fu_308_p2);
    or_ln571_fu_672_p2 <= (icmp_ln571_fu_600_p2 or icmp_ln560_fu_558_p2);
    output_r_address0 <= output_addr_reg_776_pp0_iter42_reg;
    output_r_address1 <= i_4_cast_fu_180_p1(5 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter43, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter43 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_r_ce1 <= ap_const_logic_1;
        else 
            output_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= grp_fu_750_p2(16 - 1 downto 0);

    output_r_we0_assign_proc : process(ap_enable_reg_pp0_iter43, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter43 = ap_const_logic_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_10_fu_475_p5 <= (tmp_5_fu_468_p3 & zext_ln1067_fu_432_p1(51 downto 0));
    p_Result_11_fu_506_p3 <= ireg_fu_499_p1(63 downto 63);
    p_Result_12_fu_532_p3 <= (ap_const_lv1_1 & trunc_ln554_fu_528_p1);
    p_Result_2_fu_296_p2 <= (tmp_V_2_fu_209_p3 and lshr_ln1052_fu_290_p2);
    p_Result_3_fu_334_p3 <= tmp_V_2_fu_209_p3(to_integer(unsigned(add_ln1054_fu_328_p2)) downto to_integer(unsigned(add_ln1054_fu_328_p2))) when (to_integer(unsigned(add_ln1054_fu_328_p2)) >= 0 and to_integer(unsigned(add_ln1054_fu_328_p2)) <=15) else "-";
    p_Result_4_fu_436_p3 <= m_3_fu_416_p2(54 downto 54);
    p_Result_9_fu_224_p3 <= (ap_const_lv1_1 & p_Result_s_fu_214_p4);
    
    p_Result_s_fu_214_p4_proc : process(tmp_V_2_fu_209_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_s_fu_214_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_2_fu_209_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_s_fu_214_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_s_fu_214_p4_i) := tmp_V_2_fu_209_p3(16-1-p_Result_s_fu_214_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_214_p4 <= resvalue(16-1 downto 0);
    end process;

    select_ln1040_fu_491_p3 <= 
        ap_const_lv64_0 when (icmp_ln1040_fu_204_p2(0) = '1') else 
        bitcast_ln756_fu_487_p1;
    select_ln1048_fu_444_p3 <= 
        ap_const_lv11_3FF when (p_Result_4_fu_436_p3(0) = '1') else 
        ap_const_lv11_3FE;
    select_ln560_fu_734_p3 <= 
        ap_const_lv16_0 when (icmp_ln560_fu_558_p2(0) = '1') else 
        select_ln570_fu_726_p3;
    select_ln570_fu_726_p3 <= 
        select_ln574_1_fu_702_p3 when (and_ln570_fu_684_p2(0) = '1') else 
        select_ln571_fu_718_p3;
    select_ln571_fu_718_p3 <= 
        trunc_ln572_fu_606_p1 when (and_ln571_fu_666_p2(0) = '1') else 
        select_ln592_fu_710_p3;
    select_ln574_1_fu_702_p3 <= 
        trunc_ln838_fu_690_p1 when (icmp_ln574_fu_610_p2(0) = '1') else 
        select_ln574_fu_694_p3;
    select_ln574_fu_694_p3 <= 
        ap_const_lv16_FFFF when (tmp_4_fu_626_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln592_fu_710_p3 <= 
        shl_ln593_fu_654_p2 when (icmp_ln592_fu_644_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln1198_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_9_fu_224_p3),32));

        sext_ln1303_cast_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1303),24));

        sext_ln570_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_588_p3),32));

    sext_ln570cast_fu_650_p1 <= sext_ln570_fu_596_p1(16 - 1 downto 0);
    sh_amt_fu_588_p3 <= 
        add_ln570_fu_576_p2 when (icmp_ln570_fu_570_p2(0) = '1') else 
        sub_ln570_fu_582_p2;
    shl_ln1064_fu_398_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1062_fu_362_p1),to_integer(unsigned('0' & zext_ln1064_fu_394_p1(31-1 downto 0)))));
    shl_ln593_fu_654_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln572_fu_606_p1),to_integer(unsigned('0' & sext_ln570cast_fu_650_p1(16-1 downto 0)))));
    sub_ln1049_fu_244_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_fu_236_p3));
    sub_ln1052_fu_280_p2 <= std_logic_vector(unsigned(ap_const_lv4_6) - unsigned(trunc_ln1052_fu_276_p1));
    sub_ln1064_fu_388_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln1049_fu_244_p2));
    sub_ln1070_fu_456_p2 <= std_logic_vector(unsigned(ap_const_lv11_8) - unsigned(trunc_ln1048_fu_452_p1));
    sub_ln570_fu_582_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(F2_fu_564_p2));
    tmp_1_fu_314_p3 <= lsb_index_fu_254_p2(31 downto 31);
    tmp_4_fu_626_p3 <= ireg_fu_499_p1(63 downto 63);
    tmp_5_fu_468_p3 <= (p_Result_8_reg_788 & add_ln1076_fu_462_p2);
    tmp_6_fu_634_p4 <= sh_amt_fu_588_p3(11 downto 4);
    tmp_V_2_fu_209_p3 <= 
        tmp_V_reg_794 when (p_Result_8_reg_788(0) = '1') else 
        p_Val2_s_reg_782;
    tmp_V_fu_198_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(output_r_q1));
    tmp_fu_260_p4 <= lsb_index_fu_254_p2(31 downto 1);
    trunc_ln1048_fu_452_p1 <= l_fu_236_p3(11 - 1 downto 0);
    trunc_ln1049_fu_250_p1 <= sub_ln1049_fu_244_p2(16 - 1 downto 0);
    trunc_ln1052_fu_276_p1 <= sub_ln1049_fu_244_p2(4 - 1 downto 0);
    trunc_ln544_fu_502_p1 <= ireg_fu_499_p1(63 - 1 downto 0);
    trunc_ln554_fu_528_p1 <= ireg_fu_499_p1(52 - 1 downto 0);
    trunc_ln572_fu_606_p1 <= man_V_2_fu_550_p3(16 - 1 downto 0);
    trunc_ln838_fu_690_p1 <= ashr_ln575_fu_620_p2(16 - 1 downto 0);
    xor_ln1054_fu_322_p2 <= (tmp_1_fu_314_p3 xor ap_const_lv1_1);
    xor_ln560_fu_660_p2 <= (icmp_ln560_fu_558_p2 xor ap_const_lv1_1);
    xor_ln571_fu_678_p2 <= (or_ln571_fu_672_p2 xor ap_const_lv1_1);
    zext_ln1052_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1052_fu_280_p2),16));
    zext_ln1062_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_fu_209_p3),64));
    zext_ln1063_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1063_fu_372_p2),64));
    zext_ln1064_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln1064_fu_388_p2),64));
    zext_ln1066_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1054_1_fu_354_p3),64));
    zext_ln1067_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_fu_422_p4),64));
    zext_ln455_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_fu_514_p4),12));
    zext_ln558_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_12_fu_532_p3),54));
    zext_ln575_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln570_fu_596_p1),54));
end behav;
