-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gesture_model_dense_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of gesture_model_dense_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_load_reg_325 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal input_load_1_reg_330 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_2_reg_345 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal input_load_3_reg_350 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_4_reg_365 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal input_load_5_reg_370 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_6_reg_385 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal input_load_7_reg_390 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_8_reg_405 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal input_load_9_reg_410 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_10_reg_425 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_load_11_reg_430 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_12_reg_445 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal input_load_13_reg_450 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_14_reg_465 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal input_load_15_reg_470 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_start : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_done : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_idle : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_ready : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_ce0 : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_we0 : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_start : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_done : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_idle : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_ready : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_output_r_ce0 : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_softmax_sum_V_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_softmax_sum_V_out_ap_vld : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_grp_fu_478_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_grp_fu_478_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_grp_fu_478_p_ce : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_start : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_done : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_idle : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_ready : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_ce0 : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_we0 : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_ce1 : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_grp_fu_478_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_grp_fu_478_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_grp_fu_478_p_ce : STD_LOGIC;
    signal grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_478_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_478_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_478_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln818 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1347 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1347_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1347_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1347_3 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1347_4 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1347_5 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1347_6 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1347_7 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1347_8 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1347_9 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1347_10 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1347_11 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1347_12 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1347_13 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1347_14 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_122_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        softmax_sum_V_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        softmax_sum_V_out_ap_vld : OUT STD_LOGIC;
        grp_fu_478_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_478_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_478_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_478_p_ce : OUT STD_LOGIC );
    end component;


    component gesture_model_dense_1_Pipeline_VITIS_LOOP_126_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln1303 : IN STD_LOGIC_VECTOR (15 downto 0);
        grp_fu_478_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_478_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_478_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_478_p_ce : OUT STD_LOGIC );
    end component;


    component gesture_model_dexp_64ns_64ns_64_13_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233 : component gesture_model_dense_1_Pipeline_VITIS_LOOP_111_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_start,
        ap_done => grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_done,
        ap_idle => grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_idle,
        ap_ready => grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_ready,
        sext_ln818 => input_load_reg_325,
        sext_ln1347 => input_load_1_reg_330,
        sext_ln1347_1 => input_load_2_reg_345,
        sext_ln1347_2 => input_load_3_reg_350,
        sext_ln1347_3 => input_load_4_reg_365,
        sext_ln1347_4 => input_load_5_reg_370,
        sext_ln1347_5 => input_load_6_reg_385,
        sext_ln1347_6 => input_load_7_reg_390,
        sext_ln1347_7 => input_load_8_reg_405,
        sext_ln1347_8 => input_load_9_reg_410,
        sext_ln1347_9 => input_load_10_reg_425,
        sext_ln1347_10 => input_load_11_reg_430,
        sext_ln1347_11 => input_load_12_reg_445,
        sext_ln1347_12 => input_load_13_reg_450,
        sext_ln1347_13 => input_load_14_reg_465,
        sext_ln1347_14 => input_load_15_reg_470,
        output_r_address0 => grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_address0,
        output_r_ce0 => grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_ce0,
        output_r_we0 => grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_we0,
        output_r_d0 => grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_d0);

    grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291 : component gesture_model_dense_1_Pipeline_VITIS_LOOP_122_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_start,
        ap_done => grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_done,
        ap_idle => grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_idle,
        ap_ready => grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_ready,
        output_r_address0 => grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_output_r_address0,
        output_r_ce0 => grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_output_r_ce0,
        output_r_q0 => output_r_q0,
        softmax_sum_V_out => grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_softmax_sum_V_out,
        softmax_sum_V_out_ap_vld => grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_softmax_sum_V_out_ap_vld,
        grp_fu_478_p_din0 => grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_grp_fu_478_p_din0,
        grp_fu_478_p_din1 => grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_grp_fu_478_p_din1,
        grp_fu_478_p_dout0 => grp_fu_478_p2,
        grp_fu_478_p_ce => grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_grp_fu_478_p_ce);

    grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298 : component gesture_model_dense_1_Pipeline_VITIS_LOOP_126_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_start,
        ap_done => grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_done,
        ap_idle => grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_idle,
        ap_ready => grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_ready,
        output_r_address0 => grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_address0,
        output_r_ce0 => grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_ce0,
        output_r_we0 => grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_we0,
        output_r_d0 => grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_d0,
        output_r_address1 => grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_address1,
        output_r_ce1 => grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_ce1,
        output_r_q1 => output_r_q1,
        sext_ln1303 => grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_softmax_sum_V_out,
        grp_fu_478_p_din0 => grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_grp_fu_478_p_din0,
        grp_fu_478_p_din1 => grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_grp_fu_478_p_din1,
        grp_fu_478_p_dout0 => grp_fu_478_p2,
        grp_fu_478_p_ce => grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_grp_fu_478_p_ce);

    dexp_64ns_64ns_64_13_full_dsp_1_U109 : component gesture_model_dexp_64ns_64ns_64_13_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_478_p0,
        din1 => grp_fu_478_p1,
        ce => grp_fu_478_ce,
        dout => grp_fu_478_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_ready = ap_const_logic_1)) then 
                    grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_ready = ap_const_logic_1)) then 
                    grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_ready = ap_const_logic_1)) then 
                    grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_load_10_reg_425 <= input_r_q1;
                input_load_11_reg_430 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                input_load_12_reg_445 <= input_r_q1;
                input_load_13_reg_450 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                input_load_14_reg_465 <= input_r_q1;
                input_load_15_reg_470 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                input_load_1_reg_330 <= input_r_q0;
                input_load_reg_325 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                input_load_2_reg_345 <= input_r_q1;
                input_load_3_reg_350 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                input_load_4_reg_365 <= input_r_q1;
                input_load_5_reg_370 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                input_load_6_reg_385 <= input_r_q1;
                input_load_7_reg_390 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_load_8_reg_405 <= input_r_q1;
                input_load_9_reg_410 <= input_r_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_done, grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_done, grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_done)
    begin
        if ((grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_done)
    begin
        if ((grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state14_blk_assign_proc : process(grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_done)
    begin
        if ((grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_done, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_done, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_start <= grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_ap_start_reg;
    grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_start <= grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_ap_start_reg;
    grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_start <= grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_ap_start_reg;

    grp_fu_478_ce_assign_proc : process(grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_grp_fu_478_p_ce, grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_grp_fu_478_p_ce, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_478_ce <= grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_grp_fu_478_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_478_ce <= grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_grp_fu_478_p_ce;
        else 
            grp_fu_478_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_478_p0_assign_proc : process(grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_grp_fu_478_p_din0, grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_grp_fu_478_p_din0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_478_p0 <= grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_grp_fu_478_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_478_p0 <= grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_grp_fu_478_p_din0;
        else 
            grp_fu_478_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_478_p1_assign_proc : process(grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_grp_fu_478_p_din1, grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_grp_fu_478_p_din1, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_478_p1 <= grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_grp_fu_478_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_478_p1 <= grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_grp_fu_478_p_din1;
        else 
            grp_fu_478_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address0 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            input_r_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            input_r_address0 <= "XXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            input_r_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            input_r_address1 <= "XXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_address0_assign_proc : process(grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_address0, grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_output_r_address0, grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_address0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_address0 <= grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_address0 <= grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_address0 <= grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_address0;
        else 
            output_r_address0 <= "XXXXX";
        end if; 
    end process;

    output_r_address1 <= grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_address1;

    output_r_ce0_assign_proc : process(grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_ce0, grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_output_r_ce0, grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_ce0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_ce0 <= grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_ce0 <= grp_dense_1_Pipeline_VITIS_LOOP_122_3_fu_291_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_ce0 <= grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_ce0;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_ce1_assign_proc : process(grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_ce1, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_ce1 <= grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_ce1;
        else 
            output_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_d0, grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_d0, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_d0 <= grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_d0 <= grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_d0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_we0, grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_we0, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_we0 <= grp_dense_1_Pipeline_VITIS_LOOP_126_4_fu_298_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_we0 <= grp_dense_1_Pipeline_VITIS_LOOP_111_1_fu_233_output_r_we0;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
