// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gesture_model_dense_0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [14:0] output_r_d0;

reg ap_idle;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln90_fu_159_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] dense_0_biases_V_address0;
reg    dense_0_biases_V_ce0;
wire   [7:0] dense_0_biases_V_q0;
wire   [13:0] dense_0_weights_V_address0;
reg    dense_0_weights_V_ce0;
wire  signed [6:0] dense_0_weights_V_q0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln93_fu_183_p2;
reg   [0:0] icmp_ln93_reg_390;
reg   [0:0] icmp_ln93_reg_390_pp0_iter1_reg;
reg   [0:0] icmp_ln93_reg_390_pp0_iter2_reg;
wire   [4:0] select_ln90_1_fu_197_p3;
reg   [4:0] select_ln90_1_reg_395;
reg   [4:0] select_ln90_1_reg_395_pp0_iter1_reg;
reg   [4:0] select_ln90_1_reg_395_pp0_iter2_reg;
wire   [0:0] ifzero_fu_239_p2;
reg   [0:0] ifzero_reg_410;
reg   [0:0] ifzero_reg_410_pp0_iter1_reg;
reg   [0:0] ifzero_reg_410_pp0_iter2_reg;
reg   [0:0] ifzero_reg_410_pp0_iter3_reg;
wire   [63:0] zext_ln90_fu_271_p1;
reg   [63:0] zext_ln90_reg_424;
wire   [63:0] zext_ln1273_fu_228_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] j_cast_fu_209_p1;
reg   [15:0] lhs_fu_68;
wire   [15:0] sum_V_fu_290_p4;
reg   [15:0] ap_sig_allocacmp_lhs_load;
wire    ap_loop_init;
reg    ap_loop_init_pp0_iter1_reg;
reg    ap_loop_init_pp0_iter2_reg;
reg    ap_loop_init_pp0_iter3_reg;
reg   [9:0] j_fu_72;
wire   [9:0] add_ln93_fu_233_p2;
reg   [9:0] ap_sig_allocacmp_j_load;
reg   [4:0] i_fu_76;
reg   [4:0] ap_sig_allocacmp_i_load;
reg   [13:0] indvar_flatten_fu_80;
wire   [13:0] add_ln90_1_fu_165_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [4:0] add_ln90_fu_177_p2;
wire   [9:0] select_ln90_fu_189_p3;
wire   [13:0] tmp_fu_214_p3;
wire   [13:0] select_ln90_1_cast_fu_205_p1;
wire   [13:0] add_ln1273_fu_222_p2;
wire   [15:0] select_ln90_2_fu_275_p3;
wire  signed [23:0] grp_fu_348_p3;
wire  signed [7:0] dense_0_biases_V_load_cast_fu_299_p0;
wire  signed [7:0] sext_ln813_1_fu_312_p0;
wire  signed [15:0] dense_0_biases_V_load_cast_fu_299_p1;
wire   [14:0] trunc_ln_fu_303_p4;
wire  signed [14:0] sext_ln813_1_fu_312_p1;
wire   [15:0] x_V_fu_316_p2;
wire   [0:0] icmp_ln1649_fu_328_p2;
wire   [14:0] add_ln17_fu_322_p2;
wire  signed [23:0] grp_fu_348_p2;
reg    grp_fu_348_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_178;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gesture_model_dense_0_dense_0_biases_V_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
dense_0_biases_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_0_biases_V_address0),
    .ce0(dense_0_biases_V_ce0),
    .q0(dense_0_biases_V_q0)
);

gesture_model_dense_0_dense_0_weights_V_ROM_AUTO_1R #(
    .DataWidth( 7 ),
    .AddressRange( 15104 ),
    .AddressWidth( 14 ))
dense_0_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_0_weights_V_address0),
    .ce0(dense_0_weights_V_ce0),
    .q0(dense_0_weights_V_q0)
);

gesture_model_mac_muladd_16s_7s_24s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_7s_24s_24_4_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_r_q0),
    .din1(dense_0_weights_V_q0),
    .din2(grp_fu_348_p2),
    .ce(grp_fu_348_ce),
    .dout(grp_fu_348_p3)
);

gesture_model_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_178)) begin
        if ((icmp_ln90_fu_159_p2 == 1'd0)) begin
            i_fu_76 <= select_ln90_1_fu_197_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_76 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_178)) begin
        if ((icmp_ln90_fu_159_p2 == 1'd0)) begin
            indvar_flatten_fu_80 <= add_ln90_1_fu_165_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_80 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_178)) begin
        if ((icmp_ln90_fu_159_p2 == 1'd0)) begin
            j_fu_72 <= add_ln93_fu_233_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_72 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_loop_init_pp0_iter3_reg == 1'b1))) begin
            lhs_fu_68 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            lhs_fu_68 <= {{grp_fu_348_p3[23:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
        ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
        icmp_ln93_reg_390_pp0_iter1_reg <= icmp_ln93_reg_390;
        ifzero_reg_410_pp0_iter1_reg <= ifzero_reg_410;
        select_ln90_1_reg_395_pp0_iter1_reg <= select_ln90_1_reg_395;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_init_pp0_iter3_reg <= ap_loop_init_pp0_iter2_reg;
        icmp_ln93_reg_390_pp0_iter2_reg <= icmp_ln93_reg_390_pp0_iter1_reg;
        ifzero_reg_410_pp0_iter2_reg <= ifzero_reg_410_pp0_iter1_reg;
        ifzero_reg_410_pp0_iter3_reg <= ifzero_reg_410_pp0_iter2_reg;
        select_ln90_1_reg_395_pp0_iter2_reg <= select_ln90_1_reg_395_pp0_iter1_reg;
        zext_ln90_reg_424[4 : 0] <= zext_ln90_fu_271_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_159_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln93_reg_390 <= icmp_ln93_fu_183_p2;
        ifzero_reg_410 <= ifzero_fu_239_p2;
        select_ln90_1_reg_395 <= select_ln90_1_fu_197_p3;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_159_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 5'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 10'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_72;
    end
end

always @ (*) begin
    if ((1'b0 == ap_block_pp0_stage0)) begin
        if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_loop_init_pp0_iter3_reg == 1'b1))) begin
            ap_sig_allocacmp_lhs_load = 16'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            ap_sig_allocacmp_lhs_load = {{grp_fu_348_p3[23:8]}};
        end else begin
            ap_sig_allocacmp_lhs_load = lhs_fu_68;
        end
    end else begin
        ap_sig_allocacmp_lhs_load = lhs_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dense_0_biases_V_ce0 = 1'b1;
    end else begin
        dense_0_biases_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_0_weights_V_ce0 = 1'b1;
    end else begin
        dense_0_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_348_ce = 1'b1;
    end else begin
        grp_fu_348_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ifzero_reg_410_pp0_iter3_reg == 1'd1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1273_fu_222_p2 = (tmp_fu_214_p3 + select_ln90_1_cast_fu_205_p1);

assign add_ln17_fu_322_p2 = ($signed(trunc_ln_fu_303_p4) + $signed(sext_ln813_1_fu_312_p1));

assign add_ln90_1_fu_165_p2 = (ap_sig_allocacmp_indvar_flatten_load + 14'd1);

assign add_ln90_fu_177_p2 = (ap_sig_allocacmp_i_load + 5'd1);

assign add_ln93_fu_233_p2 = (select_ln90_fu_189_p3 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_178 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dense_0_biases_V_address0 = zext_ln90_fu_271_p1;

assign dense_0_biases_V_load_cast_fu_299_p0 = dense_0_biases_V_q0;

assign dense_0_biases_V_load_cast_fu_299_p1 = dense_0_biases_V_load_cast_fu_299_p0;

assign dense_0_weights_V_address0 = zext_ln1273_fu_228_p1;

assign grp_fu_348_p2 = {{select_ln90_2_fu_275_p3}, {8'd0}};

assign icmp_ln1649_fu_328_p2 = (($signed(x_V_fu_316_p2) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_159_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 14'd15104) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_183_p2 = ((ap_sig_allocacmp_j_load == 10'd944) ? 1'b1 : 1'b0);

assign ifzero_fu_239_p2 = ((add_ln93_fu_233_p2 == 10'd944) ? 1'b1 : 1'b0);

assign input_r_address0 = j_cast_fu_209_p1;

assign j_cast_fu_209_p1 = select_ln90_fu_189_p3;

assign output_r_address0 = zext_ln90_reg_424;

assign output_r_d0 = ((icmp_ln1649_fu_328_p2[0:0] == 1'b1) ? add_ln17_fu_322_p2 : 15'd0);

assign select_ln90_1_cast_fu_205_p1 = select_ln90_1_fu_197_p3;

assign select_ln90_1_fu_197_p3 = ((icmp_ln93_fu_183_p2[0:0] == 1'b1) ? add_ln90_fu_177_p2 : ap_sig_allocacmp_i_load);

assign select_ln90_2_fu_275_p3 = ((icmp_ln93_reg_390_pp0_iter2_reg[0:0] == 1'b1) ? 16'd0 : ap_sig_allocacmp_lhs_load);

assign select_ln90_fu_189_p3 = ((icmp_ln93_fu_183_p2[0:0] == 1'b1) ? 10'd0 : ap_sig_allocacmp_j_load);

assign sext_ln813_1_fu_312_p0 = dense_0_biases_V_q0;

assign sext_ln813_1_fu_312_p1 = sext_ln813_1_fu_312_p0;

assign sum_V_fu_290_p4 = {{grp_fu_348_p3[23:8]}};

assign tmp_fu_214_p3 = {{select_ln90_fu_189_p3}, {4'd0}};

assign trunc_ln_fu_303_p4 = {{grp_fu_348_p3[22:8]}};

assign x_V_fu_316_p2 = ($signed(sum_V_fu_290_p4) + $signed(dense_0_biases_V_load_cast_fu_299_p1));

assign zext_ln1273_fu_228_p1 = add_ln1273_fu_222_p2;

assign zext_ln90_fu_271_p1 = select_ln90_1_reg_395_pp0_iter2_reg;

always @ (posedge ap_clk) begin
    zext_ln90_reg_424[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //gesture_model_dense_0
