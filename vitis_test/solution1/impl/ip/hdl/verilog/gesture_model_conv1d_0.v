// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gesture_model_conv1d_0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_0_address1,
        input_0_ce1,
        input_0_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [6:0] input_0_address0;
output   input_0_ce0;
input  [23:0] input_0_q0;
output  [6:0] input_0_address1;
output   input_0_ce1;
input  [23:0] input_0_q1;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [22:0] output_r_d0;

reg ap_idle;
reg[6:0] input_0_address0;
reg input_0_ce0;
reg input_0_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
reg    ap_done_reg;
reg    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln25_reg_941;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] conv1d_0_weights_V_0_0_address0;
reg    conv1d_0_weights_V_0_0_ce0;
wire  signed [17:0] conv1d_0_weights_V_0_0_q0;
wire   [3:0] conv1d_0_weights_V_1_0_address0;
reg    conv1d_0_weights_V_1_0_ce0;
wire  signed [17:0] conv1d_0_weights_V_1_0_q0;
wire   [3:0] conv1d_0_weights_V_2_0_address0;
reg    conv1d_0_weights_V_2_0_ce0;
wire   [17:0] conv1d_0_weights_V_2_0_q0;
wire   [3:0] conv1d_0_biases_V_address0;
reg    conv1d_0_biases_V_ce0;
wire   [16:0] conv1d_0_biases_V_q0;
wire   [0:0] icmp_ln25_fu_224_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln25_reg_941_pp0_iter1_reg;
wire   [6:0] select_ln25_3_fu_308_p3;
reg   [6:0] select_ln25_3_reg_955;
wire   [63:0] j_cast_fu_316_p1;
reg   [63:0] j_cast_reg_960;
reg   [63:0] j_cast_reg_960_pp0_iter1_reg;
wire   [10:0] add_ln37_fu_327_p2;
reg   [10:0] add_ln37_reg_965;
reg   [10:0] add_ln37_reg_965_pp0_iter1_reg;
reg   [10:0] add_ln37_reg_965_pp0_iter2_reg;
reg    ap_block_pp0_stage1_11001;
reg  signed [17:0] conv1d_0_weights_V_2_0_load_reg_1010;
wire   [23:0] select_ln346_39_fu_622_p3;
reg   [23:0] select_ln346_39_reg_1025;
wire   [22:0] select_ln20_fu_881_p3;
reg   [22:0] select_ln20_reg_1035;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln25_fu_278_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln25_1_fu_297_p1;
wire   [63:0] zext_ln25_2_fu_362_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln37_1_fu_889_p1;
reg   [4:0] j_fu_96;
wire   [4:0] add_ln27_fu_333_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [6:0] i_fu_100;
wire   [6:0] select_ln25_1_fu_262_p3;
reg   [6:0] ap_sig_allocacmp_i_load;
reg   [10:0] indvar_flatten_fu_104;
wire   [10:0] add_ln25_fu_230_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln27_fu_242_p2;
wire   [6:0] add_ln1271_fu_256_p2;
wire   [6:0] add_ln1271_1_fu_283_p2;
wire   [6:0] select_ln25_2_fu_289_p3;
wire   [6:0] add_ln1271_2_fu_302_p2;
wire   [4:0] select_ln25_fu_248_p3;
wire   [10:0] tmp_s_fu_270_p3;
wire   [10:0] zext_ln37_fu_323_p1;
wire  signed [41:0] grp_fu_893_p2;
wire   [0:0] tmp_70_fu_397_p3;
wire   [0:0] tmp_71_fu_404_p3;
wire   [0:0] tmp_fu_381_p3;
wire   [0:0] or_ln895_fu_411_p2;
wire   [0:0] xor_ln895_17_fu_417_p2;
wire   [0:0] and_ln896_fu_429_p2;
wire   [22:0] tmp_4_fu_441_p4;
wire   [0:0] icmp_ln900_17_fu_450_p2;
wire   [0:0] xor_ln896_18_fu_435_p2;
wire   [0:0] or_ln898_18_fu_456_p2;
wire   [0:0] and_ln895_fu_423_p2;
wire   [0:0] and_ln898_fu_462_p2;
wire   [0:0] or_ln346_fu_468_p2;
wire   [23:0] select_ln346_fu_474_p3;
wire   [23:0] trunc_ln_fu_388_p4;
wire   [23:0] select_ln346_37_fu_482_p3;
wire  signed [41:0] shl_ln_fu_490_p3;
wire  signed [41:0] grp_fu_904_p2;
wire  signed [42:0] sext_ln1347_fu_502_p1;
wire  signed [42:0] sext_ln813_fu_498_p1;
wire   [42:0] add_ln1347_fu_510_p2;
(* use_dsp48 = "no" *) wire   [41:0] add_ln1347_18_fu_505_p2;
wire   [0:0] tmp_73_fu_534_p3;
wire   [0:0] tmp_74_fu_542_p3;
wire   [0:0] tmp_72_fu_516_p3;
wire   [0:0] or_ln895_1_fu_550_p2;
wire   [0:0] xor_ln895_18_fu_556_p2;
wire   [0:0] and_ln896_16_fu_568_p2;
wire   [22:0] tmp_11_1_fu_580_p4;
wire   [0:0] icmp_ln900_18_fu_590_p2;
wire   [0:0] xor_ln896_19_fu_574_p2;
wire   [0:0] or_ln898_fu_596_p2;
wire   [0:0] and_ln895_17_fu_562_p2;
wire   [0:0] and_ln898_17_fu_602_p2;
wire   [0:0] or_ln346_18_fu_608_p2;
wire   [23:0] select_ln346_38_fu_614_p3;
wire   [23:0] trunc_ln818_s_fu_524_p4;
wire  signed [41:0] shl_ln838_s_fu_630_p3;
wire  signed [41:0] grp_fu_912_p2;
wire  signed [42:0] sext_ln1347_2_fu_641_p1;
wire  signed [42:0] sext_ln813_17_fu_637_p1;
wire   [42:0] add_ln1347_17_fu_649_p2;
(* use_dsp48 = "no" *) wire   [41:0] add_ln1347_19_fu_644_p2;
wire   [0:0] tmp_76_fu_673_p3;
wire   [0:0] tmp_77_fu_681_p3;
wire   [0:0] tmp_75_fu_655_p3;
wire   [0:0] or_ln895_2_fu_689_p2;
wire   [0:0] xor_ln895_19_fu_695_p2;
wire   [0:0] and_ln896_17_fu_707_p2;
wire   [22:0] tmp_11_2_fu_719_p4;
wire   [0:0] icmp_ln900_19_fu_729_p2;
wire   [0:0] xor_ln896_20_fu_713_p2;
wire   [0:0] or_ln898_19_fu_735_p2;
wire   [0:0] and_ln895_18_fu_701_p2;
wire   [0:0] and_ln898_18_fu_741_p2;
wire   [0:0] or_ln346_19_fu_755_p2;
wire   [23:0] select_ln346_40_fu_747_p3;
wire   [23:0] trunc_ln818_15_fu_663_p4;
wire  signed [23:0] lhs_fu_761_p3;
wire  signed [16:0] conv1d_0_biases_V_load_cast_fu_773_p0;
wire  signed [16:0] sext_ln813_19_fu_777_p0;
wire  signed [24:0] sext_ln813_18_fu_769_p1;
wire  signed [24:0] sext_ln813_19_fu_777_p1;
wire   [24:0] ret_V_fu_781_p2;
wire  signed [23:0] conv1d_0_biases_V_load_cast_fu_773_p1;
wire   [23:0] p_Val2_17_fu_795_p2;
wire   [0:0] p_Result_s_fu_787_p3;
wire   [0:0] p_Result_39_fu_801_p3;
wire   [0:0] xor_ln895_fu_809_p2;
wire   [22:0] trunc_ln900_fu_827_p1;
wire   [0:0] icmp_ln900_fu_831_p2;
wire   [0:0] xor_ln896_fu_821_p2;
wire   [0:0] or_ln898_20_fu_837_p2;
wire   [0:0] overflow_fu_815_p2;
wire   [0:0] underflow_fu_843_p2;
wire   [0:0] or_ln346_20_fu_857_p2;
wire   [23:0] select_ln346_42_fu_849_p3;
wire   [23:0] x_V_fu_863_p3;
wire   [0:0] icmp_ln1649_fu_875_p2;
wire   [22:0] trunc_ln17_fu_871_p1;
reg    grp_fu_893_ce;
reg    grp_fu_904_ce;
reg    grp_fu_912_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage0;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_205;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

gesture_model_conv1d_0_conv1d_0_weights_V_0_0_ROM_AUTO_1R #(
    .DataWidth( 18 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv1d_0_weights_V_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1d_0_weights_V_0_0_address0),
    .ce0(conv1d_0_weights_V_0_0_ce0),
    .q0(conv1d_0_weights_V_0_0_q0)
);

gesture_model_conv1d_0_conv1d_0_weights_V_1_0_ROM_AUTO_1R #(
    .DataWidth( 18 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv1d_0_weights_V_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1d_0_weights_V_1_0_address0),
    .ce0(conv1d_0_weights_V_1_0_ce0),
    .q0(conv1d_0_weights_V_1_0_q0)
);

gesture_model_conv1d_0_conv1d_0_weights_V_2_0_ROM_AUTO_1R #(
    .DataWidth( 18 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv1d_0_weights_V_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1d_0_weights_V_2_0_address0),
    .ce0(conv1d_0_weights_V_2_0_ce0),
    .q0(conv1d_0_weights_V_2_0_q0)
);

gesture_model_conv1d_0_conv1d_0_biases_V_ROM_AUTO_1R #(
    .DataWidth( 17 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv1d_0_biases_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1d_0_biases_V_address0),
    .ce0(conv1d_0_biases_V_ce0),
    .q0(conv1d_0_biases_V_q0)
);

gesture_model_mul_mul_24s_18s_42_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 42 ))
mul_mul_24s_18s_42_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_0_q1),
    .din1(conv1d_0_weights_V_0_0_q0),
    .ce(grp_fu_893_ce),
    .dout(grp_fu_893_p2)
);

gesture_model_mul_mul_24s_18s_42_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 42 ))
mul_mul_24s_18s_42_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_0_q0),
    .din1(conv1d_0_weights_V_1_0_q0),
    .ce(grp_fu_904_ce),
    .dout(grp_fu_904_p2)
);

gesture_model_mul_mul_24s_18s_42_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 42 ))
mul_mul_24s_18s_42_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_0_q0),
    .din1(conv1d_0_weights_V_2_0_load_reg_1010),
    .ce(grp_fu_912_ce),
    .dout(grp_fu_912_p2)
);

gesture_model_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_205)) begin
        if ((icmp_ln25_fu_224_p2 == 1'd0)) begin
            i_fu_100 <= select_ln25_1_fu_262_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_100 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_205)) begin
        if ((icmp_ln25_fu_224_p2 == 1'd0)) begin
            indvar_flatten_fu_104 <= add_ln25_fu_230_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_104 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_205)) begin
        if ((icmp_ln25_fu_224_p2 == 1'd0)) begin
            j_fu_96 <= add_ln27_fu_333_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_96 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_fu_224_p2 == 1'd0))) begin
        add_ln37_reg_965 <= add_ln37_fu_327_p2;
        j_cast_reg_960[4 : 0] <= j_cast_fu_316_p1[4 : 0];
        select_ln25_3_reg_955 <= select_ln25_3_fu_308_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln37_reg_965_pp0_iter1_reg <= add_ln37_reg_965;
        add_ln37_reg_965_pp0_iter2_reg <= add_ln37_reg_965_pp0_iter1_reg;
        icmp_ln25_reg_941 <= icmp_ln25_fu_224_p2;
        icmp_ln25_reg_941_pp0_iter1_reg <= icmp_ln25_reg_941;
        j_cast_reg_960_pp0_iter1_reg[4 : 0] <= j_cast_reg_960[4 : 0];
        select_ln346_39_reg_1025 <= select_ln346_39_fu_622_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_941 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv1d_0_weights_V_2_0_load_reg_1010 <= conv1d_0_weights_V_2_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln20_reg_1035 <= select_ln20_fu_881_p3;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_941 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_reg_941_pp0_iter1_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1d_0_biases_V_ce0 = 1'b1;
    end else begin
        conv1d_0_biases_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1d_0_weights_V_0_0_ce0 = 1'b1;
    end else begin
        conv1d_0_weights_V_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1d_0_weights_V_1_0_ce0 = 1'b1;
    end else begin
        conv1d_0_weights_V_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1d_0_weights_V_2_0_ce0 = 1'b1;
    end else begin
        conv1d_0_weights_V_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_893_ce = 1'b1;
    end else begin
        grp_fu_893_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_904_ce = 1'b1;
    end else begin
        grp_fu_904_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_912_ce = 1'b1;
    end else begin
        grp_fu_912_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_0_address0 = zext_ln25_2_fu_362_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_0_address0 = zext_ln25_1_fu_297_p1;
        end else begin
            input_0_address0 = 'bx;
        end
    end else begin
        input_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_ce1 = 1'b1;
    end else begin
        input_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1271_1_fu_283_p2 = (ap_sig_allocacmp_i_load + 7'd2);

assign add_ln1271_2_fu_302_p2 = (ap_sig_allocacmp_i_load + 7'd3);

assign add_ln1271_fu_256_p2 = (ap_sig_allocacmp_i_load + 7'd1);

assign add_ln1347_17_fu_649_p2 = ($signed(sext_ln1347_2_fu_641_p1) + $signed(sext_ln813_17_fu_637_p1));

assign add_ln1347_18_fu_505_p2 = ($signed(grp_fu_904_p2) + $signed(shl_ln_fu_490_p3));

assign add_ln1347_19_fu_644_p2 = ($signed(grp_fu_912_p2) + $signed(shl_ln838_s_fu_630_p3));

assign add_ln1347_fu_510_p2 = ($signed(sext_ln1347_fu_502_p1) + $signed(sext_ln813_fu_498_p1));

assign add_ln25_fu_230_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln27_fu_333_p2 = (select_ln25_fu_248_p3 + 5'd1);

assign add_ln37_fu_327_p2 = (tmp_s_fu_270_p3 + zext_ln37_fu_323_p1);

assign and_ln895_17_fu_562_p2 = (xor_ln895_18_fu_556_p2 & or_ln895_1_fu_550_p2);

assign and_ln895_18_fu_701_p2 = (xor_ln895_19_fu_695_p2 & or_ln895_2_fu_689_p2);

assign and_ln895_fu_423_p2 = (xor_ln895_17_fu_417_p2 & or_ln895_fu_411_p2);

assign and_ln896_16_fu_568_p2 = (tmp_74_fu_542_p3 & tmp_73_fu_534_p3);

assign and_ln896_17_fu_707_p2 = (tmp_77_fu_681_p3 & tmp_76_fu_673_p3);

assign and_ln896_fu_429_p2 = (tmp_71_fu_404_p3 & tmp_70_fu_397_p3);

assign and_ln898_17_fu_602_p2 = (tmp_72_fu_516_p3 & or_ln898_fu_596_p2);

assign and_ln898_18_fu_741_p2 = (tmp_75_fu_655_p3 & or_ln898_19_fu_735_p2);

assign and_ln898_fu_462_p2 = (tmp_fu_381_p3 & or_ln898_18_fu_456_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_205 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign conv1d_0_biases_V_address0 = j_cast_reg_960_pp0_iter1_reg;

assign conv1d_0_biases_V_load_cast_fu_773_p0 = conv1d_0_biases_V_q0;

assign conv1d_0_biases_V_load_cast_fu_773_p1 = conv1d_0_biases_V_load_cast_fu_773_p0;

assign conv1d_0_weights_V_0_0_address0 = j_cast_fu_316_p1;

assign conv1d_0_weights_V_1_0_address0 = j_cast_fu_316_p1;

assign conv1d_0_weights_V_2_0_address0 = j_cast_fu_316_p1;

assign icmp_ln1649_fu_875_p2 = (($signed(x_V_fu_863_p3) > $signed(24'd0)) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_224_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1888) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_242_p2 = ((ap_sig_allocacmp_j_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln900_17_fu_450_p2 = ((tmp_4_fu_441_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_18_fu_590_p2 = ((tmp_11_1_fu_580_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_19_fu_729_p2 = ((tmp_11_2_fu_719_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_fu_831_p2 = ((trunc_ln900_fu_827_p1 == 23'd0) ? 1'b1 : 1'b0);

assign input_0_address1 = zext_ln25_fu_278_p1;

assign j_cast_fu_316_p1 = select_ln25_fu_248_p3;

assign lhs_fu_761_p3 = ((or_ln346_19_fu_755_p2[0:0] == 1'b1) ? select_ln346_40_fu_747_p3 : trunc_ln818_15_fu_663_p4);

assign or_ln346_18_fu_608_p2 = (and_ln898_17_fu_602_p2 | and_ln895_17_fu_562_p2);

assign or_ln346_19_fu_755_p2 = (and_ln898_18_fu_741_p2 | and_ln895_18_fu_701_p2);

assign or_ln346_20_fu_857_p2 = (underflow_fu_843_p2 | overflow_fu_815_p2);

assign or_ln346_fu_468_p2 = (and_ln898_fu_462_p2 | and_ln895_fu_423_p2);

assign or_ln895_1_fu_550_p2 = (tmp_74_fu_542_p3 | tmp_73_fu_534_p3);

assign or_ln895_2_fu_689_p2 = (tmp_77_fu_681_p3 | tmp_76_fu_673_p3);

assign or_ln895_fu_411_p2 = (tmp_71_fu_404_p3 | tmp_70_fu_397_p3);

assign or_ln898_18_fu_456_p2 = (xor_ln896_18_fu_435_p2 | icmp_ln900_17_fu_450_p2);

assign or_ln898_19_fu_735_p2 = (xor_ln896_20_fu_713_p2 | icmp_ln900_19_fu_729_p2);

assign or_ln898_20_fu_837_p2 = (xor_ln896_fu_821_p2 | icmp_ln900_fu_831_p2);

assign or_ln898_fu_596_p2 = (xor_ln896_19_fu_574_p2 | icmp_ln900_18_fu_590_p2);

assign output_r_address0 = zext_ln37_1_fu_889_p1;

assign output_r_d0 = select_ln20_reg_1035;

assign overflow_fu_815_p2 = (xor_ln895_fu_809_p2 & p_Result_39_fu_801_p3);

assign p_Result_39_fu_801_p3 = p_Val2_17_fu_795_p2[32'd23];

assign p_Result_s_fu_787_p3 = ret_V_fu_781_p2[32'd24];

assign p_Val2_17_fu_795_p2 = ($signed(lhs_fu_761_p3) + $signed(conv1d_0_biases_V_load_cast_fu_773_p1));

assign ret_V_fu_781_p2 = ($signed(sext_ln813_18_fu_769_p1) + $signed(sext_ln813_19_fu_777_p1));

assign select_ln20_fu_881_p3 = ((icmp_ln1649_fu_875_p2[0:0] == 1'b1) ? trunc_ln17_fu_871_p1 : 23'd0);

assign select_ln25_1_fu_262_p3 = ((icmp_ln27_fu_242_p2[0:0] == 1'b1) ? add_ln1271_fu_256_p2 : ap_sig_allocacmp_i_load);

assign select_ln25_2_fu_289_p3 = ((icmp_ln27_fu_242_p2[0:0] == 1'b1) ? add_ln1271_1_fu_283_p2 : add_ln1271_fu_256_p2);

assign select_ln25_3_fu_308_p3 = ((icmp_ln27_fu_242_p2[0:0] == 1'b1) ? add_ln1271_2_fu_302_p2 : add_ln1271_1_fu_283_p2);

assign select_ln25_fu_248_p3 = ((icmp_ln27_fu_242_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign select_ln346_37_fu_482_p3 = ((or_ln346_fu_468_p2[0:0] == 1'b1) ? select_ln346_fu_474_p3 : trunc_ln_fu_388_p4);

assign select_ln346_38_fu_614_p3 = ((and_ln895_17_fu_562_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_39_fu_622_p3 = ((or_ln346_18_fu_608_p2[0:0] == 1'b1) ? select_ln346_38_fu_614_p3 : trunc_ln818_s_fu_524_p4);

assign select_ln346_40_fu_747_p3 = ((and_ln895_18_fu_701_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_42_fu_849_p3 = ((overflow_fu_815_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_fu_474_p3 = ((and_ln895_fu_423_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign sext_ln1347_2_fu_641_p1 = grp_fu_912_p2;

assign sext_ln1347_fu_502_p1 = grp_fu_904_p2;

assign sext_ln813_17_fu_637_p1 = shl_ln838_s_fu_630_p3;

assign sext_ln813_18_fu_769_p1 = lhs_fu_761_p3;

assign sext_ln813_19_fu_777_p0 = conv1d_0_biases_V_q0;

assign sext_ln813_19_fu_777_p1 = sext_ln813_19_fu_777_p0;

assign sext_ln813_fu_498_p1 = shl_ln_fu_490_p3;

assign shl_ln838_s_fu_630_p3 = {{select_ln346_39_reg_1025}, {18'd0}};

assign shl_ln_fu_490_p3 = {{select_ln346_37_fu_482_p3}, {18'd0}};

assign tmp_11_1_fu_580_p4 = {{add_ln1347_18_fu_505_p2[40:18]}};

assign tmp_11_2_fu_719_p4 = {{add_ln1347_19_fu_644_p2[40:18]}};

assign tmp_4_fu_441_p4 = {{grp_fu_893_p2[40:18]}};

assign tmp_70_fu_397_p3 = grp_fu_893_p2[32'd41];

assign tmp_71_fu_404_p3 = grp_fu_893_p2[32'd41];

assign tmp_72_fu_516_p3 = add_ln1347_fu_510_p2[32'd42];

assign tmp_73_fu_534_p3 = add_ln1347_18_fu_505_p2[32'd41];

assign tmp_74_fu_542_p3 = add_ln1347_fu_510_p2[32'd42];

assign tmp_75_fu_655_p3 = add_ln1347_17_fu_649_p2[32'd42];

assign tmp_76_fu_673_p3 = add_ln1347_19_fu_644_p2[32'd41];

assign tmp_77_fu_681_p3 = add_ln1347_17_fu_649_p2[32'd42];

assign tmp_fu_381_p3 = grp_fu_893_p2[32'd41];

assign tmp_s_fu_270_p3 = {{select_ln25_1_fu_262_p3}, {4'd0}};

assign trunc_ln17_fu_871_p1 = x_V_fu_863_p3[22:0];

assign trunc_ln818_15_fu_663_p4 = {{add_ln1347_19_fu_644_p2[41:18]}};

assign trunc_ln818_s_fu_524_p4 = {{add_ln1347_18_fu_505_p2[41:18]}};

assign trunc_ln900_fu_827_p1 = p_Val2_17_fu_795_p2[22:0];

assign trunc_ln_fu_388_p4 = {{grp_fu_893_p2[41:18]}};

assign underflow_fu_843_p2 = (p_Result_s_fu_787_p3 & or_ln898_20_fu_837_p2);

assign x_V_fu_863_p3 = ((or_ln346_20_fu_857_p2[0:0] == 1'b1) ? select_ln346_42_fu_849_p3 : p_Val2_17_fu_795_p2);

assign xor_ln895_17_fu_417_p2 = (tmp_fu_381_p3 ^ 1'd1);

assign xor_ln895_18_fu_556_p2 = (tmp_72_fu_516_p3 ^ 1'd1);

assign xor_ln895_19_fu_695_p2 = (tmp_75_fu_655_p3 ^ 1'd1);

assign xor_ln895_fu_809_p2 = (p_Result_s_fu_787_p3 ^ 1'd1);

assign xor_ln896_18_fu_435_p2 = (1'd1 ^ and_ln896_fu_429_p2);

assign xor_ln896_19_fu_574_p2 = (1'd1 ^ and_ln896_16_fu_568_p2);

assign xor_ln896_20_fu_713_p2 = (1'd1 ^ and_ln896_17_fu_707_p2);

assign xor_ln896_fu_821_p2 = (p_Result_39_fu_801_p3 ^ 1'd1);

assign zext_ln25_1_fu_297_p1 = select_ln25_2_fu_289_p3;

assign zext_ln25_2_fu_362_p1 = select_ln25_3_reg_955;

assign zext_ln25_fu_278_p1 = select_ln25_1_fu_262_p3;

assign zext_ln37_1_fu_889_p1 = add_ln37_reg_965_pp0_iter2_reg;

assign zext_ln37_fu_323_p1 = select_ln25_fu_248_p3;

always @ (posedge ap_clk) begin
    j_cast_reg_960[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_cast_reg_960_pp0_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //gesture_model_conv1d_0
