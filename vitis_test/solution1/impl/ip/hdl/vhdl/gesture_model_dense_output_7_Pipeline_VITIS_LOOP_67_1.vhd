-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gesture_model_dense_output_7_Pipeline_VITIS_LOOP_67_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln818 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln1347_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of gesture_model_dense_output_7_Pipeline_VITIS_LOOP_67_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv7_3C : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv8_8C : STD_LOGIC_VECTOR (7 downto 0) := "10001100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv8_B4 : STD_LOGIC_VECTOR (7 downto 0) := "10110100";
    constant ap_const_lv7_48 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_const_lv7_5C : STD_LOGIC_VECTOR (6 downto 0) := "1011100";
    constant ap_const_lv9_F0 : STD_LOGIC_VECTOR (8 downto 0) := "011110000";
    constant ap_const_lv9_104 : STD_LOGIC_VECTOR (8 downto 0) := "100000100";
    constant ap_const_lv9_118 : STD_LOGIC_VECTOR (8 downto 0) := "100011000";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln67_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal dense_weights_7_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce0 : STD_LOGIC;
    signal dense_weights_7_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce1 : STD_LOGIC;
    signal dense_weights_7_V_q1 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_address2 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce2 : STD_LOGIC;
    signal dense_weights_7_V_q2 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_address3 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce3 : STD_LOGIC;
    signal dense_weights_7_V_q3 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_address4 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce4 : STD_LOGIC;
    signal dense_weights_7_V_q4 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_address5 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce5 : STD_LOGIC;
    signal dense_weights_7_V_q5 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_address6 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce6 : STD_LOGIC;
    signal dense_weights_7_V_q6 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_address7 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce7 : STD_LOGIC;
    signal dense_weights_7_V_q7 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_address8 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce8 : STD_LOGIC;
    signal dense_weights_7_V_q8 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_address9 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce9 : STD_LOGIC;
    signal dense_weights_7_V_q9 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_address10 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce10 : STD_LOGIC;
    signal dense_weights_7_V_q10 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_address11 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce11 : STD_LOGIC;
    signal dense_weights_7_V_q11 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_address12 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce12 : STD_LOGIC;
    signal dense_weights_7_V_q12 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_address13 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce13 : STD_LOGIC;
    signal dense_weights_7_V_q13 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_address14 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce14 : STD_LOGIC;
    signal dense_weights_7_V_q14 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_address15 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_weights_7_V_ce15 : STD_LOGIC;
    signal dense_weights_7_V_q15 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_biases_7_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_biases_7_V_ce0 : STD_LOGIC;
    signal dense_biases_7_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1347_14_cast_fu_447_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_14_cast_reg_1197 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln1347_13_cast_fu_451_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_13_cast_reg_1202 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_12_cast_fu_455_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_12_cast_reg_1207 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_11_cast_fu_459_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_11_cast_reg_1212 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_10_cast_fu_463_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_10_cast_reg_1217 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_9_cast_fu_467_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_9_cast_reg_1222 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_8_cast_fu_471_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_8_cast_reg_1227 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_7_cast_fu_475_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_7_cast_reg_1232 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_6_cast_fu_479_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_6_cast_reg_1237 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_5_cast_fu_483_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_5_cast_reg_1242 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_4_cast_fu_487_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_4_cast_reg_1247 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_3_cast_fu_491_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_3_cast_reg_1252 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_2_cast_fu_495_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_2_cast_reg_1257 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_1_cast_fu_499_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_1_cast_reg_1262 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_cast_fu_503_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1347_cast_reg_1267 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln818_cast_fu_507_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln818_cast_reg_1272 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_4_reg_1277 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_1277_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_1277_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_1277_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_1277_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_1277_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_1277_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_1277_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_1277_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_1277_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_1277_pp0_iter10_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_1277_pp0_iter11_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast14_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast14_reg_1290_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast20_fu_541_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast20_reg_1301 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast20_reg_1301_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast20_reg_1301_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast20_reg_1301_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast27_fu_573_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast27_reg_1327 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast27_reg_1327_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast27_reg_1327_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast27_reg_1327_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast27_reg_1327_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast27_reg_1327_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast27_reg_1327_pp0_iter9_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast27_reg_1327_pp0_iter10_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_cast12_fu_657_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast12_reg_1374 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast12_reg_1374_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast12_reg_1374_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast13_fu_857_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_cast13_reg_1470 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_cast13_reg_1470_pp0_iter13_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal i_cast13_reg_1470_pp0_iter14_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_exp_17_9_s_fu_435_ap_start : STD_LOGIC;
    signal grp_exp_17_9_s_fu_435_ap_done : STD_LOGIC;
    signal grp_exp_17_9_s_fu_435_ap_idle : STD_LOGIC;
    signal grp_exp_17_9_s_fu_435_ap_ready : STD_LOGIC;
    signal grp_exp_17_9_s_fu_435_x : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_exp_17_9_s_fu_435_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_exp_17_9_s_fu_435_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1271_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_2_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_3_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_4_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_5_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_6_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_7_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_8_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_9_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_10_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_11_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_12_fu_887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_13_fu_918_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_14_fu_949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_15_fu_980_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_116 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln67_fu_525_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_4 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln70_fu_548_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln70_1_fu_563_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln70_2_fu_580_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1064_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_fu_591_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln70_3_fu_612_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_622_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1070_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_622_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln70_4_fu_643_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1271_fu_648_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_660_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1078_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_660_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln70_5_fu_681_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_692_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1086_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_fu_692_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln70_6_fu_713_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_723_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1094_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_15_fu_723_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1271_8_cast_fu_744_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_756_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1102_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_16_fu_756_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln70_7_fu_777_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_787_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1110_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_fu_787_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln70_8_fu_808_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1271_1_fu_813_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_822_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1118_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_fu_822_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln70_9_fu_843_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1271_2_fu_848_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_860_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1126_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_19_fu_860_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln70_10_fu_881_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_fu_892_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1134_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_20_fu_892_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln70_11_fu_913_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_fu_923_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1142_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_21_fu_923_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln70_12_fu_944_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_fu_954_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1150_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_22_fu_954_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln70_13_fu_975_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_fu_985_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1158_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_23_fu_985_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_1006_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1166_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_24_fu_1006_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_1023_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1174_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_25_fu_1023_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_fu_1040_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1182_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal lhs_fu_1040_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln813_fu_1049_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln813_1_fu_1053_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1064_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1070_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1070_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1078_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1078_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1086_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1086_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1094_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1094_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1102_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1102_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1110_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1110_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1118_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1118_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1126_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1126_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1134_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1134_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1142_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1142_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1150_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1150_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1158_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1158_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1166_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1166_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1174_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1174_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1182_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1182_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component gesture_model_exp_17_9_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (16 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component gesture_model_mul_mul_16s_9s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component gesture_model_mac_muladd_16s_9s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component gesture_model_dense_output_7_Pipeline_VITIS_LOOP_67_1_dense_weights_7_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address3 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address4 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address5 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address6 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address7 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address8 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address9 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address10 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address11 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address12 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address13 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address14 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address15 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce15 : IN STD_LOGIC;
        q15 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component gesture_model_dense_output_7_Pipeline_VITIS_LOOP_67_1_dense_biases_7_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gesture_model_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    dense_weights_7_V_U : component gesture_model_dense_output_7_Pipeline_VITIS_LOOP_67_1_dense_weights_7_V_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 320,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_weights_7_V_address0,
        ce0 => dense_weights_7_V_ce0,
        q0 => dense_weights_7_V_q0,
        address1 => dense_weights_7_V_address1,
        ce1 => dense_weights_7_V_ce1,
        q1 => dense_weights_7_V_q1,
        address2 => dense_weights_7_V_address2,
        ce2 => dense_weights_7_V_ce2,
        q2 => dense_weights_7_V_q2,
        address3 => dense_weights_7_V_address3,
        ce3 => dense_weights_7_V_ce3,
        q3 => dense_weights_7_V_q3,
        address4 => dense_weights_7_V_address4,
        ce4 => dense_weights_7_V_ce4,
        q4 => dense_weights_7_V_q4,
        address5 => dense_weights_7_V_address5,
        ce5 => dense_weights_7_V_ce5,
        q5 => dense_weights_7_V_q5,
        address6 => dense_weights_7_V_address6,
        ce6 => dense_weights_7_V_ce6,
        q6 => dense_weights_7_V_q6,
        address7 => dense_weights_7_V_address7,
        ce7 => dense_weights_7_V_ce7,
        q7 => dense_weights_7_V_q7,
        address8 => dense_weights_7_V_address8,
        ce8 => dense_weights_7_V_ce8,
        q8 => dense_weights_7_V_q8,
        address9 => dense_weights_7_V_address9,
        ce9 => dense_weights_7_V_ce9,
        q9 => dense_weights_7_V_q9,
        address10 => dense_weights_7_V_address10,
        ce10 => dense_weights_7_V_ce10,
        q10 => dense_weights_7_V_q10,
        address11 => dense_weights_7_V_address11,
        ce11 => dense_weights_7_V_ce11,
        q11 => dense_weights_7_V_q11,
        address12 => dense_weights_7_V_address12,
        ce12 => dense_weights_7_V_ce12,
        q12 => dense_weights_7_V_q12,
        address13 => dense_weights_7_V_address13,
        ce13 => dense_weights_7_V_ce13,
        q13 => dense_weights_7_V_q13,
        address14 => dense_weights_7_V_address14,
        ce14 => dense_weights_7_V_ce14,
        q14 => dense_weights_7_V_q14,
        address15 => dense_weights_7_V_address15,
        ce15 => dense_weights_7_V_ce15,
        q15 => dense_weights_7_V_q15);

    dense_biases_7_V_U : component gesture_model_dense_output_7_Pipeline_VITIS_LOOP_67_1_dense_biases_7_V_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_biases_7_V_address0,
        ce0 => dense_biases_7_V_ce0,
        q0 => dense_biases_7_V_q0);

    grp_exp_17_9_s_fu_435 : component gesture_model_exp_17_9_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_exp_17_9_s_fu_435_ap_start,
        ap_done => grp_exp_17_9_s_fu_435_ap_done,
        ap_idle => grp_exp_17_9_s_fu_435_ap_idle,
        ap_ready => grp_exp_17_9_s_fu_435_ap_ready,
        x => grp_exp_17_9_s_fu_435_x,
        ap_return => grp_exp_17_9_s_fu_435_ap_return);

    mul_mul_16s_9s_24_4_1_U56 : component gesture_model_mul_mul_16s_9s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1064_p0,
        din1 => dense_weights_7_V_q15,
        ce => ap_const_logic_1,
        dout => grp_fu_1064_p2);

    mac_muladd_16s_9s_24ns_24_4_1_U57 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1070_p0,
        din1 => dense_weights_7_V_q14,
        din2 => grp_fu_1070_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1070_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U58 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1078_p0,
        din1 => dense_weights_7_V_q13,
        din2 => grp_fu_1078_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1078_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U59 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1086_p0,
        din1 => dense_weights_7_V_q12,
        din2 => grp_fu_1086_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1086_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U60 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1094_p0,
        din1 => dense_weights_7_V_q11,
        din2 => grp_fu_1094_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1094_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U61 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1102_p0,
        din1 => dense_weights_7_V_q10,
        din2 => grp_fu_1102_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1102_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U62 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1110_p0,
        din1 => dense_weights_7_V_q9,
        din2 => grp_fu_1110_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1110_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U63 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1118_p0,
        din1 => dense_weights_7_V_q8,
        din2 => grp_fu_1118_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1118_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U64 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1126_p0,
        din1 => dense_weights_7_V_q7,
        din2 => grp_fu_1126_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1126_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U65 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1134_p0,
        din1 => dense_weights_7_V_q6,
        din2 => grp_fu_1134_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1134_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U66 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1142_p0,
        din1 => dense_weights_7_V_q5,
        din2 => grp_fu_1142_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1142_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U67 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1150_p0,
        din1 => dense_weights_7_V_q4,
        din2 => grp_fu_1150_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1150_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U68 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1158_p0,
        din1 => dense_weights_7_V_q3,
        din2 => grp_fu_1158_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1158_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U69 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1166_p0,
        din1 => dense_weights_7_V_q2,
        din2 => grp_fu_1166_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1166_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U70 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1174_p0,
        din1 => dense_weights_7_V_q1,
        din2 => grp_fu_1174_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1174_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U71 : component gesture_model_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1182_p0,
        din1 => dense_weights_7_V_q0,
        din2 => grp_fu_1182_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1182_p3);

    flow_control_loop_pipe_sequential_init_U : component gesture_model_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter23_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_17_9_s_fu_435_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_exp_17_9_s_fu_435_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_exp_17_9_s_fu_435_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_17_9_s_fu_435_ap_ready = ap_const_logic_1)) then 
                    grp_exp_17_9_s_fu_435_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln67_fu_519_p2 = ap_const_lv1_0))) then 
                    i_fu_116 <= add_ln67_fu_525_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_116 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                i_4_reg_1277_pp0_iter10_reg <= i_4_reg_1277_pp0_iter9_reg;
                i_4_reg_1277_pp0_iter11_reg <= i_4_reg_1277_pp0_iter10_reg;
                i_4_reg_1277_pp0_iter2_reg <= i_4_reg_1277_pp0_iter1_reg;
                i_4_reg_1277_pp0_iter3_reg <= i_4_reg_1277_pp0_iter2_reg;
                i_4_reg_1277_pp0_iter4_reg <= i_4_reg_1277_pp0_iter3_reg;
                i_4_reg_1277_pp0_iter5_reg <= i_4_reg_1277_pp0_iter4_reg;
                i_4_reg_1277_pp0_iter6_reg <= i_4_reg_1277_pp0_iter5_reg;
                i_4_reg_1277_pp0_iter7_reg <= i_4_reg_1277_pp0_iter6_reg;
                i_4_reg_1277_pp0_iter8_reg <= i_4_reg_1277_pp0_iter7_reg;
                i_4_reg_1277_pp0_iter9_reg <= i_4_reg_1277_pp0_iter8_reg;
                    i_cast12_reg_1374(4 downto 0) <= i_cast12_fu_657_p1(4 downto 0);
                    i_cast12_reg_1374_pp0_iter7_reg(4 downto 0) <= i_cast12_reg_1374(4 downto 0);
                    i_cast12_reg_1374_pp0_iter8_reg(4 downto 0) <= i_cast12_reg_1374_pp0_iter7_reg(4 downto 0);
                    i_cast13_reg_1470(4 downto 0) <= i_cast13_fu_857_p1(4 downto 0);
                    i_cast13_reg_1470_pp0_iter13_reg(4 downto 0) <= i_cast13_reg_1470(4 downto 0);
                    i_cast13_reg_1470_pp0_iter14_reg(4 downto 0) <= i_cast13_reg_1470_pp0_iter13_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter10_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter9_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter11_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter10_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter12_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter11_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter13_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter12_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter14_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter13_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter15_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter14_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter16_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter15_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter17_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter16_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter18_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter17_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter19_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter18_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter20_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter19_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter21_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter20_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter22_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter21_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter23_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter22_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter2_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter1_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter3_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter2_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter4_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter3_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter5_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter4_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter6_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter5_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter7_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter6_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter8_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter7_reg(4 downto 0);
                    i_cast14_reg_1290_pp0_iter9_reg(4 downto 0) <= i_cast14_reg_1290_pp0_iter8_reg(4 downto 0);
                    i_cast20_reg_1301_pp0_iter2_reg(4 downto 0) <= i_cast20_reg_1301(4 downto 0);
                    i_cast20_reg_1301_pp0_iter3_reg(4 downto 0) <= i_cast20_reg_1301_pp0_iter2_reg(4 downto 0);
                    i_cast20_reg_1301_pp0_iter4_reg(4 downto 0) <= i_cast20_reg_1301_pp0_iter3_reg(4 downto 0);
                    i_cast27_reg_1327(4 downto 0) <= i_cast27_fu_573_p1(4 downto 0);
                    i_cast27_reg_1327_pp0_iter10_reg(4 downto 0) <= i_cast27_reg_1327_pp0_iter9_reg(4 downto 0);
                    i_cast27_reg_1327_pp0_iter4_reg(4 downto 0) <= i_cast27_reg_1327(4 downto 0);
                    i_cast27_reg_1327_pp0_iter5_reg(4 downto 0) <= i_cast27_reg_1327_pp0_iter4_reg(4 downto 0);
                    i_cast27_reg_1327_pp0_iter6_reg(4 downto 0) <= i_cast27_reg_1327_pp0_iter5_reg(4 downto 0);
                    i_cast27_reg_1327_pp0_iter7_reg(4 downto 0) <= i_cast27_reg_1327_pp0_iter6_reg(4 downto 0);
                    i_cast27_reg_1327_pp0_iter8_reg(4 downto 0) <= i_cast27_reg_1327_pp0_iter7_reg(4 downto 0);
                    i_cast27_reg_1327_pp0_iter9_reg(4 downto 0) <= i_cast27_reg_1327_pp0_iter8_reg(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_4_reg_1277 <= ap_sig_allocacmp_i_4;
                i_4_reg_1277_pp0_iter1_reg <= i_4_reg_1277;
                    i_cast14_reg_1290_pp0_iter1_reg(4 downto 0) <= i_cast14_reg_1290(4 downto 0);
                    i_cast20_reg_1301(4 downto 0) <= i_cast20_fu_541_p1(4 downto 0);
                sext_ln1347_10_cast_reg_1217 <= sext_ln1347_10_cast_fu_463_p1;
                sext_ln1347_11_cast_reg_1212 <= sext_ln1347_11_cast_fu_459_p1;
                sext_ln1347_12_cast_reg_1207 <= sext_ln1347_12_cast_fu_455_p1;
                sext_ln1347_13_cast_reg_1202 <= sext_ln1347_13_cast_fu_451_p1;
                sext_ln1347_14_cast_reg_1197 <= sext_ln1347_14_cast_fu_447_p1;
                sext_ln1347_1_cast_reg_1262 <= sext_ln1347_1_cast_fu_499_p1;
                sext_ln1347_2_cast_reg_1257 <= sext_ln1347_2_cast_fu_495_p1;
                sext_ln1347_3_cast_reg_1252 <= sext_ln1347_3_cast_fu_491_p1;
                sext_ln1347_4_cast_reg_1247 <= sext_ln1347_4_cast_fu_487_p1;
                sext_ln1347_5_cast_reg_1242 <= sext_ln1347_5_cast_fu_483_p1;
                sext_ln1347_6_cast_reg_1237 <= sext_ln1347_6_cast_fu_479_p1;
                sext_ln1347_7_cast_reg_1232 <= sext_ln1347_7_cast_fu_475_p1;
                sext_ln1347_8_cast_reg_1227 <= sext_ln1347_8_cast_fu_471_p1;
                sext_ln1347_9_cast_reg_1222 <= sext_ln1347_9_cast_fu_467_p1;
                sext_ln1347_cast_reg_1267 <= sext_ln1347_cast_fu_503_p1;
                sext_ln818_cast_reg_1272 <= sext_ln818_cast_fu_507_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_fu_519_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    i_cast14_reg_1290(4 downto 0) <= i_cast14_fu_531_p1(4 downto 0);
            end if;
        end if;
    end process;
    i_cast14_reg_1290(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter2_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter3_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter4_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter5_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter6_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter7_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter8_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter9_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter10_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter11_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter12_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter13_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter14_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter15_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter16_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter17_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter18_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter19_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter20_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter21_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter22_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast14_reg_1290_pp0_iter23_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    i_cast20_reg_1301(5) <= '0';
    i_cast20_reg_1301_pp0_iter2_reg(5) <= '0';
    i_cast20_reg_1301_pp0_iter3_reg(5) <= '0';
    i_cast20_reg_1301_pp0_iter4_reg(5) <= '0';
    i_cast27_reg_1327(6 downto 5) <= "00";
    i_cast27_reg_1327_pp0_iter4_reg(6 downto 5) <= "00";
    i_cast27_reg_1327_pp0_iter5_reg(6 downto 5) <= "00";
    i_cast27_reg_1327_pp0_iter6_reg(6 downto 5) <= "00";
    i_cast27_reg_1327_pp0_iter7_reg(6 downto 5) <= "00";
    i_cast27_reg_1327_pp0_iter8_reg(6 downto 5) <= "00";
    i_cast27_reg_1327_pp0_iter9_reg(6 downto 5) <= "00";
    i_cast27_reg_1327_pp0_iter10_reg(6 downto 5) <= "00";
    i_cast12_reg_1374(7 downto 5) <= "000";
    i_cast12_reg_1374_pp0_iter7_reg(7 downto 5) <= "000";
    i_cast12_reg_1374_pp0_iter8_reg(7 downto 5) <= "000";
    i_cast13_reg_1470(8 downto 5) <= "0000";
    i_cast13_reg_1470_pp0_iter13_reg(8 downto 5) <= "0000";
    i_cast13_reg_1470_pp0_iter14_reg(8 downto 5) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln67_fu_525_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_4) + unsigned(ap_const_lv5_1));
    add_ln70_10_fu_881_p2 <= std_logic_vector(unsigned(i_cast13_fu_857_p1) + unsigned(ap_const_lv9_F0));
    add_ln70_11_fu_913_p2 <= std_logic_vector(unsigned(i_cast13_reg_1470) + unsigned(ap_const_lv9_104));
    add_ln70_12_fu_944_p2 <= std_logic_vector(unsigned(i_cast13_reg_1470_pp0_iter13_reg) + unsigned(ap_const_lv9_118));
    add_ln70_13_fu_975_p2 <= std_logic_vector(unsigned(i_cast13_reg_1470_pp0_iter14_reg) + unsigned(ap_const_lv9_12C));
    add_ln70_1_fu_563_p2 <= std_logic_vector(unsigned(i_cast20_reg_1301) + unsigned(ap_const_lv6_28));
    add_ln70_2_fu_580_p2 <= std_logic_vector(unsigned(i_cast27_fu_573_p1) + unsigned(ap_const_lv7_3C));
    add_ln70_3_fu_612_p2 <= std_logic_vector(unsigned(i_cast27_reg_1327) + unsigned(ap_const_lv7_50));
    add_ln70_4_fu_643_p2 <= std_logic_vector(unsigned(i_cast20_reg_1301_pp0_iter4_reg) + unsigned(ap_const_lv6_24));
    add_ln70_5_fu_681_p2 <= std_logic_vector(unsigned(i_cast12_fu_657_p1) + unsigned(ap_const_lv8_78));
    add_ln70_6_fu_713_p2 <= std_logic_vector(unsigned(i_cast12_reg_1374) + unsigned(ap_const_lv8_8C));
    add_ln70_7_fu_777_p2 <= std_logic_vector(unsigned(i_cast12_reg_1374_pp0_iter8_reg) + unsigned(ap_const_lv8_B4));
    add_ln70_8_fu_808_p2 <= std_logic_vector(unsigned(i_cast27_reg_1327_pp0_iter9_reg) + unsigned(ap_const_lv7_48));
    add_ln70_9_fu_843_p2 <= std_logic_vector(unsigned(i_cast27_reg_1327_pp0_iter10_reg) + unsigned(ap_const_lv7_5C));
    add_ln70_fu_548_p2 <= std_logic_vector(unsigned(i_cast20_fu_541_p1) + unsigned(ap_const_lv6_14));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln67_fu_519_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln67_fu_519_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter23_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter23_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_116, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_4 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_4 <= i_fu_116;
        end if; 
    end process;

    dense_biases_7_V_address0 <= i_cast14_reg_1290_pp0_iter17_reg(5 - 1 downto 0);

    dense_biases_7_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_biases_7_V_ce0 <= ap_const_logic_1;
        else 
            dense_biases_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_weights_7_V_address0 <= zext_ln1271_15_fu_980_p1(9 - 1 downto 0);
    dense_weights_7_V_address1 <= zext_ln1271_14_fu_949_p1(9 - 1 downto 0);
    dense_weights_7_V_address10 <= zext_ln1271_5_fu_652_p1(9 - 1 downto 0);
    dense_weights_7_V_address11 <= zext_ln1271_4_fu_617_p1(9 - 1 downto 0);
    dense_weights_7_V_address12 <= zext_ln1271_3_fu_586_p1(9 - 1 downto 0);
    dense_weights_7_V_address13 <= zext_ln1271_2_fu_568_p1(9 - 1 downto 0);
    dense_weights_7_V_address14 <= zext_ln1271_fu_554_p1(9 - 1 downto 0);
    dense_weights_7_V_address15 <= i_cast14_fu_531_p1(9 - 1 downto 0);
    dense_weights_7_V_address2 <= zext_ln1271_13_fu_918_p1(9 - 1 downto 0);
    dense_weights_7_V_address3 <= zext_ln1271_12_fu_887_p1(9 - 1 downto 0);
    dense_weights_7_V_address4 <= zext_ln1271_11_fu_852_p1(9 - 1 downto 0);
    dense_weights_7_V_address5 <= zext_ln1271_10_fu_817_p1(9 - 1 downto 0);
    dense_weights_7_V_address6 <= zext_ln1271_9_fu_782_p1(9 - 1 downto 0);
    dense_weights_7_V_address7 <= zext_ln1271_8_fu_751_p1(9 - 1 downto 0);
    dense_weights_7_V_address8 <= zext_ln1271_7_fu_718_p1(9 - 1 downto 0);
    dense_weights_7_V_address9 <= zext_ln1271_6_fu_687_p1(9 - 1 downto 0);

    dense_weights_7_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce0 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_weights_7_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce1 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_weights_7_V_ce10_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce10 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    dense_weights_7_V_ce11_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce11 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    dense_weights_7_V_ce12_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce12 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce12 <= ap_const_logic_0;
        end if; 
    end process;


    dense_weights_7_V_ce13_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce13 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce13 <= ap_const_logic_0;
        end if; 
    end process;


    dense_weights_7_V_ce14_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce14 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce14 <= ap_const_logic_0;
        end if; 
    end process;


    dense_weights_7_V_ce15_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce15 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce15 <= ap_const_logic_0;
        end if; 
    end process;


    dense_weights_7_V_ce2_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce2 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    dense_weights_7_V_ce3_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce3 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    dense_weights_7_V_ce4_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce4 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    dense_weights_7_V_ce5_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce5 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    dense_weights_7_V_ce6_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce6 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    dense_weights_7_V_ce7_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce7 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    dense_weights_7_V_ce8_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce8 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    dense_weights_7_V_ce9_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            dense_weights_7_V_ce9 <= ap_const_logic_1;
        else 
            dense_weights_7_V_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    grp_exp_17_9_s_fu_435_ap_start <= grp_exp_17_9_s_fu_435_ap_start_reg;
    grp_exp_17_9_s_fu_435_x <= std_logic_vector(signed(sext_ln813_fu_1049_p1) + signed(sext_ln813_1_fu_1053_p1));
    grp_fu_1064_p0 <= sext_ln818_cast_reg_1272(16 - 1 downto 0);
    grp_fu_1070_p0 <= sext_ln1347_cast_reg_1267(16 - 1 downto 0);
    grp_fu_1070_p2 <= (tmp_fu_591_p4 & ap_const_lv8_0);
    grp_fu_1078_p0 <= sext_ln1347_1_cast_reg_1262(16 - 1 downto 0);
    grp_fu_1078_p2 <= (tmp_s_fu_622_p4 & ap_const_lv8_0);
    grp_fu_1086_p0 <= sext_ln1347_2_cast_reg_1257(16 - 1 downto 0);
    grp_fu_1086_p2 <= (tmp_13_fu_660_p4 & ap_const_lv8_0);
    grp_fu_1094_p0 <= sext_ln1347_3_cast_reg_1252(16 - 1 downto 0);
    grp_fu_1094_p2 <= (tmp_14_fu_692_p4 & ap_const_lv8_0);
    grp_fu_1102_p0 <= sext_ln1347_4_cast_reg_1247(16 - 1 downto 0);
    grp_fu_1102_p2 <= (tmp_15_fu_723_p4 & ap_const_lv8_0);
    grp_fu_1110_p0 <= sext_ln1347_5_cast_reg_1242(16 - 1 downto 0);
    grp_fu_1110_p2 <= (tmp_16_fu_756_p4 & ap_const_lv8_0);
    grp_fu_1118_p0 <= sext_ln1347_6_cast_reg_1237(16 - 1 downto 0);
    grp_fu_1118_p2 <= (tmp_17_fu_787_p4 & ap_const_lv8_0);
    grp_fu_1126_p0 <= sext_ln1347_7_cast_reg_1232(16 - 1 downto 0);
    grp_fu_1126_p2 <= (tmp_18_fu_822_p4 & ap_const_lv8_0);
    grp_fu_1134_p0 <= sext_ln1347_8_cast_reg_1227(16 - 1 downto 0);
    grp_fu_1134_p2 <= (tmp_19_fu_860_p4 & ap_const_lv8_0);
    grp_fu_1142_p0 <= sext_ln1347_9_cast_reg_1222(16 - 1 downto 0);
    grp_fu_1142_p2 <= (tmp_20_fu_892_p4 & ap_const_lv8_0);
    grp_fu_1150_p0 <= sext_ln1347_10_cast_reg_1217(16 - 1 downto 0);
    grp_fu_1150_p2 <= (tmp_21_fu_923_p4 & ap_const_lv8_0);
    grp_fu_1158_p0 <= sext_ln1347_11_cast_reg_1212(16 - 1 downto 0);
    grp_fu_1158_p2 <= (tmp_22_fu_954_p4 & ap_const_lv8_0);
    grp_fu_1166_p0 <= sext_ln1347_12_cast_reg_1207(16 - 1 downto 0);
    grp_fu_1166_p2 <= (tmp_23_fu_985_p4 & ap_const_lv8_0);
    grp_fu_1174_p0 <= sext_ln1347_13_cast_reg_1202(16 - 1 downto 0);
    grp_fu_1174_p2 <= (tmp_24_fu_1006_p4 & ap_const_lv8_0);
    grp_fu_1182_p0 <= sext_ln1347_14_cast_reg_1197(16 - 1 downto 0);
    grp_fu_1182_p2 <= (tmp_25_fu_1023_p4 & ap_const_lv8_0);
    i_cast12_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_1277_pp0_iter5_reg),8));
    i_cast13_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_1277_pp0_iter11_reg),9));
    i_cast14_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_4),64));
    i_cast20_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_1277),6));
    i_cast27_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_1277_pp0_iter2_reg),7));
    icmp_ln67_fu_519_p2 <= "1" when (ap_sig_allocacmp_i_4 = ap_const_lv5_14) else "0";
    lhs_fu_1040_p1 <= grp_fu_1182_p3;
    lhs_fu_1040_p4 <= lhs_fu_1040_p1(23 downto 8);
    output_r_address0 <= i_cast14_reg_1290_pp0_iter23_reg(5 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= grp_exp_17_9_s_fu_435_ap_return;

    output_r_we0_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1271_1_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln70_8_fu_808_p2),8));

        sext_ln1271_2_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln70_9_fu_843_p2),8));

        sext_ln1271_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln70_4_fu_643_p2),7));

        sext_ln1347_10_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_10),24));

        sext_ln1347_11_cast_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_11),24));

        sext_ln1347_12_cast_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_12),24));

        sext_ln1347_13_cast_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_13),24));

        sext_ln1347_14_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_14),24));

        sext_ln1347_1_cast_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_1),24));

        sext_ln1347_2_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_2),24));

        sext_ln1347_3_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_3),24));

        sext_ln1347_4_cast_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_4),24));

        sext_ln1347_5_cast_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_5),24));

        sext_ln1347_6_cast_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_6),24));

        sext_ln1347_7_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_7),24));

        sext_ln1347_8_cast_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_8),24));

        sext_ln1347_9_cast_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347_9),24));

        sext_ln1347_cast_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1347),24));

        sext_ln813_1_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dense_biases_7_V_q0),17));

        sext_ln813_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_fu_1040_p4),17));

        sext_ln818_cast_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln818),24));

    tmp_13_fu_660_p1 <= grp_fu_1078_p3;
    tmp_13_fu_660_p4 <= tmp_13_fu_660_p1(23 downto 8);
    tmp_14_fu_692_p1 <= grp_fu_1086_p3;
    tmp_14_fu_692_p4 <= tmp_14_fu_692_p1(23 downto 8);
    tmp_15_fu_723_p1 <= grp_fu_1094_p3;
    tmp_15_fu_723_p4 <= tmp_15_fu_723_p1(23 downto 8);
    tmp_16_fu_756_p1 <= grp_fu_1102_p3;
    tmp_16_fu_756_p4 <= tmp_16_fu_756_p1(23 downto 8);
    tmp_17_fu_787_p1 <= grp_fu_1110_p3;
    tmp_17_fu_787_p4 <= tmp_17_fu_787_p1(23 downto 8);
    tmp_18_fu_822_p1 <= grp_fu_1118_p3;
    tmp_18_fu_822_p4 <= tmp_18_fu_822_p1(23 downto 8);
    tmp_19_fu_860_p1 <= grp_fu_1126_p3;
    tmp_19_fu_860_p4 <= tmp_19_fu_860_p1(23 downto 8);
    tmp_20_fu_892_p1 <= grp_fu_1134_p3;
    tmp_20_fu_892_p4 <= tmp_20_fu_892_p1(23 downto 8);
    tmp_21_fu_923_p1 <= grp_fu_1142_p3;
    tmp_21_fu_923_p4 <= tmp_21_fu_923_p1(23 downto 8);
    tmp_22_fu_954_p1 <= grp_fu_1150_p3;
    tmp_22_fu_954_p4 <= tmp_22_fu_954_p1(23 downto 8);
    tmp_23_fu_985_p1 <= grp_fu_1158_p3;
    tmp_23_fu_985_p4 <= tmp_23_fu_985_p1(23 downto 8);
    tmp_24_fu_1006_p1 <= grp_fu_1166_p3;
    tmp_24_fu_1006_p4 <= tmp_24_fu_1006_p1(23 downto 8);
    tmp_25_fu_1023_p1 <= grp_fu_1174_p3;
    tmp_25_fu_1023_p4 <= tmp_25_fu_1023_p1(23 downto 8);
    tmp_fu_591_p4 <= grp_fu_1064_p2(23 downto 8);
    tmp_s_fu_622_p1 <= grp_fu_1070_p3;
    tmp_s_fu_622_p4 <= tmp_s_fu_622_p1(23 downto 8);
    zext_ln1271_10_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1271_1_fu_813_p1),64));
    zext_ln1271_11_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1271_2_fu_848_p1),64));
    zext_ln1271_12_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_10_fu_881_p2),64));
    zext_ln1271_13_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_11_fu_913_p2),64));
    zext_ln1271_14_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_12_fu_944_p2),64));
    zext_ln1271_15_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_13_fu_975_p2),64));
    zext_ln1271_2_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_1_fu_563_p2),64));
    zext_ln1271_3_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_2_fu_580_p2),64));
    zext_ln1271_4_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_3_fu_612_p2),64));
    zext_ln1271_5_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1271_fu_648_p1),64));
    zext_ln1271_6_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_5_fu_681_p2),64));
    zext_ln1271_7_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_6_fu_713_p2),64));
    zext_ln1271_8_cast_fu_744_p3 <= (ap_const_lv3_5 & i_4_reg_1277_pp0_iter7_reg);
    zext_ln1271_8_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1271_8_cast_fu_744_p3),64));
    zext_ln1271_9_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_7_fu_777_p2),64));
    zext_ln1271_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_fu_548_p2),64));
end behav;
