// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gesture_model_batchnorm_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [6:0] input_r_address0;
output   input_r_ce0;
input  [14:0] input_r_q0;
output  [6:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_idle;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
wire    ap_block_state27_pp0_stage0_iter26;
wire    ap_block_state28_pp0_stage0_iter27;
wire    ap_block_state29_pp0_stage0_iter28;
wire    ap_block_state30_pp0_stage0_iter29;
wire    ap_block_state31_pp0_stage0_iter30;
wire    ap_block_state32_pp0_stage0_iter31;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln27_fu_127_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] bn_moving_mean_1_V_address0;
reg    bn_moving_mean_1_V_ce0;
wire   [3:0] bn_moving_mean_1_V_q0;
wire   [3:0] bn_gamma_1_V_address0;
reg    bn_gamma_1_V_ce0;
wire   [8:0] bn_gamma_1_V_q0;
wire   [3:0] bn_beta_1_V_address0;
reg    bn_beta_1_V_ce0;
wire   [6:0] bn_beta_1_V_q0;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] i_cast_fu_139_p1;
reg   [63:0] i_cast_reg_224;
reg   [63:0] i_cast_reg_224_pp0_iter1_reg;
reg   [63:0] i_cast_reg_224_pp0_iter2_reg;
reg   [63:0] i_cast_reg_224_pp0_iter3_reg;
reg   [63:0] i_cast_reg_224_pp0_iter4_reg;
reg   [63:0] i_cast_reg_224_pp0_iter5_reg;
reg   [63:0] i_cast_reg_224_pp0_iter6_reg;
reg   [63:0] i_cast_reg_224_pp0_iter7_reg;
reg   [63:0] i_cast_reg_224_pp0_iter8_reg;
reg   [63:0] i_cast_reg_224_pp0_iter9_reg;
reg   [63:0] i_cast_reg_224_pp0_iter10_reg;
reg   [63:0] i_cast_reg_224_pp0_iter11_reg;
reg   [63:0] i_cast_reg_224_pp0_iter12_reg;
reg   [63:0] i_cast_reg_224_pp0_iter13_reg;
reg   [63:0] i_cast_reg_224_pp0_iter14_reg;
reg   [63:0] i_cast_reg_224_pp0_iter15_reg;
reg   [63:0] i_cast_reg_224_pp0_iter16_reg;
reg   [63:0] i_cast_reg_224_pp0_iter17_reg;
reg   [63:0] i_cast_reg_224_pp0_iter18_reg;
reg   [63:0] i_cast_reg_224_pp0_iter19_reg;
reg   [63:0] i_cast_reg_224_pp0_iter20_reg;
reg   [63:0] i_cast_reg_224_pp0_iter21_reg;
reg   [63:0] i_cast_reg_224_pp0_iter22_reg;
reg   [63:0] i_cast_reg_224_pp0_iter23_reg;
reg   [63:0] i_cast_reg_224_pp0_iter24_reg;
reg   [63:0] i_cast_reg_224_pp0_iter25_reg;
reg   [63:0] i_cast_reg_224_pp0_iter26_reg;
reg   [63:0] i_cast_reg_224_pp0_iter27_reg;
reg   [63:0] i_cast_reg_224_pp0_iter28_reg;
reg   [63:0] i_cast_reg_224_pp0_iter29_reg;
reg   [63:0] i_cast_reg_224_pp0_iter30_reg;
wire  signed [23:0] grp_fu_172_p2;
wire    ap_block_pp0_stage0;
reg   [6:0] i_fu_50;
wire   [6:0] add_ln27_fu_133_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_7;
wire   [15:0] zext_ln1348_fu_150_p1;
wire   [15:0] zext_ln1348_2_fu_154_p1;
wire   [15:0] ret_V_5_fu_158_p2;
wire   [23:0] grp_fu_172_p0;
wire   [0:0] grp_fu_172_p1;
wire  signed [14:0] rhs_5_fu_182_p3;
wire  signed [23:0] grp_fu_204_p3;
wire   [8:0] grp_fu_204_p1;
reg    grp_fu_172_ce;
reg    grp_fu_204_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg    ap_loop_exit_ready_pp0_iter29_reg;
reg    ap_loop_exit_ready_pp0_iter30_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [23:0] grp_fu_204_p10;
reg    ap_condition_339;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gesture_model_batchnorm_1_bn_moving_mean_1_V_ROM_AUTO_1R #(
    .DataWidth( 4 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
bn_moving_mean_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn_moving_mean_1_V_address0),
    .ce0(bn_moving_mean_1_V_ce0),
    .q0(bn_moving_mean_1_V_q0)
);

gesture_model_batchnorm_1_bn_gamma_1_V_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
bn_gamma_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn_gamma_1_V_address0),
    .ce0(bn_gamma_1_V_ce0),
    .q0(bn_gamma_1_V_q0)
);

gesture_model_batchnorm_1_bn_beta_1_V_ROM_AUTO_1R #(
    .DataWidth( 7 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
bn_beta_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bn_beta_1_V_address0),
    .ce0(bn_beta_1_V_ce0),
    .q0(bn_beta_1_V_q0)
);

gesture_model_sdiv_24ns_1ns_24_28_1 #(
    .ID( 1 ),
    .NUM_STAGE( 28 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 1 ),
    .dout_WIDTH( 24 ))
sdiv_24ns_1ns_24_28_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_172_p0),
    .din1(grp_fu_172_p1),
    .ce(grp_fu_172_ce),
    .dout(grp_fu_172_p2)
);

gesture_model_mac_muladd_24s_9ns_15s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 15 ),
    .dout_WIDTH( 24 ))
mac_muladd_24s_9ns_15s_24_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_172_p2),
    .din1(grp_fu_204_p1),
    .din2(rhs_5_fu_182_p3),
    .ce(grp_fu_204_ce),
    .dout(grp_fu_204_p3)
);

gesture_model_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter30_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_339)) begin
        if ((icmp_ln27_fu_127_p2 == 1'd0)) begin
            i_fu_50 <= add_ln27_fu_133_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
        ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        i_cast_reg_224_pp0_iter10_reg[6 : 0] <= i_cast_reg_224_pp0_iter9_reg[6 : 0];
        i_cast_reg_224_pp0_iter11_reg[6 : 0] <= i_cast_reg_224_pp0_iter10_reg[6 : 0];
        i_cast_reg_224_pp0_iter12_reg[6 : 0] <= i_cast_reg_224_pp0_iter11_reg[6 : 0];
        i_cast_reg_224_pp0_iter13_reg[6 : 0] <= i_cast_reg_224_pp0_iter12_reg[6 : 0];
        i_cast_reg_224_pp0_iter14_reg[6 : 0] <= i_cast_reg_224_pp0_iter13_reg[6 : 0];
        i_cast_reg_224_pp0_iter15_reg[6 : 0] <= i_cast_reg_224_pp0_iter14_reg[6 : 0];
        i_cast_reg_224_pp0_iter16_reg[6 : 0] <= i_cast_reg_224_pp0_iter15_reg[6 : 0];
        i_cast_reg_224_pp0_iter17_reg[6 : 0] <= i_cast_reg_224_pp0_iter16_reg[6 : 0];
        i_cast_reg_224_pp0_iter18_reg[6 : 0] <= i_cast_reg_224_pp0_iter17_reg[6 : 0];
        i_cast_reg_224_pp0_iter19_reg[6 : 0] <= i_cast_reg_224_pp0_iter18_reg[6 : 0];
        i_cast_reg_224_pp0_iter20_reg[6 : 0] <= i_cast_reg_224_pp0_iter19_reg[6 : 0];
        i_cast_reg_224_pp0_iter21_reg[6 : 0] <= i_cast_reg_224_pp0_iter20_reg[6 : 0];
        i_cast_reg_224_pp0_iter22_reg[6 : 0] <= i_cast_reg_224_pp0_iter21_reg[6 : 0];
        i_cast_reg_224_pp0_iter23_reg[6 : 0] <= i_cast_reg_224_pp0_iter22_reg[6 : 0];
        i_cast_reg_224_pp0_iter24_reg[6 : 0] <= i_cast_reg_224_pp0_iter23_reg[6 : 0];
        i_cast_reg_224_pp0_iter25_reg[6 : 0] <= i_cast_reg_224_pp0_iter24_reg[6 : 0];
        i_cast_reg_224_pp0_iter26_reg[6 : 0] <= i_cast_reg_224_pp0_iter25_reg[6 : 0];
        i_cast_reg_224_pp0_iter27_reg[6 : 0] <= i_cast_reg_224_pp0_iter26_reg[6 : 0];
        i_cast_reg_224_pp0_iter28_reg[6 : 0] <= i_cast_reg_224_pp0_iter27_reg[6 : 0];
        i_cast_reg_224_pp0_iter29_reg[6 : 0] <= i_cast_reg_224_pp0_iter28_reg[6 : 0];
        i_cast_reg_224_pp0_iter2_reg[6 : 0] <= i_cast_reg_224_pp0_iter1_reg[6 : 0];
        i_cast_reg_224_pp0_iter30_reg[6 : 0] <= i_cast_reg_224_pp0_iter29_reg[6 : 0];
        i_cast_reg_224_pp0_iter3_reg[6 : 0] <= i_cast_reg_224_pp0_iter2_reg[6 : 0];
        i_cast_reg_224_pp0_iter4_reg[6 : 0] <= i_cast_reg_224_pp0_iter3_reg[6 : 0];
        i_cast_reg_224_pp0_iter5_reg[6 : 0] <= i_cast_reg_224_pp0_iter4_reg[6 : 0];
        i_cast_reg_224_pp0_iter6_reg[6 : 0] <= i_cast_reg_224_pp0_iter5_reg[6 : 0];
        i_cast_reg_224_pp0_iter7_reg[6 : 0] <= i_cast_reg_224_pp0_iter6_reg[6 : 0];
        i_cast_reg_224_pp0_iter8_reg[6 : 0] <= i_cast_reg_224_pp0_iter7_reg[6 : 0];
        i_cast_reg_224_pp0_iter9_reg[6 : 0] <= i_cast_reg_224_pp0_iter8_reg[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_cast_reg_224_pp0_iter1_reg[6 : 0] <= i_cast_reg_224[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln27_fu_127_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_cast_reg_224[6 : 0] <= i_cast_fu_139_p1[6 : 0];
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln27_fu_127_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter30_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_7 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_7 = i_fu_50;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter29 == 1'b1))) begin
        bn_beta_1_V_ce0 = 1'b1;
    end else begin
        bn_beta_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter27 == 1'b1))) begin
        bn_gamma_1_V_ce0 = 1'b1;
    end else begin
        bn_gamma_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bn_moving_mean_1_V_ce0 = 1'b1;
    end else begin
        bn_moving_mean_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_172_ce = 1'b1;
    end else begin
        grp_fu_172_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_204_ce = 1'b1;
    end else begin
        grp_fu_204_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter31 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter31 == 1'b1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_fu_133_p2 = (ap_sig_allocacmp_i_7 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (ap_done_reg == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & (ap_done_reg == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_339 = ((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bn_beta_1_V_address0 = i_cast_reg_224_pp0_iter28_reg;

assign bn_gamma_1_V_address0 = i_cast_reg_224_pp0_iter26_reg;

assign bn_moving_mean_1_V_address0 = i_cast_fu_139_p1;

assign grp_fu_172_p0 = {{ret_V_5_fu_158_p2}, {8'd0}};

assign grp_fu_172_p1 = 24'd0;

assign grp_fu_204_p1 = grp_fu_204_p10;

assign grp_fu_204_p10 = bn_gamma_1_V_q0;

assign i_cast_fu_139_p1 = ap_sig_allocacmp_i_7;

assign icmp_ln27_fu_127_p2 = ((ap_sig_allocacmp_i_7 == 7'd105) ? 1'b1 : 1'b0);

assign input_r_address0 = i_cast_fu_139_p1;

assign output_r_address0 = i_cast_reg_224_pp0_iter30_reg;

assign output_r_d0 = {{grp_fu_204_p3[23:8]}};

assign ret_V_5_fu_158_p2 = (zext_ln1348_fu_150_p1 - zext_ln1348_2_fu_154_p1);

assign rhs_5_fu_182_p3 = {{bn_beta_1_V_q0}, {8'd0}};

assign zext_ln1348_2_fu_154_p1 = bn_moving_mean_1_V_q0;

assign zext_ln1348_fu_150_p1 = input_r_q0;

always @ (posedge ap_clk) begin
    i_cast_reg_224[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter1_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter2_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter3_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter4_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter5_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter6_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter7_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter8_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter9_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter10_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter11_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter12_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter13_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter14_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter15_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter16_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter17_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter18_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter19_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter20_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter21_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter22_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter23_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter24_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter25_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter26_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter27_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter28_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter29_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_224_pp0_iter30_reg[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //gesture_model_batchnorm_1
