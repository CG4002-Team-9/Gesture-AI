// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gesture_model_conv1d_0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_0_address1,
        input_0_ce1,
        input_0_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [6:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [6:0] input_0_address1;
output   input_0_ce1;
input  [31:0] input_0_q1;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_idle;
reg[6:0] input_0_address0;
reg input_0_ce0;
reg input_0_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_state10_pp0_stage1_iter4;
wire    ap_block_state12_pp0_stage1_iter5;
wire    ap_block_state14_pp0_stage1_iter6;
wire    ap_block_state16_pp0_stage1_iter7;
wire    ap_block_state18_pp0_stage1_iter8;
wire    ap_block_state20_pp0_stage1_iter9;
wire    ap_block_state22_pp0_stage1_iter10;
wire    ap_block_state24_pp0_stage1_iter11;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln25_reg_428;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] conv1d_0_weights_0_0_address0;
reg    conv1d_0_weights_0_0_ce0;
wire   [31:0] conv1d_0_weights_0_0_q0;
wire   [3:0] conv1d_0_weights_1_0_address0;
reg    conv1d_0_weights_1_0_ce0;
wire   [31:0] conv1d_0_weights_1_0_q0;
wire   [3:0] conv1d_0_weights_2_0_address0;
reg    conv1d_0_weights_2_0_ce0;
wire   [31:0] conv1d_0_weights_2_0_q0;
wire   [3:0] conv1d_0_biases_address0;
reg    conv1d_0_biases_ce0;
wire   [31:0] conv1d_0_biases_q0;
wire   [0:0] icmp_ln25_fu_220_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state13_pp0_stage0_iter6;
wire    ap_block_state15_pp0_stage0_iter7;
wire    ap_block_state17_pp0_stage0_iter8;
wire    ap_block_state19_pp0_stage0_iter9;
wire    ap_block_state21_pp0_stage0_iter10;
wire    ap_block_state23_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_11001;
wire   [6:0] select_ln25_3_fu_304_p3;
reg   [6:0] select_ln25_3_reg_442;
wire   [63:0] j_cast_fu_312_p1;
reg   [63:0] j_cast_reg_447;
reg   [63:0] j_cast_reg_447_pp0_iter1_reg;
reg   [63:0] j_cast_reg_447_pp0_iter2_reg;
reg   [63:0] j_cast_reg_447_pp0_iter3_reg;
reg   [63:0] j_cast_reg_447_pp0_iter4_reg;
reg   [63:0] j_cast_reg_447_pp0_iter5_reg;
reg   [63:0] j_cast_reg_447_pp0_iter6_reg;
reg   [63:0] j_cast_reg_447_pp0_iter7_reg;
wire   [10:0] add_ln37_fu_323_p2;
reg   [10:0] add_ln37_reg_452;
reg   [10:0] add_ln37_reg_452_pp0_iter1_reg;
reg   [10:0] add_ln37_reg_452_pp0_iter2_reg;
reg   [10:0] add_ln37_reg_452_pp0_iter3_reg;
reg   [10:0] add_ln37_reg_452_pp0_iter4_reg;
reg   [10:0] add_ln37_reg_452_pp0_iter5_reg;
reg   [10:0] add_ln37_reg_452_pp0_iter6_reg;
reg   [10:0] add_ln37_reg_452_pp0_iter7_reg;
reg   [10:0] add_ln37_reg_452_pp0_iter8_reg;
reg   [10:0] add_ln37_reg_452_pp0_iter9_reg;
reg   [10:0] add_ln37_reg_452_pp0_iter10_reg;
reg   [10:0] add_ln37_reg_452_pp0_iter11_reg;
reg   [31:0] input_0_load_reg_472;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] input_0_load_1_reg_477;
reg   [31:0] conv1d_0_weights_0_0_load_reg_487;
reg   [31:0] conv1d_0_weights_1_0_load_reg_492;
reg   [31:0] conv1d_0_weights_2_0_load_reg_497;
reg   [31:0] input_0_load_2_reg_502;
wire   [31:0] grp_fu_189_p2;
reg   [31:0] mul_reg_507;
wire   [31:0] grp_fu_193_p2;
reg   [31:0] mul_1_reg_512;
reg   [31:0] mul_1_reg_512_pp0_iter3_reg;
reg   [31:0] mul_1_reg_512_pp0_iter4_reg;
reg   [31:0] mul_2_reg_517;
reg   [31:0] mul_2_reg_517_pp0_iter3_reg;
reg   [31:0] mul_2_reg_517_pp0_iter4_reg;
reg   [31:0] mul_2_reg_517_pp0_iter5_reg;
reg   [31:0] mul_2_reg_517_pp0_iter6_reg;
wire   [31:0] grp_fu_180_p2;
reg   [31:0] sum_3_reg_522;
wire   [31:0] grp_fu_185_p2;
reg   [31:0] sum_3_1_reg_527;
reg   [31:0] sum_3_2_reg_537;
reg   [31:0] conv1d_0_biases_load_reg_542;
reg   [31:0] x_assign_reg_547;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln25_fu_274_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln25_1_fu_293_p1;
wire   [63:0] zext_ln25_2_fu_350_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln37_1_fu_354_p1;
reg   [4:0] j_fu_70;
wire   [4:0] add_ln27_fu_329_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [6:0] i_fu_74;
wire   [6:0] select_ln25_1_fu_258_p3;
reg   [6:0] ap_sig_allocacmp_i_load;
reg   [10:0] indvar_flatten_fu_78;
wire   [10:0] add_ln25_fu_226_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [31:0] grp_fu_180_p0;
reg   [31:0] grp_fu_180_p1;
reg   [31:0] grp_fu_185_p0;
reg   [31:0] grp_fu_185_p1;
reg   [31:0] grp_fu_189_p0;
reg   [31:0] grp_fu_189_p1;
wire   [0:0] icmp_ln27_fu_238_p2;
wire   [6:0] add_ln34_fu_252_p2;
wire   [6:0] add_ln34_1_fu_279_p2;
wire   [6:0] select_ln25_2_fu_285_p3;
wire   [6:0] add_ln34_2_fu_298_p2;
wire   [4:0] select_ln25_fu_244_p3;
wire   [10:0] tmp_7_fu_266_p3;
wire   [10:0] zext_ln37_fu_319_p1;
wire   [31:0] bitcast_ln20_fu_358_p1;
wire   [7:0] tmp_fu_361_p4;
wire   [22:0] trunc_ln20_fu_371_p1;
wire   [0:0] icmp_ln20_2_fu_381_p2;
wire   [0:0] icmp_ln20_fu_375_p2;
wire   [0:0] or_ln20_fu_387_p2;
wire   [0:0] grp_fu_197_p2;
wire   [0:0] and_ln20_fu_393_p2;
reg    grp_fu_180_ce;
reg    grp_fu_185_ce;
reg    grp_fu_189_ce;
reg    grp_fu_193_ce;
reg    grp_fu_197_ce;
reg    ap_block_pp0_stage0_00001;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to11;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_321;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

gesture_model_conv1d_0_conv1d_0_weights_0_0_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv1d_0_weights_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1d_0_weights_0_0_address0),
    .ce0(conv1d_0_weights_0_0_ce0),
    .q0(conv1d_0_weights_0_0_q0)
);

gesture_model_conv1d_0_conv1d_0_weights_1_0_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv1d_0_weights_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1d_0_weights_1_0_address0),
    .ce0(conv1d_0_weights_1_0_ce0),
    .q0(conv1d_0_weights_1_0_q0)
);

gesture_model_conv1d_0_conv1d_0_weights_2_0_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv1d_0_weights_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1d_0_weights_2_0_address0),
    .ce0(conv1d_0_weights_2_0_ce0),
    .q0(conv1d_0_weights_2_0_q0)
);

gesture_model_conv1d_0_conv1d_0_biases_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv1d_0_biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv1d_0_biases_address0),
    .ce0(conv1d_0_biases_ce0),
    .q0(conv1d_0_biases_q0)
);

gesture_model_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_180_p0),
    .din1(grp_fu_180_p1),
    .ce(grp_fu_180_ce),
    .dout(grp_fu_180_p2)
);

gesture_model_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_185_p0),
    .din1(grp_fu_185_p1),
    .ce(grp_fu_185_ce),
    .dout(grp_fu_185_p2)
);

gesture_model_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_189_p0),
    .din1(grp_fu_189_p1),
    .ce(grp_fu_189_ce),
    .dout(grp_fu_189_p2)
);

gesture_model_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_0_load_1_reg_477),
    .din1(conv1d_0_weights_1_0_load_reg_492),
    .ce(grp_fu_193_ce),
    .dout(grp_fu_193_p2)
);

gesture_model_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_assign_reg_547),
    .din1(32'd0),
    .ce(grp_fu_197_ce),
    .opcode(5'd2),
    .dout(grp_fu_197_p2)
);

gesture_model_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_321)) begin
        if ((icmp_ln25_fu_220_p2 == 1'd0)) begin
            i_fu_74 <= select_ln25_1_fu_258_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_74 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_321)) begin
        if ((icmp_ln25_fu_220_p2 == 1'd0)) begin
            indvar_flatten_fu_78 <= add_ln25_fu_226_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_78 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_321)) begin
        if ((icmp_ln25_fu_220_p2 == 1'd0)) begin
            j_fu_70 <= add_ln27_fu_329_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_70 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln25_fu_220_p2 == 1'd0))) begin
        add_ln37_reg_452 <= add_ln37_fu_323_p2;
        j_cast_reg_447[4 : 0] <= j_cast_fu_312_p1[4 : 0];
        select_ln25_3_reg_442 <= select_ln25_3_fu_304_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln37_reg_452_pp0_iter10_reg <= add_ln37_reg_452_pp0_iter9_reg;
        add_ln37_reg_452_pp0_iter11_reg <= add_ln37_reg_452_pp0_iter10_reg;
        add_ln37_reg_452_pp0_iter1_reg <= add_ln37_reg_452;
        add_ln37_reg_452_pp0_iter2_reg <= add_ln37_reg_452_pp0_iter1_reg;
        add_ln37_reg_452_pp0_iter3_reg <= add_ln37_reg_452_pp0_iter2_reg;
        add_ln37_reg_452_pp0_iter4_reg <= add_ln37_reg_452_pp0_iter3_reg;
        add_ln37_reg_452_pp0_iter5_reg <= add_ln37_reg_452_pp0_iter4_reg;
        add_ln37_reg_452_pp0_iter6_reg <= add_ln37_reg_452_pp0_iter5_reg;
        add_ln37_reg_452_pp0_iter7_reg <= add_ln37_reg_452_pp0_iter6_reg;
        add_ln37_reg_452_pp0_iter8_reg <= add_ln37_reg_452_pp0_iter7_reg;
        add_ln37_reg_452_pp0_iter9_reg <= add_ln37_reg_452_pp0_iter8_reg;
        icmp_ln25_reg_428 <= icmp_ln25_fu_220_p2;
        j_cast_reg_447_pp0_iter1_reg[4 : 0] <= j_cast_reg_447[4 : 0];
        j_cast_reg_447_pp0_iter2_reg[4 : 0] <= j_cast_reg_447_pp0_iter1_reg[4 : 0];
        j_cast_reg_447_pp0_iter3_reg[4 : 0] <= j_cast_reg_447_pp0_iter2_reg[4 : 0];
        j_cast_reg_447_pp0_iter4_reg[4 : 0] <= j_cast_reg_447_pp0_iter3_reg[4 : 0];
        j_cast_reg_447_pp0_iter5_reg[4 : 0] <= j_cast_reg_447_pp0_iter4_reg[4 : 0];
        j_cast_reg_447_pp0_iter6_reg[4 : 0] <= j_cast_reg_447_pp0_iter5_reg[4 : 0];
        j_cast_reg_447_pp0_iter7_reg[4 : 0] <= j_cast_reg_447_pp0_iter6_reg[4 : 0];
        mul_1_reg_512 <= grp_fu_193_p2;
        mul_1_reg_512_pp0_iter3_reg <= mul_1_reg_512;
        mul_1_reg_512_pp0_iter4_reg <= mul_1_reg_512_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        conv1d_0_biases_load_reg_542 <= conv1d_0_biases_q0;
        mul_2_reg_517_pp0_iter3_reg <= mul_2_reg_517;
        mul_2_reg_517_pp0_iter4_reg <= mul_2_reg_517_pp0_iter3_reg;
        mul_2_reg_517_pp0_iter5_reg <= mul_2_reg_517_pp0_iter4_reg;
        mul_2_reg_517_pp0_iter6_reg <= mul_2_reg_517_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv1d_0_weights_0_0_load_reg_487 <= conv1d_0_weights_0_0_q0;
        conv1d_0_weights_1_0_load_reg_492 <= conv1d_0_weights_1_0_q0;
        conv1d_0_weights_2_0_load_reg_497 <= conv1d_0_weights_2_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_reg_428 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_0_load_1_reg_477 <= input_0_q0;
        input_0_load_reg_472 <= input_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_load_2_reg_502 <= input_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_2_reg_517 <= grp_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_reg_507 <= grp_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_3_1_reg_527 <= grp_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sum_3_2_reg_537 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_3_reg_522 <= grp_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        x_assign_reg_547 <= grp_fu_185_p2;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_428 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to11 = 1'b1;
    end else begin
        ap_idle_pp0_1to11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 7'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1d_0_biases_ce0 = 1'b1;
    end else begin
        conv1d_0_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1d_0_weights_0_0_ce0 = 1'b1;
    end else begin
        conv1d_0_weights_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1d_0_weights_1_0_ce0 = 1'b1;
    end else begin
        conv1d_0_weights_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv1d_0_weights_2_0_ce0 = 1'b1;
    end else begin
        conv1d_0_weights_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_180_ce = 1'b1;
    end else begin
        grp_fu_180_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_180_p0 = sum_3_1_reg_527;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_180_p0 = mul_reg_507;
    end else begin
        grp_fu_180_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_180_p1 = mul_2_reg_517_pp0_iter6_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_180_p1 = 32'd0;
    end else begin
        grp_fu_180_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_185_ce = 1'b1;
    end else begin
        grp_fu_185_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_185_p0 = sum_3_2_reg_537;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_185_p0 = sum_3_reg_522;
    end else begin
        grp_fu_185_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_185_p1 = conv1d_0_biases_load_reg_542;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_185_p1 = mul_1_reg_512_pp0_iter4_reg;
    end else begin
        grp_fu_185_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_189_ce = 1'b1;
    end else begin
        grp_fu_189_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_189_p0 = input_0_load_2_reg_502;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_189_p0 = input_0_load_reg_472;
        end else begin
            grp_fu_189_p0 = 'bx;
        end
    end else begin
        grp_fu_189_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_189_p1 = conv1d_0_weights_2_0_load_reg_497;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_189_p1 = conv1d_0_weights_0_0_load_reg_487;
        end else begin
            grp_fu_189_p1 = 'bx;
        end
    end else begin
        grp_fu_189_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_193_ce = 1'b1;
    end else begin
        grp_fu_193_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_197_ce = 1'b1;
    end else begin
        grp_fu_197_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_0_address0 = zext_ln25_2_fu_350_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_0_address0 = zext_ln25_1_fu_293_p1;
        end else begin
            input_0_address0 = 'bx;
        end
    end else begin
        input_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_0_ce1 = 1'b1;
    end else begin
        input_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to11 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_fu_226_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln27_fu_329_p2 = (select_ln25_fu_244_p3 + 5'd1);

assign add_ln34_1_fu_279_p2 = (ap_sig_allocacmp_i_load + 7'd2);

assign add_ln34_2_fu_298_p2 = (ap_sig_allocacmp_i_load + 7'd3);

assign add_ln34_fu_252_p2 = (ap_sig_allocacmp_i_load + 7'd1);

assign add_ln37_fu_323_p2 = (tmp_7_fu_266_p3 + zext_ln37_fu_319_p1);

assign and_ln20_fu_393_p2 = (or_ln20_fu_387_p2 & grp_fu_197_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_done_reg == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_done_reg == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state20_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_321 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign bitcast_ln20_fu_358_p1 = x_assign_reg_547;

assign conv1d_0_biases_address0 = j_cast_reg_447_pp0_iter7_reg;

assign conv1d_0_weights_0_0_address0 = j_cast_fu_312_p1;

assign conv1d_0_weights_1_0_address0 = j_cast_fu_312_p1;

assign conv1d_0_weights_2_0_address0 = j_cast_fu_312_p1;

assign icmp_ln20_2_fu_381_p2 = ((trunc_ln20_fu_371_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_375_p2 = ((tmp_fu_361_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_220_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1888) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_238_p2 = ((ap_sig_allocacmp_j_load == 5'd16) ? 1'b1 : 1'b0);

assign input_0_address1 = zext_ln25_fu_274_p1;

assign j_cast_fu_312_p1 = select_ln25_fu_244_p3;

assign or_ln20_fu_387_p2 = (icmp_ln20_fu_375_p2 | icmp_ln20_2_fu_381_p2);

assign output_r_address0 = zext_ln37_1_fu_354_p1;

assign output_r_d0 = ((and_ln20_fu_393_p2[0:0] == 1'b1) ? x_assign_reg_547 : 32'd0);

assign select_ln25_1_fu_258_p3 = ((icmp_ln27_fu_238_p2[0:0] == 1'b1) ? add_ln34_fu_252_p2 : ap_sig_allocacmp_i_load);

assign select_ln25_2_fu_285_p3 = ((icmp_ln27_fu_238_p2[0:0] == 1'b1) ? add_ln34_1_fu_279_p2 : add_ln34_fu_252_p2);

assign select_ln25_3_fu_304_p3 = ((icmp_ln27_fu_238_p2[0:0] == 1'b1) ? add_ln34_2_fu_298_p2 : add_ln34_1_fu_279_p2);

assign select_ln25_fu_244_p3 = ((icmp_ln27_fu_238_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign tmp_7_fu_266_p3 = {{select_ln25_1_fu_258_p3}, {4'd0}};

assign tmp_fu_361_p4 = {{bitcast_ln20_fu_358_p1[30:23]}};

assign trunc_ln20_fu_371_p1 = bitcast_ln20_fu_358_p1[22:0];

assign zext_ln25_1_fu_293_p1 = select_ln25_2_fu_285_p3;

assign zext_ln25_2_fu_350_p1 = select_ln25_3_reg_442;

assign zext_ln25_fu_274_p1 = select_ln25_1_fu_258_p3;

assign zext_ln37_1_fu_354_p1 = add_ln37_reg_452_pp0_iter11_reg;

assign zext_ln37_fu_319_p1 = select_ln25_fu_244_p3;

always @ (posedge ap_clk) begin
    j_cast_reg_447[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_cast_reg_447_pp0_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_cast_reg_447_pp0_iter2_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_cast_reg_447_pp0_iter3_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_cast_reg_447_pp0_iter4_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_cast_reg_447_pp0_iter5_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_cast_reg_447_pp0_iter6_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    j_cast_reg_447_pp0_iter7_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //gesture_model_conv1d_0
