-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gesture_model_conv1d_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of gesture_model_conv1d_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_69 : STD_LOGIC_VECTOR (6 downto 0) := "1101001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv7_C : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv7_A : STD_LOGIC_VECTOR (6 downto 0) := "0001010";
    constant ap_const_lv7_E : STD_LOGIC_VECTOR (6 downto 0) := "0001110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv7_D : STD_LOGIC_VECTOR (6 downto 0) := "0001101";
    constant ap_const_lv7_F : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_FFEF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111101111";
    constant ap_const_lv15_7FEF : STD_LOGIC_VECTOR (14 downto 0) := "111111111101111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv22_16 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010110";
    constant ap_const_lv24_5A : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001011010";
    constant ap_const_lv23_7FFFD2 : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111010010";
    constant ap_const_lv24_FFFFAB : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110101011";
    constant ap_const_lv23_2B : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000101011";
    constant ap_const_lv23_7FFFCC : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111001100";
    constant ap_const_lv23_31 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000110001";
    constant ap_const_lv23_7FFFDB : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111011011";
    constant ap_const_lv23_7FFFD6 : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111010110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal icmp_ln14_reg_1221 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage5 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal reg_296 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal reg_301 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_306 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal reg_311 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_315 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_5_reg_1203 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln14_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln18_cast_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln18_cast_reg_1225 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln18_cast_reg_1225_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1271_1_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_2_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln1271_5_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_3_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln1271_7_fu_394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_4_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln1271_9_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_6_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln1271_11_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_8_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln1271_12_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_10_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln1271_14_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1271_13_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln1271_15_fu_697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_142 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1271_fu_334_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_5 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1271_1_fu_355_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1271_4_fu_365_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1271_2_fu_379_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1271_6_fu_389_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1271_3_fu_403_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1271_8_fu_413_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1271_5_fu_427_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1271_10_fu_437_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1107_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln_fu_447_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_456_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln1271_7_fu_472_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1271_11_fu_482_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1114_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_492_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1271_9_fu_513_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1271_13_fu_523_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1123_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_26_fu_533_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_550_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1273_3_fu_558_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1273_1_fu_568_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1273_fu_562_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1273_4_fu_576_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1273_1_fu_580_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal and_ln838_s_fu_542_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln813_2_fu_586_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1347_17_fu_590_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_27_fu_596_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_2_fu_614_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1273_5_fu_622_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1273_3_fu_632_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1273_2_fu_626_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1273_6_fu_640_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1273_3_fu_644_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln838_14_fu_606_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln813_3_fu_650_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1347_18_fu_654_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_28_fu_660_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1271_12_fu_682_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1271_14_fu_692_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_fu_702_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1132_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_29_fu_702_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_4_fu_719_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1273_5_fu_731_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1273_8_fu_727_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1273_9_fu_739_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln1273_fu_743_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal and_ln838_16_fu_711_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln813_4_fu_749_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1347_20_fu_753_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_30_fu_759_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1141_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_31_fu_781_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_6_fu_798_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1273_11_fu_806_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1273_7_fu_816_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1273_4_fu_810_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1273_12_fu_824_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1273_5_fu_828_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal and_ln838_18_fu_790_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln813_6_fu_834_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1347_22_fu_838_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_32_fu_844_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1150_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_33_fu_866_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1273_14_fu_883_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_8_fu_887_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_8_fu_887_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1273_15_fu_895_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1273_6_fu_899_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1273_14_fu_883_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln1273_7_fu_905_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal and_ln838_20_fu_875_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln813_8_fu_911_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1347_24_fu_915_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_34_fu_921_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1159_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_35_fu_943_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1168_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_36_fu_964_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1273_9_fu_981_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1273_18_fu_989_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1273_s_fu_999_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln1273_8_fu_993_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1273_19_fu_1007_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1273_9_fu_1011_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln838_23_fu_973_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln813_11_fu_1017_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln1347_27_fu_1021_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_37_fu_1027_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1177_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_38_fu_1045_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1186_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln818_2_fu_1062_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln3_fu_1071_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln813_fu_1080_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1649_fu_1092_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1649_fu_1086_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1107_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1114_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1123_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1123_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1132_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1132_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1141_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1141_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1150_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1150_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1159_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1159_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1168_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1168_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1177_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1177_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1186_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1186_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1107_ce : STD_LOGIC;
    signal grp_fu_1114_ce : STD_LOGIC;
    signal grp_fu_1123_ce : STD_LOGIC;
    signal grp_fu_1132_ce : STD_LOGIC;
    signal grp_fu_1141_ce : STD_LOGIC;
    signal grp_fu_1150_ce : STD_LOGIC;
    signal grp_fu_1159_ce : STD_LOGIC;
    signal grp_fu_1168_ce : STD_LOGIC;
    signal grp_fu_1177_ce : STD_LOGIC;
    signal grp_fu_1186_ce : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_348 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gesture_model_mul_mul_16s_5ns_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component gesture_model_mac_muladd_16s_7ns_22s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component gesture_model_mac_muladd_16s_7s_24s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component gesture_model_mac_muladd_16s_8s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component gesture_model_mac_muladd_16s_5ns_24s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component gesture_model_mac_muladd_16s_6ns_24s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component gesture_model_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mul_mul_16s_5ns_22_4_1_U1 : component gesture_model_mul_mul_16s_5ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 5,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_r_q1,
        din1 => grp_fu_1107_p1,
        ce => grp_fu_1107_ce,
        dout => grp_fu_1107_p2);

    mac_muladd_16s_7ns_22s_24_4_1_U2 : component gesture_model_mac_muladd_16s_7ns_22s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        din2_WIDTH => 22,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_296,
        din1 => grp_fu_1114_p1,
        din2 => tmp_fu_456_p3,
        ce => grp_fu_1114_ce,
        dout => grp_fu_1114_p3);

    mac_muladd_16s_7s_24s_24_4_1_U3 : component gesture_model_mac_muladd_16s_7s_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_296,
        din1 => grp_fu_1123_p1,
        din2 => grp_fu_1123_p2,
        ce => grp_fu_1123_ce,
        dout => grp_fu_1123_p3);

    mac_muladd_16s_8s_24ns_24_4_1_U4 : component gesture_model_mac_muladd_16s_8s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_301,
        din1 => grp_fu_1132_p1,
        din2 => grp_fu_1132_p2,
        ce => grp_fu_1132_ce,
        dout => grp_fu_1132_p3);

    mac_muladd_16s_5ns_24s_24_4_1_U5 : component gesture_model_mac_muladd_16s_5ns_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 5,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_306,
        din1 => grp_fu_1141_p1,
        din2 => grp_fu_1141_p2,
        ce => grp_fu_1141_ce,
        dout => grp_fu_1141_p3);

    mac_muladd_16s_6ns_24s_24_4_1_U6 : component gesture_model_mac_muladd_16s_6ns_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_311,
        din1 => grp_fu_1150_p1,
        din2 => grp_fu_1150_p2,
        ce => grp_fu_1150_ce,
        dout => grp_fu_1150_p3);

    mac_muladd_16s_7s_24s_24_4_1_U7 : component gesture_model_mac_muladd_16s_7s_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_315,
        din1 => grp_fu_1159_p1,
        din2 => grp_fu_1159_p2,
        ce => grp_fu_1159_ce,
        dout => grp_fu_1159_p3);

    mac_muladd_16s_6ns_24s_24_4_1_U8 : component gesture_model_mac_muladd_16s_6ns_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_301,
        din1 => grp_fu_1168_p1,
        din2 => grp_fu_1168_p2,
        ce => grp_fu_1168_ce,
        dout => grp_fu_1168_p3);

    mac_muladd_16s_7s_24s_24_4_1_U9 : component gesture_model_mac_muladd_16s_7s_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_311,
        din1 => grp_fu_1177_p1,
        din2 => grp_fu_1177_p2,
        ce => grp_fu_1177_ce,
        dout => grp_fu_1177_p3);

    mac_muladd_16s_7s_24s_24_4_1_U10 : component gesture_model_mac_muladd_16s_7s_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_301,
        din1 => grp_fu_1186_p1,
        din2 => grp_fu_1186_p2,
        ce => grp_fu_1186_ce,
        dout => grp_fu_1186_p3);

    flow_control_loop_pipe_U : component gesture_model_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage5,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage5)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_348)) then
                if ((icmp_ln14_fu_328_p2 = ap_const_lv1_0)) then 
                    i_fu_142 <= add_ln1271_fu_334_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_142 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln14_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln14_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln14_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                reg_296 <= input_r_q1;
            elsif (((icmp_ln14_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_296 <= input_r_q0;
            end if; 
        end if;
    end process;

    reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                reg_301 <= input_r_q1;
            elsif ((((icmp_ln14_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln14_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                reg_301 <= input_r_q0;
            end if; 
        end if;
    end process;

    reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln14_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((icmp_ln14_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                reg_306 <= input_r_q1;
            elsif (((icmp_ln14_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                reg_306 <= input_r_q0;
            end if; 
        end if;
    end process;

    reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_315 <= input_r_q1;
            elsif (((icmp_ln14_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                reg_315 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_5_reg_1203 <= ap_sig_allocacmp_i_5;
                icmp_ln14_reg_1221 <= icmp_ln14_fu_328_p2;
                    trunc_ln18_cast_reg_1225_pp0_iter1_reg(6 downto 0) <= trunc_ln18_cast_reg_1225(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln14_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((icmp_ln14_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then
                reg_311 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln14_fu_328_p2 = ap_const_lv1_0))) then
                    trunc_ln18_cast_reg_1225(6 downto 0) <= trunc_ln18_cast_fu_340_p1(6 downto 0);
            end if;
        end if;
    end process;
    trunc_ln18_cast_reg_1225(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    trunc_ln18_cast_reg_1225_pp0_iter1_reg(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage5_subdone, ap_condition_exit_pp0_iter0_stage5, ap_block_pp0_stage7_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage6_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage5)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln1271_10_fu_437_p2 <= std_logic_vector(unsigned(i_5_reg_1203) + unsigned(ap_const_lv7_B));
    add_ln1271_11_fu_482_p2 <= std_logic_vector(unsigned(i_5_reg_1203) + unsigned(ap_const_lv7_C));
    add_ln1271_12_fu_682_p2 <= std_logic_vector(unsigned(i_5_reg_1203) + unsigned(ap_const_lv7_D));
    add_ln1271_13_fu_523_p2 <= std_logic_vector(unsigned(i_5_reg_1203) + unsigned(ap_const_lv7_E));
    add_ln1271_14_fu_692_p2 <= std_logic_vector(unsigned(i_5_reg_1203) + unsigned(ap_const_lv7_F));
    add_ln1271_1_fu_355_p2 <= std_logic_vector(unsigned(i_5_reg_1203) + unsigned(ap_const_lv7_2));
    add_ln1271_2_fu_379_p2 <= std_logic_vector(unsigned(i_5_reg_1203) + unsigned(ap_const_lv7_3));
    add_ln1271_3_fu_403_p2 <= std_logic_vector(unsigned(i_5_reg_1203) + unsigned(ap_const_lv7_4));
    add_ln1271_4_fu_365_p2 <= std_logic_vector(unsigned(i_5_reg_1203) + unsigned(ap_const_lv7_5));
    add_ln1271_5_fu_427_p2 <= std_logic_vector(unsigned(i_5_reg_1203) + unsigned(ap_const_lv7_6));
    add_ln1271_6_fu_389_p2 <= std_logic_vector(unsigned(i_5_reg_1203) + unsigned(ap_const_lv7_7));
    add_ln1271_7_fu_472_p2 <= std_logic_vector(unsigned(i_5_reg_1203) + unsigned(ap_const_lv7_8));
    add_ln1271_8_fu_413_p2 <= std_logic_vector(unsigned(i_5_reg_1203) + unsigned(ap_const_lv7_9));
    add_ln1271_9_fu_513_p2 <= std_logic_vector(unsigned(i_5_reg_1203) + unsigned(ap_const_lv7_A));
    add_ln1271_fu_334_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_5) + unsigned(ap_const_lv7_1));
    add_ln1273_fu_743_p2 <= std_logic_vector(signed(sext_ln1273_8_fu_727_p1) + signed(sext_ln1273_9_fu_739_p1));
    add_ln1347_17_fu_590_p2 <= std_logic_vector(unsigned(and_ln838_s_fu_542_p3) + unsigned(sext_ln813_2_fu_586_p1));
    add_ln1347_18_fu_654_p2 <= std_logic_vector(unsigned(and_ln838_14_fu_606_p3) + unsigned(sext_ln813_3_fu_650_p1));
    add_ln1347_20_fu_753_p2 <= std_logic_vector(unsigned(and_ln838_16_fu_711_p3) + unsigned(sext_ln813_4_fu_749_p1));
    add_ln1347_22_fu_838_p2 <= std_logic_vector(unsigned(and_ln838_18_fu_790_p3) + unsigned(sext_ln813_6_fu_834_p1));
    add_ln1347_24_fu_915_p2 <= std_logic_vector(unsigned(and_ln838_20_fu_875_p3) + unsigned(sext_ln813_8_fu_911_p1));
    add_ln1347_27_fu_1021_p2 <= std_logic_vector(unsigned(and_ln838_23_fu_973_p3) + unsigned(sext_ln813_11_fu_1017_p1));
    add_ln1649_fu_1086_p2 <= std_logic_vector(unsigned(trunc_ln3_fu_1071_p4) + unsigned(ap_const_lv15_7FEF));
    add_ln813_fu_1080_p2 <= std_logic_vector(unsigned(trunc_ln818_2_fu_1062_p4) + unsigned(ap_const_lv16_FFEF));
    and_ln838_14_fu_606_p3 <= (tmp_27_fu_596_p4 & ap_const_lv8_0);
    and_ln838_16_fu_711_p3 <= (tmp_29_fu_702_p4 & ap_const_lv8_0);
    and_ln838_18_fu_790_p3 <= (tmp_31_fu_781_p4 & ap_const_lv8_0);
    and_ln838_20_fu_875_p3 <= (tmp_33_fu_866_p4 & ap_const_lv8_0);
    and_ln838_23_fu_973_p3 <= (tmp_36_fu_964_p4 & ap_const_lv8_0);
    and_ln838_s_fu_542_p3 <= (tmp_26_fu_533_p4 & ap_const_lv8_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage6_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage6_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_348_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_348 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, icmp_ln14_reg_1221)
    begin
        if (((icmp_ln14_reg_1221 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage5;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, i_fu_142, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_5 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_5 <= i_fu_142;
        end if; 
    end process;


    grp_fu_1107_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_1107_ce <= ap_const_logic_1;
        else 
            grp_fu_1107_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1107_p1 <= ap_const_lv22_16(5 - 1 downto 0);

    grp_fu_1114_ce_assign_proc : process(ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_1114_ce <= ap_const_logic_1;
        else 
            grp_fu_1114_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1114_p1 <= ap_const_lv24_5A(7 - 1 downto 0);

    grp_fu_1123_ce_assign_proc : process(ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_1123_ce <= ap_const_logic_1;
        else 
            grp_fu_1123_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1123_p1 <= ap_const_lv23_7FFFD2(7 - 1 downto 0);
    grp_fu_1123_p2 <= (tmp_s_fu_492_p4 & ap_const_lv8_0);

    grp_fu_1132_ce_assign_proc : process(ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
            grp_fu_1132_ce <= ap_const_logic_1;
        else 
            grp_fu_1132_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1132_p1 <= ap_const_lv24_FFFFAB(8 - 1 downto 0);
    grp_fu_1132_p2 <= (tmp_28_fu_660_p4 & ap_const_lv8_0);

    grp_fu_1141_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
            grp_fu_1141_ce <= ap_const_logic_1;
        else 
            grp_fu_1141_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1141_p1 <= ap_const_lv22_16(5 - 1 downto 0);
    grp_fu_1141_p2 <= (tmp_30_fu_759_p4 & ap_const_lv8_0);

    grp_fu_1150_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
            grp_fu_1150_ce <= ap_const_logic_1;
        else 
            grp_fu_1150_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1150_p1 <= ap_const_lv23_2B(6 - 1 downto 0);
    grp_fu_1150_p2 <= (tmp_32_fu_844_p4 & ap_const_lv8_0);

    grp_fu_1159_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_1159_ce <= ap_const_logic_1;
        else 
            grp_fu_1159_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1159_p1 <= ap_const_lv23_7FFFCC(7 - 1 downto 0);
    grp_fu_1159_p2 <= (tmp_34_fu_921_p4 & ap_const_lv8_0);

    grp_fu_1168_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_1168_ce <= ap_const_logic_1;
        else 
            grp_fu_1168_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1168_p1 <= ap_const_lv23_31(6 - 1 downto 0);
    grp_fu_1168_p2 <= (tmp_35_fu_943_p4 & ap_const_lv8_0);

    grp_fu_1177_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_1177_ce <= ap_const_logic_1;
        else 
            grp_fu_1177_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1177_p1 <= ap_const_lv23_7FFFDB(7 - 1 downto 0);
    grp_fu_1177_p2 <= (tmp_37_fu_1027_p4 & ap_const_lv8_0);

    grp_fu_1186_ce_assign_proc : process(ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_1186_ce <= ap_const_logic_1;
        else 
            grp_fu_1186_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1186_p1 <= ap_const_lv23_7FFFD6(7 - 1 downto 0);
    grp_fu_1186_p2 <= (tmp_38_fu_1045_p4 & ap_const_lv8_0);
    icmp_ln14_fu_328_p2 <= "1" when (ap_sig_allocacmp_i_5 = ap_const_lv7_69) else "0";
    icmp_ln1649_fu_1092_p2 <= "1" when (signed(add_ln813_fu_1080_p2) > signed(ap_const_lv16_0)) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0, zext_ln1271_1_fu_345_p1, ap_block_pp0_stage1, zext_ln1271_5_fu_370_p1, ap_block_pp0_stage2, zext_ln1271_7_fu_394_p1, ap_block_pp0_stage3, zext_ln1271_9_fu_418_p1, ap_block_pp0_stage4, zext_ln1271_11_fu_442_p1, ap_block_pp0_stage5, zext_ln1271_12_fu_487_p1, ap_block_pp0_stage6, zext_ln1271_14_fu_528_p1, ap_block_pp0_stage7, zext_ln1271_15_fu_697_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                input_r_address0 <= zext_ln1271_15_fu_697_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                input_r_address0 <= zext_ln1271_14_fu_528_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                input_r_address0 <= zext_ln1271_12_fu_487_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_r_address0 <= zext_ln1271_11_fu_442_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address0 <= zext_ln1271_9_fu_418_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address0 <= zext_ln1271_7_fu_394_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address0 <= zext_ln1271_5_fu_370_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address0 <= zext_ln1271_1_fu_345_p1(7 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage4, trunc_ln18_cast_fu_340_p1, ap_block_pp0_stage0, zext_ln1271_2_fu_360_p1, ap_block_pp0_stage1, zext_ln1271_3_fu_384_p1, ap_block_pp0_stage2, zext_ln1271_4_fu_408_p1, ap_block_pp0_stage3, zext_ln1271_6_fu_432_p1, ap_block_pp0_stage4, zext_ln1271_8_fu_477_p1, ap_block_pp0_stage5, zext_ln1271_10_fu_518_p1, ap_block_pp0_stage6, zext_ln1271_13_fu_687_p1, ap_block_pp0_stage7)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                input_r_address1 <= zext_ln1271_13_fu_687_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                input_r_address1 <= zext_ln1271_10_fu_518_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                input_r_address1 <= zext_ln1271_8_fu_477_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_r_address1 <= zext_ln1271_6_fu_432_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address1 <= zext_ln1271_4_fu_408_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address1 <= zext_ln1271_3_fu_384_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address1 <= zext_ln1271_2_fu_360_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address1 <= trunc_ln18_cast_fu_340_p1(7 - 1 downto 0);
            else 
                input_r_address1 <= "XXXXXXX";
            end if;
        else 
            input_r_address1 <= "XXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_address0 <= trunc_ln18_cast_reg_1225_pp0_iter1_reg(7 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        add_ln1649_fu_1086_p2 when (icmp_ln1649_fu_1092_p2(0) = '1') else 
        ap_const_lv15_0;

    output_r_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1273_11_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1273_6_fu_798_p3),21));

        sext_ln1273_12_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1273_7_fu_816_p3),21));

    sext_ln1273_14_fu_883_p0 <= reg_306;
        sext_ln1273_14_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1273_14_fu_883_p0),20));

        sext_ln1273_15_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1273_8_fu_887_p3),20));

        sext_ln1273_18_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1273_9_fu_981_p3),22));

        sext_ln1273_19_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1273_s_fu_999_p3),22));

        sext_ln1273_3_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_550_p3),23));

        sext_ln1273_4_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1273_1_fu_568_p3),23));

        sext_ln1273_5_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1273_2_fu_614_p3),22));

        sext_ln1273_6_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1273_3_fu_632_p3),22));

        sext_ln1273_8_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1273_4_fu_719_p3),21));

        sext_ln1273_9_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1273_5_fu_731_p3),21));

        sext_ln813_11_fu_1017_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1273_9_fu_1011_p2),24));

        sext_ln813_2_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1273_1_fu_580_p2),24));

        sext_ln813_3_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1273_3_fu_644_p2),24));

        sext_ln813_4_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1273_fu_743_p2),24));

        sext_ln813_6_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1273_5_fu_828_p2),24));

        sext_ln813_8_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1273_7_fu_905_p2),24));

    shl_ln1273_1_fu_568_p3 <= (reg_296 & ap_const_lv1_0);
    shl_ln1273_2_fu_614_p3 <= (reg_301 & ap_const_lv5_0);
    shl_ln1273_3_fu_632_p3 <= (reg_301 & ap_const_lv1_0);
    shl_ln1273_4_fu_719_p3 <= (reg_306 & ap_const_lv4_0);
    shl_ln1273_5_fu_731_p3 <= (reg_306 & ap_const_lv2_0);
    shl_ln1273_6_fu_798_p3 <= (reg_296 & ap_const_lv4_0);
    shl_ln1273_7_fu_816_p3 <= (reg_296 & ap_const_lv2_0);
    shl_ln1273_8_fu_887_p1 <= reg_306;
    shl_ln1273_8_fu_887_p3 <= (shl_ln1273_8_fu_887_p1 & ap_const_lv3_0);
    shl_ln1273_9_fu_981_p3 <= (reg_315 & ap_const_lv5_0);
    shl_ln1273_s_fu_999_p3 <= (reg_315 & ap_const_lv2_0);
    shl_ln_fu_550_p3 <= (reg_296 & ap_const_lv6_0);
    sub_ln1273_1_fu_580_p2 <= std_logic_vector(unsigned(sub_ln1273_fu_562_p2) - unsigned(sext_ln1273_4_fu_576_p1));
    sub_ln1273_2_fu_626_p2 <= std_logic_vector(unsigned(ap_const_lv22_0) - unsigned(sext_ln1273_5_fu_622_p1));
    sub_ln1273_3_fu_644_p2 <= std_logic_vector(unsigned(sub_ln1273_2_fu_626_p2) - unsigned(sext_ln1273_6_fu_640_p1));
    sub_ln1273_4_fu_810_p2 <= std_logic_vector(unsigned(ap_const_lv21_0) - unsigned(sext_ln1273_11_fu_806_p1));
    sub_ln1273_5_fu_828_p2 <= std_logic_vector(unsigned(sub_ln1273_4_fu_810_p2) - unsigned(sext_ln1273_12_fu_824_p1));
    sub_ln1273_6_fu_899_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(sext_ln1273_15_fu_895_p1));
    sub_ln1273_7_fu_905_p2 <= std_logic_vector(unsigned(sub_ln1273_6_fu_899_p2) - unsigned(sext_ln1273_14_fu_883_p1));
    sub_ln1273_8_fu_993_p2 <= std_logic_vector(unsigned(ap_const_lv22_0) - unsigned(sext_ln1273_18_fu_989_p1));
    sub_ln1273_9_fu_1011_p2 <= std_logic_vector(unsigned(sub_ln1273_8_fu_993_p2) - unsigned(sext_ln1273_19_fu_1007_p1));
    sub_ln1273_fu_562_p2 <= std_logic_vector(unsigned(ap_const_lv23_0) - unsigned(sext_ln1273_3_fu_558_p1));
    tmp_26_fu_533_p4 <= grp_fu_1123_p3(23 downto 8);
    tmp_27_fu_596_p4 <= add_ln1347_17_fu_590_p2(23 downto 8);
    tmp_28_fu_660_p4 <= add_ln1347_18_fu_654_p2(23 downto 8);
    tmp_29_fu_702_p1 <= grp_fu_1132_p3;
    tmp_29_fu_702_p4 <= tmp_29_fu_702_p1(23 downto 8);
    tmp_30_fu_759_p4 <= add_ln1347_20_fu_753_p2(23 downto 8);
    tmp_31_fu_781_p4 <= grp_fu_1141_p3(23 downto 8);
    tmp_32_fu_844_p4 <= add_ln1347_22_fu_838_p2(23 downto 8);
    tmp_33_fu_866_p4 <= grp_fu_1150_p3(23 downto 8);
    tmp_34_fu_921_p4 <= add_ln1347_24_fu_915_p2(23 downto 8);
    tmp_35_fu_943_p4 <= grp_fu_1159_p3(23 downto 8);
    tmp_36_fu_964_p4 <= grp_fu_1168_p3(23 downto 8);
    tmp_37_fu_1027_p4 <= add_ln1347_27_fu_1021_p2(23 downto 8);
    tmp_38_fu_1045_p4 <= grp_fu_1177_p3(23 downto 8);
    tmp_fu_456_p3 <= (trunc_ln_fu_447_p4 & ap_const_lv8_0);
    tmp_s_fu_492_p4 <= grp_fu_1114_p3(23 downto 8);
    trunc_ln18_cast_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_5),64));
    trunc_ln3_fu_1071_p4 <= grp_fu_1186_p3(22 downto 8);
    trunc_ln818_2_fu_1062_p4 <= grp_fu_1186_p3(23 downto 8);
    trunc_ln_fu_447_p4 <= grp_fu_1107_p2(21 downto 8);
    zext_ln1271_10_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1271_9_fu_513_p2),64));
    zext_ln1271_11_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1271_10_fu_437_p2),64));
    zext_ln1271_12_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1271_11_fu_482_p2),64));
    zext_ln1271_13_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1271_12_fu_682_p2),64));
    zext_ln1271_14_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1271_13_fu_523_p2),64));
    zext_ln1271_15_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1271_14_fu_692_p2),64));
    zext_ln1271_1_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1271_fu_334_p2),64));
    zext_ln1271_2_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1271_1_fu_355_p2),64));
    zext_ln1271_3_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1271_2_fu_379_p2),64));
    zext_ln1271_4_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1271_3_fu_403_p2),64));
    zext_ln1271_5_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1271_4_fu_365_p2),64));
    zext_ln1271_6_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1271_5_fu_427_p2),64));
    zext_ln1271_7_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1271_6_fu_389_p2),64));
    zext_ln1271_8_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1271_7_fu_472_p2),64));
    zext_ln1271_9_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1271_8_fu_413_p2),64));
end behav;
