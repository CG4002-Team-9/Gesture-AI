-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gesture_model_exp_17_9_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (16 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of gesture_model_exp_17_9_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv22_3FFFFF : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111111111";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal f_x_lsb_table_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_x_lsb_table_V_ce0 : STD_LOGIC;
    signal f_x_lsb_table_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal exp_x_msb_2_m_1_table_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal exp_x_msb_2_m_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_2_m_1_table_V_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_1_table_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal exp_x_msb_1_table_V_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_V_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Result_s_fu_175_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_526 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_Result_s_reg_526_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_526_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_526_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_526_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_532 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_532_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_532_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_532_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln594_1_fu_291_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln594_1_reg_537 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln594_1_reg_537_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln594_1_reg_537_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln594_1_reg_537_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln202_1_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_1_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_1_reg_553_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_1_reg_553_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_1_reg_553_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_1_reg_553_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_3_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_3_reg_558 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_3_reg_558_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_3_reg_558_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_3_reg_558_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_3_reg_558_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal f_x_lsb_V_reg_563 : STD_LOGIC_VECTOR (10 downto 0);
    signal f_x_lsb_V_reg_563_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal f_x_lsb_V_reg_563_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal exp_x_msb_2_m_1_V_reg_568 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_2_m_1_V_reg_568_pp0_iter2_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_2_m_1_V_reg_568_pp0_iter3_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_2_lsb_m_1_V_fu_397_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_2_lsb_m_1_V_reg_583 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln541_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln541_1_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_2_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln594_fu_163_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_8_fu_183_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_197_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_fu_211_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_11_fu_225_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_12_fu_239_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_l_int_fu_153_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_l_fract_fu_167_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1653_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1649_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_295_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_32_fu_281_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal overf_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_1_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_3_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln202_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_2_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln176_2_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_20_fu_337_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln1_fu_360_p1 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_519_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal trunc_ln1_fu_360_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_1_fu_373_p5 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln813_4_fu_369_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln1347_fu_383_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_fu_387_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln813_fu_393_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Result_19_fu_354_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal y_V_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_427_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_fu_427_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_fu_427_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal y_lo_s_V_fu_433_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal y_l_V_fu_443_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal or_ln202_4_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln190_fu_412_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal y_V_1_fu_449_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_49_fu_463_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_30_fu_471_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Result_18_fu_487_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal overf_1_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overf_2_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_501_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_519_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_519_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_519_p00 : STD_LOGIC_VECTOR (42 downto 0);
    signal grp_fu_519_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal r_V_fu_427_p00 : STD_LOGIC_VECTOR (49 downto 0);
    signal r_V_fu_427_p10 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component gesture_model_mul_25ns_25ns_50_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;


    component gesture_model_mul_mul_25ns_18ns_43_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component gesture_model_exp_17_9_s_f_x_lsb_table_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component gesture_model_exp_17_9_s_exp_x_msb_2_m_1_table_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component gesture_model_exp_17_9_s_exp_x_msb_1_table_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    f_x_lsb_table_V_U : component gesture_model_exp_17_9_s_f_x_lsb_table_V_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_lsb_table_V_address0,
        ce0 => f_x_lsb_table_V_ce0,
        q0 => f_x_lsb_table_V_q0);

    exp_x_msb_2_m_1_table_V_U : component gesture_model_exp_17_9_s_exp_x_msb_2_m_1_table_V_ROM_AUTO_1R
    generic map (
        DataWidth => 25,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_2_m_1_table_V_address0,
        ce0 => exp_x_msb_2_m_1_table_V_ce0,
        q0 => exp_x_msb_2_m_1_table_V_q0);

    exp_x_msb_1_table_V_U : component gesture_model_exp_17_9_s_exp_x_msb_1_table_V_ROM_AUTO_1R
    generic map (
        DataWidth => 25,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_V_address0,
        ce0 => exp_x_msb_1_table_V_ce0,
        q0 => exp_x_msb_1_table_V_q0);

    mul_25ns_25ns_50_1_1_U48 : component gesture_model_mul_25ns_25ns_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 25,
        dout_WIDTH => 50)
    port map (
        din0 => r_V_fu_427_p0,
        din1 => r_V_fu_427_p1,
        dout => r_V_fu_427_p2);

    mul_mul_25ns_18ns_43_4_1_U49 : component gesture_model_mul_mul_25ns_18ns_43_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 25,
        din1_WIDTH => 18,
        dout_WIDTH => 43)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_519_p0,
        din1 => grp_fu_519_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_519_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_x_msb_2_lsb_m_1_V_reg_583 <= exp_x_msb_2_lsb_m_1_V_fu_397_p2;
                exp_x_msb_2_m_1_V_reg_568_pp0_iter2_reg <= exp_x_msb_2_m_1_V_reg_568;
                exp_x_msb_2_m_1_V_reg_568_pp0_iter3_reg <= exp_x_msb_2_m_1_V_reg_568_pp0_iter2_reg;
                f_x_lsb_V_reg_563_pp0_iter2_reg <= f_x_lsb_V_reg_563;
                f_x_lsb_V_reg_563_pp0_iter3_reg <= f_x_lsb_V_reg_563_pp0_iter2_reg;
                or_ln202_1_reg_553_pp0_iter2_reg <= or_ln202_1_reg_553_pp0_iter1_reg;
                or_ln202_1_reg_553_pp0_iter3_reg <= or_ln202_1_reg_553_pp0_iter2_reg;
                or_ln202_1_reg_553_pp0_iter4_reg <= or_ln202_1_reg_553_pp0_iter3_reg;
                or_ln202_3_reg_558_pp0_iter2_reg <= or_ln202_3_reg_558_pp0_iter1_reg;
                or_ln202_3_reg_558_pp0_iter3_reg <= or_ln202_3_reg_558_pp0_iter2_reg;
                or_ln202_3_reg_558_pp0_iter4_reg <= or_ln202_3_reg_558_pp0_iter3_reg;
                p_Result_s_reg_526_pp0_iter2_reg <= p_Result_s_reg_526_pp0_iter1_reg;
                p_Result_s_reg_526_pp0_iter3_reg <= p_Result_s_reg_526_pp0_iter2_reg;
                p_Result_s_reg_526_pp0_iter4_reg <= p_Result_s_reg_526_pp0_iter3_reg;
                tmp_reg_532_pp0_iter2_reg <= tmp_reg_532_pp0_iter1_reg;
                tmp_reg_532_pp0_iter3_reg <= tmp_reg_532_pp0_iter2_reg;
                trunc_ln594_1_reg_537_pp0_iter2_reg <= trunc_ln594_1_reg_537_pp0_iter1_reg;
                trunc_ln594_1_reg_537_pp0_iter3_reg <= trunc_ln594_1_reg_537_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exp_x_msb_2_m_1_V_reg_568 <= exp_x_msb_2_m_1_table_V_q0;
                f_x_lsb_V_reg_563 <= f_x_lsb_table_V_q0;
                or_ln202_1_reg_553 <= or_ln202_1_fu_319_p2;
                or_ln202_1_reg_553_pp0_iter1_reg <= or_ln202_1_reg_553;
                or_ln202_3_reg_558 <= or_ln202_3_fu_331_p2;
                or_ln202_3_reg_558_pp0_iter1_reg <= or_ln202_3_reg_558;
                p_Result_s_reg_526 <= x(16 downto 16);
                p_Result_s_reg_526_pp0_iter1_reg <= p_Result_s_reg_526;
                tmp_reg_532 <= x(10 downto 7);
                tmp_reg_532_pp0_iter1_reg <= tmp_reg_532;
                trunc_ln594_1_reg_537 <= trunc_ln594_1_fu_291_p1;
                trunc_ln594_1_reg_537_pp0_iter1_reg <= trunc_ln594_1_reg_537;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln202_fu_265_p2 <= (icmp_ln1653_fu_253_p2 and icmp_ln1649_fu_259_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to4)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv16_FFFF when (overf_2_fu_495_p2(0) = '1') else 
        tmp_s_fu_501_p4;
    exp_x_msb_1_table_V_address0 <= zext_ln541_2_fu_402_p1(5 - 1 downto 0);

    exp_x_msb_1_table_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_x_msb_2_lsb_m_1_V_fu_397_p2 <= std_logic_vector(unsigned(exp_x_msb_2_m_1_V_reg_568_pp0_iter3_reg) + unsigned(zext_ln813_fu_393_p1));
    exp_x_msb_2_m_1_table_V_address0 <= zext_ln541_1_fu_308_p1(5 - 1 downto 0);

    exp_x_msb_2_m_1_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_x_msb_2_m_1_table_V_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_2_m_1_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_lsb_table_V_address0 <= zext_ln541_fu_303_p1(5 - 1 downto 0);

    f_x_lsb_table_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_lsb_table_V_ce0 <= ap_const_logic_1;
        else 
            f_x_lsb_table_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_519_p0 <= grp_fu_519_p00(25 - 1 downto 0);
    grp_fu_519_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_m_1_table_V_q0),43));
    grp_fu_519_p1 <= grp_fu_519_p10(18 - 1 downto 0);
    grp_fu_519_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_20_fu_337_p4),43));
    icmp_ln1649_fu_259_p2 <= "1" when (unsigned(x_l_fract_fu_167_p3) > unsigned(ap_const_lv11_500)) else "0";
    icmp_ln1653_fu_253_p2 <= "1" when (x_l_int_fu_153_p4 = ap_const_lv4_7) else "0";
    or_ln202_1_fu_319_p2 <= (xor_ln176_fu_205_p2 or or_ln202_fu_313_p2);
    or_ln202_2_fu_325_p2 <= (xor_ln176_3_fu_247_p2 or and_ln202_fu_265_p2);
    or_ln202_3_fu_331_p2 <= (xor_ln176_2_fu_233_p2 or or_ln202_2_fu_325_p2);
    or_ln202_4_fu_459_p2 <= (or_ln202_3_reg_558_pp0_iter4_reg or or_ln202_1_reg_553_pp0_iter4_reg);
    or_ln202_fu_313_p2 <= (xor_ln176_1_fu_219_p2 or overf_fu_191_p2);
    overf_1_fu_481_p2 <= "0" when (tmp_30_fu_471_p4 = ap_const_lv2_0) else "1";
    overf_2_fu_495_p2 <= (p_Result_18_fu_487_p3 or overf_1_fu_481_p2);
    overf_fu_191_p2 <= (p_Result_s_fu_175_p3 xor p_Result_8_fu_183_p3);
    p_Result_10_fu_211_p3 <= x(13 downto 13);
    p_Result_11_fu_225_p3 <= x(14 downto 14);
    p_Result_12_fu_239_p3 <= x(15 downto 15);
    p_Result_18_fu_487_p3 <= p_Val2_49_fu_463_p3(19 downto 19);
    p_Result_19_fu_354_p3 <= (p_Result_s_reg_526_pp0_iter3_reg & tmp_reg_532_pp0_iter3_reg);
    p_Result_20_fu_337_p4 <= ((trunc_ln594_1_reg_537 & ap_const_lv5_0) & f_x_lsb_table_V_q0);
    p_Result_8_fu_183_p3 <= x(11 downto 11);
    p_Result_9_fu_197_p3 <= x(12 downto 12);
    p_Result_s_fu_175_p3 <= x(16 downto 16);
    p_Val2_49_fu_463_p3 <= 
        select_ln190_fu_412_p3 when (or_ln202_4_fu_459_p2(0) = '1') else 
        y_V_1_fu_449_p4;
    r_V_fu_427_p0 <= r_V_fu_427_p00(25 - 1 downto 0);
    r_V_fu_427_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_lsb_m_1_V_reg_583),50));
    r_V_fu_427_p1 <= r_V_fu_427_p10(25 - 1 downto 0);
    r_V_fu_427_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_table_V_q0),50));
    ret_V_fu_387_p2 <= std_logic_vector(unsigned(zext_ln813_4_fu_369_p1) + unsigned(zext_ln1347_fu_383_p1));
    rhs_1_fu_373_p5 <= (((trunc_ln594_1_reg_537_pp0_iter3_reg & ap_const_lv5_0) & f_x_lsb_V_reg_563_pp0_iter3_reg) & ap_const_lv1_0);
    select_ln190_fu_412_p3 <= 
        ap_const_lv22_3FFFFF when (y_V_fu_407_p2(0) = '1') else 
        ap_const_lv22_0;
    tmp_30_fu_471_p4 <= p_Val2_49_fu_463_p3(21 downto 20);
    tmp_32_fu_281_p4 <= x(6 downto 2);
    tmp_33_fu_295_p3 <= (trunc_ln594_1_fu_291_p1 & ap_const_lv3_0);
    tmp_s_fu_501_p4 <= p_Val2_49_fu_463_p3(18 downto 3);
    trunc_ln1_fu_360_p1 <= grp_fu_519_p2;
    trunc_ln1_fu_360_p4 <= trunc_ln1_fu_360_p1(42 downto 24);
    trunc_ln594_1_fu_291_p1 <= x(2 - 1 downto 0);
    trunc_ln594_fu_163_p1 <= x(8 - 1 downto 0);
    x_l_fract_fu_167_p3 <= (trunc_ln594_fu_163_p1 & ap_const_lv3_0);
    x_l_int_fu_153_p4 <= x(11 downto 8);
    xor_ln176_1_fu_219_p2 <= (p_Result_s_fu_175_p3 xor p_Result_10_fu_211_p3);
    xor_ln176_2_fu_233_p2 <= (p_Result_s_fu_175_p3 xor p_Result_11_fu_225_p3);
    xor_ln176_3_fu_247_p2 <= (p_Result_s_fu_175_p3 xor p_Result_12_fu_239_p3);
    xor_ln176_fu_205_p2 <= (p_Result_s_fu_175_p3 xor p_Result_9_fu_197_p3);
    y_V_1_fu_449_p4 <= y_l_V_fu_443_p2(24 downto 3);
    y_V_fu_407_p2 <= (p_Result_s_reg_526_pp0_iter4_reg xor ap_const_lv1_1);
    y_l_V_fu_443_p2 <= std_logic_vector(unsigned(exp_x_msb_1_table_V_q0) + unsigned(y_lo_s_V_fu_433_p4));
    y_lo_s_V_fu_433_p4 <= r_V_fu_427_p2(49 downto 25);
    zext_ln1347_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_1_fu_373_p5),20));
    zext_ln541_1_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_281_p4),64));
    zext_ln541_2_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_19_fu_354_p3),64));
    zext_ln541_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_295_p3),64));
    zext_ln813_4_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1_fu_360_p4),20));
    zext_ln813_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_387_p2),25));
end behav;
