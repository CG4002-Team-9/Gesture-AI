-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gesture_model_dense_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of gesture_model_dense_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_3B00 : STD_LOGIC_VECTOR (13 downto 0) := "11101100000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv10_3B0 : STD_LOGIC_VECTOR (9 downto 0) := "1110110000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln49_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal dense_biases_4_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_biases_4_V_ce0 : STD_LOGIC;
    signal dense_biases_4_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dense_weights_4_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_weights_4_V_ce0 : STD_LOGIC;
    signal dense_weights_4_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln51_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_390_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_390_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln49_1_fu_197_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln49_1_reg_395 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln49_1_reg_395_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln49_1_reg_395_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal ifzero_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_410_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_410_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_410_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln49_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_reg_424 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast2_fu_209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln1271_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_fu_68 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_V_fu_290_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_lhs_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_loop_init_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_init_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_init_pp0_iter3_reg : STD_LOGIC;
    signal j_fu_72 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln51_fu_233_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_76 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_80 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln49_fu_165_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln49_1_fu_191_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln49_fu_183_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_214_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln49_1_fu_205_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln52_fu_222_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln49_2_fu_275_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_348_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal dense_biases_4_V_load_cast_fu_299_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln813_2_fu_312_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dense_biases_4_V_load_cast_fu_299_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_303_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln813_2_fu_312_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal x_V_fu_316_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1649_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln7_fu_322_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_348_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_348_ce : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_178 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component gesture_model_mac_muladd_16s_7s_24s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component gesture_model_dense_4_dense_biases_4_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component gesture_model_dense_4_dense_weights_4_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component gesture_model_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    dense_biases_4_V_U : component gesture_model_dense_4_dense_biases_4_V_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_biases_4_V_address0,
        ce0 => dense_biases_4_V_ce0,
        q0 => dense_biases_4_V_q0);

    dense_weights_4_V_U : component gesture_model_dense_4_dense_weights_4_V_ROM_AUTO_1R
    generic map (
        DataWidth => 7,
        AddressRange => 15104,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_weights_4_V_address0,
        ce0 => dense_weights_4_V_ce0,
        q0 => dense_weights_4_V_q0);

    mac_muladd_16s_7s_24s_24_4_1_U32 : component gesture_model_mac_muladd_16s_7s_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_r_q0,
        din1 => dense_weights_4_V_q0,
        din2 => grp_fu_348_p2,
        ce => grp_fu_348_ce,
        dout => grp_fu_348_p3);

    flow_control_loop_pipe_U : component gesture_model_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_178)) then
                if ((icmp_ln49_fu_159_p2 = ap_const_lv1_0)) then 
                    i_fu_76 <= select_ln49_1_fu_197_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_76 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_178)) then
                if ((icmp_ln49_fu_159_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_80 <= add_ln49_fu_165_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_80 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_178)) then
                if ((icmp_ln49_fu_159_p2 = ap_const_lv1_0)) then 
                    j_fu_72 <= add_ln51_fu_233_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_72 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    lhs_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_loop_init_pp0_iter3_reg = ap_const_logic_1))) then 
                    lhs_fu_68 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                    lhs_fu_68 <= grp_fu_348_p3(23 downto 8);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_init_pp0_iter1_reg <= ap_loop_init;
                ap_loop_init_pp0_iter2_reg <= ap_loop_init_pp0_iter1_reg;
                icmp_ln51_reg_390_pp0_iter1_reg <= icmp_ln51_reg_390;
                ifzero_reg_410_pp0_iter1_reg <= ifzero_reg_410;
                select_ln49_1_reg_395_pp0_iter1_reg <= select_ln49_1_reg_395;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_init_pp0_iter3_reg <= ap_loop_init_pp0_iter2_reg;
                icmp_ln51_reg_390_pp0_iter2_reg <= icmp_ln51_reg_390_pp0_iter1_reg;
                ifzero_reg_410_pp0_iter2_reg <= ifzero_reg_410_pp0_iter1_reg;
                ifzero_reg_410_pp0_iter3_reg <= ifzero_reg_410_pp0_iter2_reg;
                select_ln49_1_reg_395_pp0_iter2_reg <= select_ln49_1_reg_395_pp0_iter1_reg;
                    zext_ln49_reg_424(4 downto 0) <= zext_ln49_fu_271_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_159_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln51_reg_390 <= icmp_ln51_fu_177_p2;
                ifzero_reg_410 <= ifzero_fu_239_p2;
                select_ln49_1_reg_395 <= select_ln49_1_fu_197_p3;
            end if;
        end if;
    end process;
    zext_ln49_reg_424(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln49_1_fu_191_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv5_1));
    add_ln49_fu_165_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv14_1));
    add_ln51_fu_233_p2 <= std_logic_vector(unsigned(select_ln49_fu_183_p3) + unsigned(ap_const_lv10_1));
    add_ln52_fu_222_p2 <= std_logic_vector(unsigned(shl_ln_fu_214_p3) + unsigned(zext_ln49_1_fu_205_p1));
    add_ln7_fu_322_p2 <= std_logic_vector(unsigned(trunc_ln_fu_303_p4) + unsigned(sext_ln813_2_fu_312_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_178_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_178 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln49_fu_159_p2, ap_start_int)
    begin
        if (((icmp_ln49_fu_159_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_76, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_80, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_72, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_lhs_load_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, lhs_fu_68, ap_loop_init_pp0_iter3_reg, grp_fu_348_p3)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0)) then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_loop_init_pp0_iter3_reg = ap_const_logic_1))) then 
                ap_sig_allocacmp_lhs_load <= ap_const_lv16_0;
            elsif ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then 
                ap_sig_allocacmp_lhs_load <= grp_fu_348_p3(23 downto 8);
            else 
                ap_sig_allocacmp_lhs_load <= lhs_fu_68;
            end if;
        else 
            ap_sig_allocacmp_lhs_load <= lhs_fu_68;
        end if; 
    end process;

    dense_biases_4_V_address0 <= zext_ln49_fu_271_p1(4 - 1 downto 0);

    dense_biases_4_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dense_biases_4_V_ce0 <= ap_const_logic_1;
        else 
            dense_biases_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_biases_4_V_load_cast_fu_299_p0 <= dense_biases_4_V_q0;
        dense_biases_4_V_load_cast_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dense_biases_4_V_load_cast_fu_299_p0),16));

    dense_weights_4_V_address0 <= zext_ln1271_fu_228_p1(14 - 1 downto 0);

    dense_weights_4_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_weights_4_V_ce0 <= ap_const_logic_1;
        else 
            dense_weights_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_348_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_348_ce <= ap_const_logic_1;
        else 
            grp_fu_348_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_348_p2 <= (select_ln49_2_fu_275_p3 & ap_const_lv8_0);
    icmp_ln1649_fu_328_p2 <= "1" when (signed(x_V_fu_316_p2) > signed(ap_const_lv16_0)) else "0";
    icmp_ln49_fu_159_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv14_3B00) else "0";
    icmp_ln51_fu_177_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv10_3B0) else "0";
    ifzero_fu_239_p2 <= "1" when (add_ln51_fu_233_p2 = ap_const_lv10_3B0) else "0";
    input_r_address0 <= j_cast2_fu_209_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_cast2_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln49_fu_183_p3),64));
    output_r_address0 <= zext_ln49_reg_424(4 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= 
        add_ln7_fu_322_p2 when (icmp_ln1649_fu_328_p2(0) = '1') else 
        ap_const_lv15_0;

    output_r_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, ifzero_reg_410_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ifzero_reg_410_pp0_iter3_reg = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln49_1_fu_197_p3 <= 
        add_ln49_1_fu_191_p2 when (icmp_ln51_fu_177_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln49_2_fu_275_p3 <= 
        ap_const_lv16_0 when (icmp_ln51_reg_390_pp0_iter2_reg(0) = '1') else 
        ap_sig_allocacmp_lhs_load;
    select_ln49_fu_183_p3 <= 
        ap_const_lv10_0 when (icmp_ln51_fu_177_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    sext_ln813_2_fu_312_p0 <= dense_biases_4_V_q0;
        sext_ln813_2_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln813_2_fu_312_p0),15));

    shl_ln_fu_214_p3 <= (select_ln49_fu_183_p3 & ap_const_lv4_0);
    sum_V_fu_290_p4 <= grp_fu_348_p3(23 downto 8);
    trunc_ln_fu_303_p4 <= grp_fu_348_p3(22 downto 8);
    x_V_fu_316_p2 <= std_logic_vector(unsigned(sum_V_fu_290_p4) + unsigned(dense_biases_4_V_load_cast_fu_299_p1));
    zext_ln1271_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_fu_222_p2),64));
    zext_ln49_1_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln49_1_fu_197_p3),14));
    zext_ln49_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln49_1_reg_395_pp0_iter2_reg),64));
end behav;
