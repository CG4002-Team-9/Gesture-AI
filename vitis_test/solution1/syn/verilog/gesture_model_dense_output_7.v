// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gesture_model_dense_output_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [3:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
output  [4:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] input_r_address0;
reg input_r_ce0;
reg[3:0] input_r_address1;
reg input_r_ce1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] input_load_reg_245;
wire    ap_CS_fsm_state2;
reg   [15:0] input_load_1_reg_250;
reg   [15:0] input_load_2_reg_265;
wire    ap_CS_fsm_state3;
reg   [15:0] input_load_3_reg_270;
reg   [15:0] input_load_4_reg_285;
wire    ap_CS_fsm_state4;
reg   [15:0] input_load_5_reg_290;
reg   [15:0] input_load_6_reg_305;
wire    ap_CS_fsm_state5;
reg   [15:0] input_load_7_reg_310;
reg   [15:0] input_load_8_reg_325;
wire    ap_CS_fsm_state6;
reg   [15:0] input_load_9_reg_330;
reg   [15:0] input_load_10_reg_345;
wire    ap_CS_fsm_state7;
reg   [15:0] input_load_11_reg_350;
reg   [15:0] input_load_12_reg_365;
wire    ap_CS_fsm_state8;
reg   [15:0] input_load_13_reg_370;
reg   [15:0] input_load_14_reg_385;
wire    ap_CS_fsm_state9;
reg   [15:0] input_load_15_reg_390;
wire    grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_start;
wire    grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_done;
wire    grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_idle;
wire    grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_ready;
wire   [4:0] grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_output_r_address0;
wire    grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_output_r_ce0;
wire    grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_output_r_we0;
wire   [15:0] grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_output_r_d0;
reg    grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_start_reg;
wire    ap_CS_fsm_state10;
reg    ap_block_state1;
reg   [9:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_start_reg = 1'b0;
end

gesture_model_dense_output_7_Pipeline_VITIS_LOOP_67_1 grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_start),
    .ap_done(grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_done),
    .ap_idle(grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_idle),
    .ap_ready(grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_ready),
    .sext_ln818(input_load_reg_245),
    .sext_ln1347(input_load_1_reg_250),
    .sext_ln1347_1(input_load_2_reg_265),
    .sext_ln1347_2(input_load_3_reg_270),
    .sext_ln1347_3(input_load_4_reg_285),
    .sext_ln1347_4(input_load_5_reg_290),
    .sext_ln1347_5(input_load_6_reg_305),
    .sext_ln1347_6(input_load_7_reg_310),
    .sext_ln1347_7(input_load_8_reg_325),
    .sext_ln1347_8(input_load_9_reg_330),
    .sext_ln1347_9(input_load_10_reg_345),
    .sext_ln1347_10(input_load_11_reg_350),
    .sext_ln1347_11(input_load_12_reg_365),
    .sext_ln1347_12(input_load_13_reg_370),
    .sext_ln1347_13(input_load_14_reg_385),
    .sext_ln1347_14(input_load_15_reg_390),
    .output_r_address0(grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_output_r_address0),
    .output_r_ce0(grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_output_r_ce0),
    .output_r_we0(grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_output_r_we0),
    .output_r_d0(grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_output_r_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state10) & (grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_start_reg <= 1'b1;
        end else if ((grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_ready == 1'b1)) begin
            grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_load_10_reg_345 <= input_r_q1;
        input_load_11_reg_350 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_load_12_reg_365 <= input_r_q1;
        input_load_13_reg_370 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_load_14_reg_385 <= input_r_q1;
        input_load_15_reg_390 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_load_1_reg_250 <= input_r_q0;
        input_load_reg_245 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_load_2_reg_265 <= input_r_q1;
        input_load_3_reg_270 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_load_4_reg_285 <= input_r_q1;
        input_load_5_reg_290 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_load_6_reg_305 <= input_r_q1;
        input_load_7_reg_310 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_load_8_reg_325 <= input_r_q1;
        input_load_9_reg_330 <= input_r_q0;
    end
end

always @ (*) begin
    if ((grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_done == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_r_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        input_r_address0 = 64'd1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_r_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        input_r_address1 = 64'd0;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_start = grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_ap_start_reg;

assign output_r_address0 = grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_output_r_address0;

assign output_r_ce0 = grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_output_r_ce0;

assign output_r_d0 = grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_output_r_d0;

assign output_r_we0 = grp_dense_output_7_Pipeline_VITIS_LOOP_67_1_fu_201_output_r_we0;

endmodule //gesture_model_dense_output_7
