// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln1273,
        sext_ln1273_1,
        sext_ln1273_2,
        sext_ln1273_3,
        sext_ln1273_4,
        sext_ln1273_5,
        sext_ln1273_6,
        sext_ln1273_7,
        sext_ln1273_8,
        sext_ln1273_9,
        sext_ln1273_10,
        sext_ln1273_11,
        sext_ln1273_12,
        sext_ln1273_13,
        sext_ln1273_14,
        sext_ln1273_15,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [23:0] sext_ln1273;
input  [23:0] sext_ln1273_1;
input  [23:0] sext_ln1273_2;
input  [23:0] sext_ln1273_3;
input  [23:0] sext_ln1273_4;
input  [23:0] sext_ln1273_5;
input  [23:0] sext_ln1273_6;
input  [23:0] sext_ln1273_7;
input  [23:0] sext_ln1273_8;
input  [23:0] sext_ln1273_9;
input  [23:0] sext_ln1273_10;
input  [23:0] sext_ln1273_11;
input  [23:0] sext_ln1273_12;
input  [23:0] sext_ln1273_13;
input  [23:0] sext_ln1273_14;
input  [23:0] sext_ln1273_15;
output  [4:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [23:0] output_r_d0;

reg ap_idle;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln109_fu_536_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [4:0] dense_1_weights_V_0_address0;
reg    dense_1_weights_V_0_ce0;
wire  signed [18:0] dense_1_weights_V_0_q0;
wire   [4:0] dense_1_weights_V_1_address0;
reg    dense_1_weights_V_1_ce0;
wire  signed [18:0] dense_1_weights_V_1_q0;
wire   [4:0] dense_1_weights_V_2_address0;
reg    dense_1_weights_V_2_ce0;
wire  signed [18:0] dense_1_weights_V_2_q0;
wire   [4:0] dense_1_weights_V_3_address0;
reg    dense_1_weights_V_3_ce0;
wire  signed [18:0] dense_1_weights_V_3_q0;
wire   [4:0] dense_1_weights_V_4_address0;
reg    dense_1_weights_V_4_ce0;
wire  signed [18:0] dense_1_weights_V_4_q0;
wire   [4:0] dense_1_weights_V_5_address0;
reg    dense_1_weights_V_5_ce0;
wire  signed [18:0] dense_1_weights_V_5_q0;
wire   [4:0] dense_1_weights_V_6_address0;
reg    dense_1_weights_V_6_ce0;
wire  signed [18:0] dense_1_weights_V_6_q0;
wire   [4:0] dense_1_weights_V_7_address0;
reg    dense_1_weights_V_7_ce0;
wire  signed [18:0] dense_1_weights_V_7_q0;
wire   [4:0] dense_1_weights_V_8_address0;
reg    dense_1_weights_V_8_ce0;
wire  signed [18:0] dense_1_weights_V_8_q0;
wire   [4:0] dense_1_weights_V_9_address0;
reg    dense_1_weights_V_9_ce0;
wire  signed [18:0] dense_1_weights_V_9_q0;
wire   [4:0] dense_1_weights_V_10_address0;
reg    dense_1_weights_V_10_ce0;
wire  signed [18:0] dense_1_weights_V_10_q0;
wire   [4:0] dense_1_weights_V_11_address0;
reg    dense_1_weights_V_11_ce0;
wire  signed [18:0] dense_1_weights_V_11_q0;
wire   [4:0] dense_1_weights_V_12_address0;
reg    dense_1_weights_V_12_ce0;
wire  signed [18:0] dense_1_weights_V_12_q0;
wire   [4:0] dense_1_weights_V_13_address0;
reg    dense_1_weights_V_13_ce0;
wire  signed [18:0] dense_1_weights_V_13_q0;
wire   [4:0] dense_1_weights_V_14_address0;
reg    dense_1_weights_V_14_ce0;
wire  signed [18:0] dense_1_weights_V_14_q0;
wire   [4:0] dense_1_weights_V_15_address0;
reg    dense_1_weights_V_15_ce0;
wire  signed [18:0] dense_1_weights_V_15_q0;
wire   [4:0] dense_1_biases_V_address0;
reg    dense_1_biases_V_ce0;
wire   [17:0] dense_1_biases_V_q0;
wire  signed [42:0] sext_ln1273_15_cast_fu_464_p1;
reg  signed [42:0] sext_ln1273_15_cast_reg_2873;
wire    ap_block_pp0_stage0_11001;
wire  signed [42:0] sext_ln1273_14_cast_fu_468_p1;
reg  signed [42:0] sext_ln1273_14_cast_reg_2878;
wire  signed [42:0] sext_ln1273_13_cast_fu_472_p1;
reg  signed [42:0] sext_ln1273_13_cast_reg_2883;
wire  signed [42:0] sext_ln1273_12_cast_fu_476_p1;
reg  signed [42:0] sext_ln1273_12_cast_reg_2888;
wire  signed [42:0] sext_ln1273_11_cast_fu_480_p1;
reg  signed [42:0] sext_ln1273_11_cast_reg_2893;
wire  signed [42:0] sext_ln1273_10_cast_fu_484_p1;
reg  signed [42:0] sext_ln1273_10_cast_reg_2898;
wire  signed [42:0] sext_ln1273_9_cast_fu_488_p1;
reg  signed [42:0] sext_ln1273_9_cast_reg_2903;
wire  signed [42:0] sext_ln1273_8_cast_fu_492_p1;
reg  signed [42:0] sext_ln1273_8_cast_reg_2908;
wire  signed [42:0] sext_ln1273_7_cast_fu_496_p1;
reg  signed [42:0] sext_ln1273_7_cast_reg_2913;
wire  signed [42:0] sext_ln1273_6_cast_fu_500_p1;
reg  signed [42:0] sext_ln1273_6_cast_reg_2918;
wire  signed [42:0] sext_ln1273_5_cast_fu_504_p1;
reg  signed [42:0] sext_ln1273_5_cast_reg_2923;
wire  signed [42:0] sext_ln1273_4_cast_fu_508_p1;
reg  signed [42:0] sext_ln1273_4_cast_reg_2928;
wire  signed [42:0] sext_ln1273_3_cast_fu_512_p1;
reg  signed [42:0] sext_ln1273_3_cast_reg_2933;
wire  signed [42:0] sext_ln1273_2_cast_fu_516_p1;
reg  signed [42:0] sext_ln1273_2_cast_reg_2938;
wire  signed [42:0] sext_ln1273_1_cast_fu_520_p1;
reg  signed [42:0] sext_ln1273_1_cast_reg_2943;
wire  signed [42:0] sext_ln1273_cast_fu_524_p1;
reg  signed [42:0] sext_ln1273_cast_reg_2948;
wire   [63:0] i_cast_fu_548_p1;
reg   [63:0] i_cast_reg_2957;
reg   [63:0] i_cast_reg_2957_pp0_iter1_reg;
reg   [63:0] i_cast_reg_2957_pp0_iter2_reg;
reg   [63:0] i_cast_reg_2957_pp0_iter3_reg;
reg   [63:0] i_cast_reg_2957_pp0_iter4_reg;
reg   [63:0] i_cast_reg_2957_pp0_iter5_reg;
reg   [63:0] i_cast_reg_2957_pp0_iter6_reg;
reg   [63:0] i_cast_reg_2957_pp0_iter7_reg;
reg   [63:0] i_cast_reg_2957_pp0_iter8_reg;
(* use_dsp48 = "no" *) wire   [42:0] add_ln1347_1_fu_848_p2;
reg   [42:0] add_ln1347_1_reg_3081;
wire   [0:0] and_ln895_2_fu_889_p2;
reg   [0:0] and_ln895_2_reg_3086;
wire   [0:0] or_ln346_2_fu_935_p2;
reg   [0:0] or_ln346_2_reg_3091;
(* use_dsp48 = "no" *) wire   [42:0] add_ln1347_4_fu_1250_p2;
reg   [42:0] add_ln1347_4_reg_3126;
reg   [0:0] tmp_33_reg_3131;
reg   [0:0] tmp_34_reg_3137;
reg   [0:0] tmp_35_reg_3143;
reg   [22:0] tmp_1_5_reg_3149;
(* use_dsp48 = "no" *) wire   [42:0] add_ln1347_7_fu_1647_p2;
reg   [42:0] add_ln1347_7_reg_3174;
reg   [0:0] tmp_42_reg_3179;
reg   [0:0] tmp_43_reg_3185;
reg   [0:0] tmp_44_reg_3191;
reg   [22:0] tmp_1_8_reg_3197;
(* use_dsp48 = "no" *) wire   [42:0] add_ln1347_10_fu_2036_p2;
reg   [42:0] add_ln1347_10_reg_3207;
reg   [0:0] tmp_51_reg_3212;
reg   [0:0] tmp_52_reg_3218;
reg   [0:0] tmp_53_reg_3224;
reg   [22:0] tmp_1_10_reg_3230;
(* use_dsp48 = "no" *) wire   [42:0] add_ln1347_13_fu_2421_p2;
reg   [42:0] add_ln1347_13_reg_3235;
reg   [0:0] tmp_60_reg_3240;
reg   [0:0] tmp_61_reg_3246;
reg   [0:0] tmp_62_reg_3252;
reg   [22:0] tmp_1_13_reg_3258;
wire    ap_block_pp0_stage0;
reg   [4:0] i_fu_130;
wire   [4:0] add_ln109_fu_542_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_2;
wire  signed [42:0] grp_fu_2766_p2;
wire   [0:0] tmp_19_fu_612_p3;
wire   [0:0] tmp_20_fu_619_p3;
wire   [0:0] tmp_fu_596_p3;
wire   [0:0] or_ln895_fu_626_p2;
wire   [0:0] xor_ln895_1_fu_632_p2;
wire   [0:0] and_ln896_fu_644_p2;
wire   [22:0] tmp_1_fu_656_p4;
wire   [0:0] icmp_ln900_1_fu_665_p2;
wire   [0:0] xor_ln896_1_fu_650_p2;
wire   [0:0] or_ln898_1_fu_671_p2;
wire   [0:0] and_ln895_fu_638_p2;
wire   [0:0] and_ln898_fu_677_p2;
wire   [0:0] or_ln346_fu_683_p2;
wire   [23:0] select_ln346_1_fu_689_p3;
wire   [23:0] trunc_ln_fu_603_p4;
wire   [23:0] select_ln346_2_fu_697_p3;
wire   [41:0] shl_ln_fu_705_p3;
wire  signed [42:0] grp_fu_2776_p2;
wire  signed [42:0] sext_ln813_fu_713_p1;
(* use_dsp48 = "no" *) wire   [42:0] add_ln1347_fu_717_p2;
wire   [0:0] tmp_22_fu_740_p3;
wire   [0:0] tmp_23_fu_748_p3;
wire   [0:0] tmp_21_fu_722_p3;
wire   [0:0] or_ln895_1_fu_756_p2;
wire   [0:0] xor_ln895_2_fu_762_p2;
wire   [0:0] and_ln896_1_fu_774_p2;
wire   [22:0] tmp_1_1_fu_786_p4;
wire   [0:0] icmp_ln900_2_fu_796_p2;
wire   [0:0] xor_ln896_2_fu_780_p2;
wire   [0:0] or_ln898_fu_802_p2;
wire   [0:0] and_ln895_1_fu_768_p2;
wire   [0:0] and_ln898_1_fu_808_p2;
wire   [0:0] or_ln346_1_fu_814_p2;
wire   [23:0] select_ln346_3_fu_820_p3;
wire   [23:0] trunc_ln818_1_fu_730_p4;
wire   [23:0] select_ln346_4_fu_828_p3;
wire   [41:0] shl_ln838_1_fu_836_p3;
wire  signed [42:0] grp_fu_2782_p2;
wire  signed [42:0] sext_ln813_1_fu_844_p1;
wire   [0:0] tmp_25_fu_861_p3;
wire   [0:0] tmp_26_fu_869_p3;
wire   [0:0] tmp_24_fu_853_p3;
wire   [0:0] or_ln895_2_fu_877_p2;
wire   [0:0] xor_ln895_3_fu_883_p2;
wire   [0:0] and_ln896_2_fu_895_p2;
wire   [22:0] tmp_1_2_fu_907_p4;
wire   [0:0] icmp_ln900_3_fu_917_p2;
wire   [0:0] xor_ln896_3_fu_901_p2;
wire   [0:0] or_ln898_2_fu_923_p2;
wire   [0:0] and_ln898_2_fu_929_p2;
wire   [23:0] select_ln346_5_fu_962_p3;
wire   [23:0] trunc_ln818_2_fu_953_p4;
wire   [23:0] select_ln346_6_fu_969_p3;
wire   [41:0] shl_ln838_2_fu_976_p3;
wire  signed [42:0] grp_fu_2788_p2;
wire  signed [42:0] sext_ln813_2_fu_984_p1;
(* use_dsp48 = "no" *) wire   [42:0] add_ln1347_2_fu_988_p2;
wire   [0:0] tmp_28_fu_1011_p3;
wire   [0:0] tmp_29_fu_1019_p3;
wire   [0:0] tmp_27_fu_993_p3;
wire   [0:0] or_ln895_3_fu_1027_p2;
wire   [0:0] xor_ln895_4_fu_1033_p2;
wire   [0:0] and_ln896_3_fu_1045_p2;
wire   [22:0] tmp_1_3_fu_1057_p4;
wire   [0:0] icmp_ln900_4_fu_1067_p2;
wire   [0:0] xor_ln896_4_fu_1051_p2;
wire   [0:0] or_ln898_3_fu_1073_p2;
wire   [0:0] and_ln895_3_fu_1039_p2;
wire   [0:0] and_ln898_3_fu_1079_p2;
wire   [0:0] or_ln346_3_fu_1085_p2;
wire   [23:0] select_ln346_7_fu_1091_p3;
wire   [23:0] trunc_ln818_3_fu_1001_p4;
wire   [23:0] select_ln346_8_fu_1099_p3;
wire   [41:0] shl_ln838_3_fu_1107_p3;
wire  signed [42:0] grp_fu_2794_p2;
wire  signed [42:0] sext_ln813_3_fu_1115_p1;
(* use_dsp48 = "no" *) wire   [42:0] add_ln1347_3_fu_1119_p2;
wire   [0:0] tmp_31_fu_1142_p3;
wire   [0:0] tmp_32_fu_1150_p3;
wire   [0:0] tmp_30_fu_1124_p3;
wire   [0:0] or_ln895_4_fu_1158_p2;
wire   [0:0] xor_ln895_5_fu_1164_p2;
wire   [0:0] and_ln896_4_fu_1176_p2;
wire   [22:0] tmp_1_4_fu_1188_p4;
wire   [0:0] icmp_ln900_5_fu_1198_p2;
wire   [0:0] xor_ln896_5_fu_1182_p2;
wire   [0:0] or_ln898_4_fu_1204_p2;
wire   [0:0] and_ln895_4_fu_1170_p2;
wire   [0:0] and_ln898_4_fu_1210_p2;
wire   [0:0] or_ln346_4_fu_1216_p2;
wire   [23:0] select_ln346_9_fu_1222_p3;
wire   [23:0] trunc_ln818_4_fu_1132_p4;
wire   [23:0] select_ln346_10_fu_1230_p3;
wire   [41:0] shl_ln838_4_fu_1238_p3;
wire  signed [42:0] grp_fu_2800_p2;
wire  signed [42:0] sext_ln813_4_fu_1246_p1;
wire   [0:0] or_ln895_5_fu_1310_p2;
wire   [0:0] xor_ln895_6_fu_1314_p2;
wire   [0:0] and_ln896_5_fu_1325_p2;
wire   [0:0] icmp_ln900_6_fu_1335_p2;
wire   [0:0] xor_ln896_6_fu_1329_p2;
wire   [0:0] or_ln898_5_fu_1340_p2;
wire   [0:0] and_ln895_5_fu_1319_p2;
wire   [0:0] and_ln898_5_fu_1346_p2;
wire   [0:0] or_ln346_5_fu_1351_p2;
wire   [23:0] select_ln346_11_fu_1357_p3;
wire   [23:0] trunc_ln818_5_fu_1301_p4;
wire   [23:0] select_ln346_12_fu_1365_p3;
wire   [41:0] shl_ln838_5_fu_1373_p3;
wire  signed [42:0] grp_fu_2806_p2;
wire  signed [42:0] sext_ln813_5_fu_1381_p1;
(* use_dsp48 = "no" *) wire   [42:0] add_ln1347_5_fu_1385_p2;
wire   [0:0] tmp_37_fu_1408_p3;
wire   [0:0] tmp_38_fu_1416_p3;
wire   [0:0] tmp_36_fu_1390_p3;
wire   [0:0] or_ln895_6_fu_1424_p2;
wire   [0:0] xor_ln895_7_fu_1430_p2;
wire   [0:0] and_ln896_6_fu_1442_p2;
wire   [22:0] tmp_1_6_fu_1454_p4;
wire   [0:0] icmp_ln900_7_fu_1464_p2;
wire   [0:0] xor_ln896_7_fu_1448_p2;
wire   [0:0] or_ln898_6_fu_1470_p2;
wire   [0:0] and_ln895_6_fu_1436_p2;
wire   [0:0] and_ln898_6_fu_1476_p2;
wire   [0:0] or_ln346_6_fu_1482_p2;
wire   [23:0] select_ln346_13_fu_1488_p3;
wire   [23:0] trunc_ln818_6_fu_1398_p4;
wire   [23:0] select_ln346_14_fu_1496_p3;
wire   [41:0] shl_ln838_6_fu_1504_p3;
wire  signed [42:0] grp_fu_2812_p2;
wire  signed [42:0] sext_ln813_6_fu_1512_p1;
(* use_dsp48 = "no" *) wire   [42:0] add_ln1347_6_fu_1516_p2;
wire   [0:0] tmp_40_fu_1539_p3;
wire   [0:0] tmp_41_fu_1547_p3;
wire   [0:0] tmp_39_fu_1521_p3;
wire   [0:0] or_ln895_7_fu_1555_p2;
wire   [0:0] xor_ln895_8_fu_1561_p2;
wire   [0:0] and_ln896_7_fu_1573_p2;
wire   [22:0] tmp_1_7_fu_1585_p4;
wire   [0:0] icmp_ln900_8_fu_1595_p2;
wire   [0:0] xor_ln896_8_fu_1579_p2;
wire   [0:0] or_ln898_7_fu_1601_p2;
wire   [0:0] and_ln895_7_fu_1567_p2;
wire   [0:0] and_ln898_7_fu_1607_p2;
wire   [0:0] or_ln346_7_fu_1613_p2;
wire   [23:0] select_ln346_15_fu_1619_p3;
wire   [23:0] trunc_ln818_7_fu_1529_p4;
wire   [23:0] select_ln346_16_fu_1627_p3;
wire   [41:0] shl_ln838_7_fu_1635_p3;
wire  signed [42:0] grp_fu_2818_p2;
wire  signed [42:0] sext_ln813_7_fu_1643_p1;
wire   [0:0] or_ln895_8_fu_1699_p2;
wire   [0:0] xor_ln895_9_fu_1703_p2;
wire   [0:0] and_ln896_8_fu_1714_p2;
wire   [0:0] icmp_ln900_9_fu_1724_p2;
wire   [0:0] xor_ln896_9_fu_1718_p2;
wire   [0:0] or_ln898_8_fu_1729_p2;
wire   [0:0] and_ln895_8_fu_1708_p2;
wire   [0:0] and_ln898_8_fu_1735_p2;
wire   [0:0] or_ln346_8_fu_1740_p2;
wire   [23:0] select_ln346_17_fu_1746_p3;
wire   [23:0] trunc_ln818_8_fu_1690_p4;
wire   [23:0] select_ln346_18_fu_1754_p3;
wire   [41:0] shl_ln838_8_fu_1762_p3;
wire  signed [42:0] grp_fu_2824_p2;
wire  signed [42:0] sext_ln813_8_fu_1770_p1;
(* use_dsp48 = "no" *) wire   [42:0] add_ln1347_8_fu_1774_p2;
wire   [0:0] tmp_46_fu_1797_p3;
wire   [0:0] tmp_47_fu_1805_p3;
wire   [0:0] tmp_45_fu_1779_p3;
wire   [0:0] or_ln895_9_fu_1813_p2;
wire   [0:0] xor_ln895_10_fu_1819_p2;
wire   [0:0] and_ln896_9_fu_1831_p2;
wire   [22:0] tmp_1_9_fu_1843_p4;
wire   [0:0] icmp_ln900_10_fu_1853_p2;
wire   [0:0] xor_ln896_10_fu_1837_p2;
wire   [0:0] or_ln898_9_fu_1859_p2;
wire   [0:0] and_ln895_9_fu_1825_p2;
wire   [0:0] and_ln898_9_fu_1865_p2;
wire   [0:0] or_ln346_9_fu_1871_p2;
wire   [23:0] select_ln346_19_fu_1877_p3;
wire   [23:0] trunc_ln818_9_fu_1787_p4;
wire   [23:0] select_ln346_20_fu_1885_p3;
wire   [41:0] shl_ln838_9_fu_1893_p3;
wire  signed [42:0] grp_fu_2830_p2;
wire  signed [42:0] sext_ln813_9_fu_1901_p1;
(* use_dsp48 = "no" *) wire   [42:0] add_ln1347_9_fu_1905_p2;
wire   [0:0] tmp_49_fu_1928_p3;
wire   [0:0] tmp_50_fu_1936_p3;
wire   [0:0] tmp_48_fu_1910_p3;
wire   [0:0] or_ln895_10_fu_1944_p2;
wire   [0:0] xor_ln895_11_fu_1950_p2;
wire   [0:0] and_ln896_10_fu_1962_p2;
wire   [22:0] tmp_1_s_fu_1974_p4;
wire   [0:0] icmp_ln900_11_fu_1984_p2;
wire   [0:0] xor_ln896_11_fu_1968_p2;
wire   [0:0] or_ln898_10_fu_1990_p2;
wire   [0:0] and_ln895_10_fu_1956_p2;
wire   [0:0] and_ln898_10_fu_1996_p2;
wire   [0:0] or_ln346_10_fu_2002_p2;
wire   [23:0] select_ln346_21_fu_2008_p3;
wire   [23:0] trunc_ln818_s_fu_1918_p4;
wire   [23:0] select_ln346_22_fu_2016_p3;
wire   [41:0] shl_ln838_s_fu_2024_p3;
wire  signed [42:0] grp_fu_2836_p2;
wire  signed [42:0] sext_ln813_10_fu_2032_p1;
wire   [0:0] or_ln895_11_fu_2084_p2;
wire   [0:0] xor_ln895_12_fu_2088_p2;
wire   [0:0] and_ln896_11_fu_2099_p2;
wire   [0:0] icmp_ln900_12_fu_2109_p2;
wire   [0:0] xor_ln896_12_fu_2103_p2;
wire   [0:0] or_ln898_11_fu_2114_p2;
wire   [0:0] and_ln895_11_fu_2093_p2;
wire   [0:0] and_ln898_11_fu_2120_p2;
wire   [0:0] or_ln346_11_fu_2125_p2;
wire   [23:0] select_ln346_23_fu_2131_p3;
wire   [23:0] trunc_ln818_10_fu_2075_p4;
wire   [23:0] select_ln346_24_fu_2139_p3;
wire   [41:0] shl_ln838_10_fu_2147_p3;
wire  signed [42:0] grp_fu_2842_p2;
wire  signed [42:0] sext_ln813_11_fu_2155_p1;
(* use_dsp48 = "no" *) wire   [42:0] add_ln1347_11_fu_2159_p2;
wire   [0:0] tmp_55_fu_2182_p3;
wire   [0:0] tmp_56_fu_2190_p3;
wire   [0:0] tmp_54_fu_2164_p3;
wire   [0:0] or_ln895_12_fu_2198_p2;
wire   [0:0] xor_ln895_13_fu_2204_p2;
wire   [0:0] and_ln896_12_fu_2216_p2;
wire   [22:0] tmp_1_11_fu_2228_p4;
wire   [0:0] icmp_ln900_13_fu_2238_p2;
wire   [0:0] xor_ln896_13_fu_2222_p2;
wire   [0:0] or_ln898_12_fu_2244_p2;
wire   [0:0] and_ln895_12_fu_2210_p2;
wire   [0:0] and_ln898_12_fu_2250_p2;
wire   [0:0] or_ln346_12_fu_2256_p2;
wire   [23:0] select_ln346_25_fu_2262_p3;
wire   [23:0] trunc_ln818_11_fu_2172_p4;
wire   [23:0] select_ln346_26_fu_2270_p3;
wire   [41:0] shl_ln838_11_fu_2278_p3;
wire  signed [42:0] grp_fu_2848_p2;
wire  signed [42:0] sext_ln813_12_fu_2286_p1;
(* use_dsp48 = "no" *) wire   [42:0] add_ln1347_12_fu_2290_p2;
wire   [0:0] tmp_58_fu_2313_p3;
wire   [0:0] tmp_59_fu_2321_p3;
wire   [0:0] tmp_57_fu_2295_p3;
wire   [0:0] or_ln895_13_fu_2329_p2;
wire   [0:0] xor_ln895_14_fu_2335_p2;
wire   [0:0] and_ln896_13_fu_2347_p2;
wire   [22:0] tmp_1_12_fu_2359_p4;
wire   [0:0] icmp_ln900_14_fu_2369_p2;
wire   [0:0] xor_ln896_14_fu_2353_p2;
wire   [0:0] or_ln898_13_fu_2375_p2;
wire   [0:0] and_ln895_13_fu_2341_p2;
wire   [0:0] and_ln898_13_fu_2381_p2;
wire   [0:0] or_ln346_13_fu_2387_p2;
wire   [23:0] select_ln346_27_fu_2393_p3;
wire   [23:0] trunc_ln818_12_fu_2303_p4;
wire   [23:0] select_ln346_28_fu_2401_p3;
wire   [41:0] shl_ln838_12_fu_2409_p3;
wire  signed [42:0] grp_fu_2854_p2;
wire  signed [42:0] sext_ln813_13_fu_2417_p1;
wire   [0:0] or_ln895_14_fu_2469_p2;
wire   [0:0] xor_ln895_15_fu_2473_p2;
wire   [0:0] and_ln896_14_fu_2484_p2;
wire   [0:0] icmp_ln900_15_fu_2494_p2;
wire   [0:0] xor_ln896_15_fu_2488_p2;
wire   [0:0] or_ln898_14_fu_2499_p2;
wire   [0:0] and_ln895_14_fu_2478_p2;
wire   [0:0] and_ln898_14_fu_2505_p2;
wire   [0:0] or_ln346_14_fu_2510_p2;
wire   [23:0] select_ln346_29_fu_2516_p3;
wire   [23:0] trunc_ln818_13_fu_2460_p4;
wire   [23:0] select_ln346_30_fu_2524_p3;
wire   [41:0] shl_ln838_13_fu_2532_p3;
wire  signed [42:0] grp_fu_2860_p2;
wire  signed [42:0] sext_ln813_14_fu_2540_p1;
(* use_dsp48 = "no" *) wire   [42:0] add_ln1347_14_fu_2544_p2;
wire   [0:0] tmp_64_fu_2567_p3;
wire   [0:0] tmp_65_fu_2575_p3;
wire   [0:0] tmp_63_fu_2549_p3;
wire   [0:0] or_ln895_15_fu_2583_p2;
wire   [0:0] xor_ln895_16_fu_2589_p2;
wire   [0:0] and_ln896_15_fu_2601_p2;
wire   [22:0] tmp_1_14_fu_2613_p4;
wire   [0:0] icmp_ln900_16_fu_2623_p2;
wire   [0:0] xor_ln896_16_fu_2607_p2;
wire   [0:0] or_ln898_15_fu_2629_p2;
wire   [0:0] and_ln895_15_fu_2595_p2;
wire   [0:0] and_ln898_15_fu_2635_p2;
wire   [0:0] or_ln346_15_fu_2649_p2;
wire   [23:0] select_ln346_31_fu_2641_p3;
wire   [23:0] trunc_ln818_14_fu_2557_p4;
wire  signed [23:0] lhs_fu_2655_p3;
wire  signed [17:0] dense_1_biases_V_load_cast_fu_2667_p0;
wire  signed [17:0] sext_ln813_16_fu_2671_p0;
wire  signed [24:0] sext_ln813_15_fu_2663_p1;
wire  signed [24:0] sext_ln813_16_fu_2671_p1;
wire   [24:0] ret_V_fu_2675_p2;
wire  signed [23:0] dense_1_biases_V_load_cast_fu_2667_p1;
wire   [23:0] p_Val2_13_fu_2689_p2;
wire   [0:0] p_Result_s_fu_2681_p3;
wire   [0:0] p_Result_35_fu_2695_p3;
wire   [0:0] xor_ln895_fu_2703_p2;
wire   [22:0] trunc_ln900_fu_2721_p1;
wire   [0:0] icmp_ln900_fu_2725_p2;
wire   [0:0] xor_ln896_fu_2715_p2;
wire   [0:0] or_ln898_16_fu_2731_p2;
wire   [0:0] overflow_fu_2709_p2;
wire   [0:0] underflow_fu_2737_p2;
wire   [0:0] or_ln346_16_fu_2751_p2;
wire   [23:0] select_ln346_33_fu_2743_p3;
wire  signed [23:0] grp_fu_2766_p0;
wire  signed [23:0] grp_fu_2776_p0;
wire  signed [23:0] grp_fu_2782_p0;
wire  signed [23:0] grp_fu_2788_p0;
wire  signed [23:0] grp_fu_2794_p0;
wire  signed [23:0] grp_fu_2800_p0;
wire  signed [23:0] grp_fu_2806_p0;
wire  signed [23:0] grp_fu_2812_p0;
wire  signed [23:0] grp_fu_2818_p0;
wire  signed [23:0] grp_fu_2824_p0;
wire  signed [23:0] grp_fu_2830_p0;
wire  signed [23:0] grp_fu_2836_p0;
wire  signed [23:0] grp_fu_2842_p0;
wire  signed [23:0] grp_fu_2848_p0;
wire  signed [23:0] grp_fu_2854_p0;
wire  signed [23:0] grp_fu_2860_p0;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_0_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_0_address0),
    .ce0(dense_1_weights_V_0_ce0),
    .q0(dense_1_weights_V_0_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_1_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_1_address0),
    .ce0(dense_1_weights_V_1_ce0),
    .q0(dense_1_weights_V_1_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_2_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_2_address0),
    .ce0(dense_1_weights_V_2_ce0),
    .q0(dense_1_weights_V_2_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_3_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_3_address0),
    .ce0(dense_1_weights_V_3_ce0),
    .q0(dense_1_weights_V_3_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_4_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_4_address0),
    .ce0(dense_1_weights_V_4_ce0),
    .q0(dense_1_weights_V_4_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_5_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_5_address0),
    .ce0(dense_1_weights_V_5_ce0),
    .q0(dense_1_weights_V_5_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_6_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_6_address0),
    .ce0(dense_1_weights_V_6_ce0),
    .q0(dense_1_weights_V_6_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_7_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_7_address0),
    .ce0(dense_1_weights_V_7_ce0),
    .q0(dense_1_weights_V_7_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_8_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_8_address0),
    .ce0(dense_1_weights_V_8_ce0),
    .q0(dense_1_weights_V_8_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_9_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_9_address0),
    .ce0(dense_1_weights_V_9_ce0),
    .q0(dense_1_weights_V_9_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_10_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_10_address0),
    .ce0(dense_1_weights_V_10_ce0),
    .q0(dense_1_weights_V_10_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_11_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_11_address0),
    .ce0(dense_1_weights_V_11_ce0),
    .q0(dense_1_weights_V_11_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_12_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_12_address0),
    .ce0(dense_1_weights_V_12_ce0),
    .q0(dense_1_weights_V_12_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_13_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_13_address0),
    .ce0(dense_1_weights_V_13_ce0),
    .q0(dense_1_weights_V_13_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_14_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_14_address0),
    .ce0(dense_1_weights_V_14_ce0),
    .q0(dense_1_weights_V_14_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_weights_V_15_ROM_AUTO_1R #(
    .DataWidth( 19 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_weights_V_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_15_address0),
    .ce0(dense_1_weights_V_15_ce0),
    .q0(dense_1_weights_V_15_q0)
);

gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1_dense_1_biases_V_ROM_AUTO_1R #(
    .DataWidth( 18 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
dense_1_biases_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_biases_V_address0),
    .ce0(dense_1_biases_V_ce0),
    .q0(dense_1_biases_V_q0)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2766_p0),
    .din1(dense_1_weights_V_0_q0),
    .ce(1'b1),
    .dout(grp_fu_2766_p2)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2776_p0),
    .din1(dense_1_weights_V_1_q0),
    .ce(1'b1),
    .dout(grp_fu_2776_p2)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2782_p0),
    .din1(dense_1_weights_V_2_q0),
    .ce(1'b1),
    .dout(grp_fu_2782_p2)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2788_p0),
    .din1(dense_1_weights_V_3_q0),
    .ce(1'b1),
    .dout(grp_fu_2788_p2)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2794_p0),
    .din1(dense_1_weights_V_4_q0),
    .ce(1'b1),
    .dout(grp_fu_2794_p2)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2800_p0),
    .din1(dense_1_weights_V_5_q0),
    .ce(1'b1),
    .dout(grp_fu_2800_p2)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2806_p0),
    .din1(dense_1_weights_V_6_q0),
    .ce(1'b1),
    .dout(grp_fu_2806_p2)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2812_p0),
    .din1(dense_1_weights_V_7_q0),
    .ce(1'b1),
    .dout(grp_fu_2812_p2)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2818_p0),
    .din1(dense_1_weights_V_8_q0),
    .ce(1'b1),
    .dout(grp_fu_2818_p2)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2824_p0),
    .din1(dense_1_weights_V_9_q0),
    .ce(1'b1),
    .dout(grp_fu_2824_p2)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2830_p0),
    .din1(dense_1_weights_V_10_q0),
    .ce(1'b1),
    .dout(grp_fu_2830_p2)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2836_p0),
    .din1(dense_1_weights_V_11_q0),
    .ce(1'b1),
    .dout(grp_fu_2836_p2)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2842_p0),
    .din1(dense_1_weights_V_12_q0),
    .ce(1'b1),
    .dout(grp_fu_2842_p2)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2848_p0),
    .din1(dense_1_weights_V_13_q0),
    .ce(1'b1),
    .dout(grp_fu_2848_p2)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U69(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2854_p0),
    .din1(dense_1_weights_V_14_q0),
    .ce(1'b1),
    .dout(grp_fu_2854_p2)
);

gesture_model_mul_mul_24s_19s_43_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 43 ))
mul_mul_24s_19s_43_4_1_U70(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2860_p0),
    .din1(dense_1_weights_V_15_q0),
    .ce(1'b1),
    .dout(grp_fu_2860_p2)
);

gesture_model_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln109_fu_536_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_130 <= add_ln109_fu_542_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_130 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln1347_10_reg_3207 <= add_ln1347_10_fu_2036_p2;
        add_ln1347_13_reg_3235 <= add_ln1347_13_fu_2421_p2;
        add_ln1347_1_reg_3081 <= add_ln1347_1_fu_848_p2;
        add_ln1347_4_reg_3126 <= add_ln1347_4_fu_1250_p2;
        add_ln1347_7_reg_3174 <= add_ln1347_7_fu_1647_p2;
        and_ln895_2_reg_3086 <= and_ln895_2_fu_889_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        i_cast_reg_2957_pp0_iter2_reg[4 : 0] <= i_cast_reg_2957_pp0_iter1_reg[4 : 0];
        i_cast_reg_2957_pp0_iter3_reg[4 : 0] <= i_cast_reg_2957_pp0_iter2_reg[4 : 0];
        i_cast_reg_2957_pp0_iter4_reg[4 : 0] <= i_cast_reg_2957_pp0_iter3_reg[4 : 0];
        i_cast_reg_2957_pp0_iter5_reg[4 : 0] <= i_cast_reg_2957_pp0_iter4_reg[4 : 0];
        i_cast_reg_2957_pp0_iter6_reg[4 : 0] <= i_cast_reg_2957_pp0_iter5_reg[4 : 0];
        i_cast_reg_2957_pp0_iter7_reg[4 : 0] <= i_cast_reg_2957_pp0_iter6_reg[4 : 0];
        i_cast_reg_2957_pp0_iter8_reg[4 : 0] <= i_cast_reg_2957_pp0_iter7_reg[4 : 0];
        or_ln346_2_reg_3091 <= or_ln346_2_fu_935_p2;
        tmp_1_10_reg_3230 <= {{add_ln1347_10_fu_2036_p2[40:18]}};
        tmp_1_13_reg_3258 <= {{add_ln1347_13_fu_2421_p2[40:18]}};
        tmp_1_5_reg_3149 <= {{add_ln1347_4_fu_1250_p2[40:18]}};
        tmp_1_8_reg_3197 <= {{add_ln1347_7_fu_1647_p2[40:18]}};
        tmp_33_reg_3131 <= add_ln1347_4_fu_1250_p2[32'd42];
        tmp_34_reg_3137 <= add_ln1347_4_fu_1250_p2[32'd41];
        tmp_35_reg_3143 <= add_ln1347_4_fu_1250_p2[32'd42];
        tmp_42_reg_3179 <= add_ln1347_7_fu_1647_p2[32'd42];
        tmp_43_reg_3185 <= add_ln1347_7_fu_1647_p2[32'd41];
        tmp_44_reg_3191 <= add_ln1347_7_fu_1647_p2[32'd42];
        tmp_51_reg_3212 <= add_ln1347_10_fu_2036_p2[32'd42];
        tmp_52_reg_3218 <= add_ln1347_10_fu_2036_p2[32'd41];
        tmp_53_reg_3224 <= add_ln1347_10_fu_2036_p2[32'd42];
        tmp_60_reg_3240 <= add_ln1347_13_fu_2421_p2[32'd42];
        tmp_61_reg_3246 <= add_ln1347_13_fu_2421_p2[32'd41];
        tmp_62_reg_3252 <= add_ln1347_13_fu_2421_p2[32'd42];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_cast_reg_2957_pp0_iter1_reg[4 : 0] <= i_cast_reg_2957[4 : 0];
        sext_ln1273_10_cast_reg_2898 <= sext_ln1273_10_cast_fu_484_p1;
        sext_ln1273_11_cast_reg_2893 <= sext_ln1273_11_cast_fu_480_p1;
        sext_ln1273_12_cast_reg_2888 <= sext_ln1273_12_cast_fu_476_p1;
        sext_ln1273_13_cast_reg_2883 <= sext_ln1273_13_cast_fu_472_p1;
        sext_ln1273_14_cast_reg_2878 <= sext_ln1273_14_cast_fu_468_p1;
        sext_ln1273_15_cast_reg_2873 <= sext_ln1273_15_cast_fu_464_p1;
        sext_ln1273_1_cast_reg_2943 <= sext_ln1273_1_cast_fu_520_p1;
        sext_ln1273_2_cast_reg_2938 <= sext_ln1273_2_cast_fu_516_p1;
        sext_ln1273_3_cast_reg_2933 <= sext_ln1273_3_cast_fu_512_p1;
        sext_ln1273_4_cast_reg_2928 <= sext_ln1273_4_cast_fu_508_p1;
        sext_ln1273_5_cast_reg_2923 <= sext_ln1273_5_cast_fu_504_p1;
        sext_ln1273_6_cast_reg_2918 <= sext_ln1273_6_cast_fu_500_p1;
        sext_ln1273_7_cast_reg_2913 <= sext_ln1273_7_cast_fu_496_p1;
        sext_ln1273_8_cast_reg_2908 <= sext_ln1273_8_cast_fu_492_p1;
        sext_ln1273_9_cast_reg_2903 <= sext_ln1273_9_cast_fu_488_p1;
        sext_ln1273_cast_reg_2948 <= sext_ln1273_cast_fu_524_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_536_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast_reg_2957[4 : 0] <= i_cast_fu_548_p1[4 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln109_fu_536_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_130;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        dense_1_biases_V_ce0 = 1'b1;
    end else begin
        dense_1_biases_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_1_weights_V_0_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dense_1_weights_V_10_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dense_1_weights_V_11_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        dense_1_weights_V_12_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        dense_1_weights_V_13_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        dense_1_weights_V_14_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        dense_1_weights_V_15_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_1_weights_V_1_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_1_weights_V_2_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_1_weights_V_3_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_1_weights_V_4_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_1_weights_V_5_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dense_1_weights_V_6_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dense_1_weights_V_7_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dense_1_weights_V_8_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dense_1_weights_V_9_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln109_fu_542_p2 = (ap_sig_allocacmp_i_2 + 5'd1);

assign add_ln1347_10_fu_2036_p2 = ($signed(grp_fu_2836_p2) + $signed(sext_ln813_10_fu_2032_p1));

assign add_ln1347_11_fu_2159_p2 = ($signed(grp_fu_2842_p2) + $signed(sext_ln813_11_fu_2155_p1));

assign add_ln1347_12_fu_2290_p2 = ($signed(grp_fu_2848_p2) + $signed(sext_ln813_12_fu_2286_p1));

assign add_ln1347_13_fu_2421_p2 = ($signed(grp_fu_2854_p2) + $signed(sext_ln813_13_fu_2417_p1));

assign add_ln1347_14_fu_2544_p2 = ($signed(grp_fu_2860_p2) + $signed(sext_ln813_14_fu_2540_p1));

assign add_ln1347_1_fu_848_p2 = ($signed(grp_fu_2782_p2) + $signed(sext_ln813_1_fu_844_p1));

assign add_ln1347_2_fu_988_p2 = ($signed(grp_fu_2788_p2) + $signed(sext_ln813_2_fu_984_p1));

assign add_ln1347_3_fu_1119_p2 = ($signed(grp_fu_2794_p2) + $signed(sext_ln813_3_fu_1115_p1));

assign add_ln1347_4_fu_1250_p2 = ($signed(grp_fu_2800_p2) + $signed(sext_ln813_4_fu_1246_p1));

assign add_ln1347_5_fu_1385_p2 = ($signed(grp_fu_2806_p2) + $signed(sext_ln813_5_fu_1381_p1));

assign add_ln1347_6_fu_1516_p2 = ($signed(grp_fu_2812_p2) + $signed(sext_ln813_6_fu_1512_p1));

assign add_ln1347_7_fu_1647_p2 = ($signed(grp_fu_2818_p2) + $signed(sext_ln813_7_fu_1643_p1));

assign add_ln1347_8_fu_1774_p2 = ($signed(grp_fu_2824_p2) + $signed(sext_ln813_8_fu_1770_p1));

assign add_ln1347_9_fu_1905_p2 = ($signed(grp_fu_2830_p2) + $signed(sext_ln813_9_fu_1901_p1));

assign add_ln1347_fu_717_p2 = ($signed(grp_fu_2776_p2) + $signed(sext_ln813_fu_713_p1));

assign and_ln895_10_fu_1956_p2 = (xor_ln895_11_fu_1950_p2 & or_ln895_10_fu_1944_p2);

assign and_ln895_11_fu_2093_p2 = (xor_ln895_12_fu_2088_p2 & or_ln895_11_fu_2084_p2);

assign and_ln895_12_fu_2210_p2 = (xor_ln895_13_fu_2204_p2 & or_ln895_12_fu_2198_p2);

assign and_ln895_13_fu_2341_p2 = (xor_ln895_14_fu_2335_p2 & or_ln895_13_fu_2329_p2);

assign and_ln895_14_fu_2478_p2 = (xor_ln895_15_fu_2473_p2 & or_ln895_14_fu_2469_p2);

assign and_ln895_15_fu_2595_p2 = (xor_ln895_16_fu_2589_p2 & or_ln895_15_fu_2583_p2);

assign and_ln895_1_fu_768_p2 = (xor_ln895_2_fu_762_p2 & or_ln895_1_fu_756_p2);

assign and_ln895_2_fu_889_p2 = (xor_ln895_3_fu_883_p2 & or_ln895_2_fu_877_p2);

assign and_ln895_3_fu_1039_p2 = (xor_ln895_4_fu_1033_p2 & or_ln895_3_fu_1027_p2);

assign and_ln895_4_fu_1170_p2 = (xor_ln895_5_fu_1164_p2 & or_ln895_4_fu_1158_p2);

assign and_ln895_5_fu_1319_p2 = (xor_ln895_6_fu_1314_p2 & or_ln895_5_fu_1310_p2);

assign and_ln895_6_fu_1436_p2 = (xor_ln895_7_fu_1430_p2 & or_ln895_6_fu_1424_p2);

assign and_ln895_7_fu_1567_p2 = (xor_ln895_8_fu_1561_p2 & or_ln895_7_fu_1555_p2);

assign and_ln895_8_fu_1708_p2 = (xor_ln895_9_fu_1703_p2 & or_ln895_8_fu_1699_p2);

assign and_ln895_9_fu_1825_p2 = (xor_ln895_10_fu_1819_p2 & or_ln895_9_fu_1813_p2);

assign and_ln895_fu_638_p2 = (xor_ln895_1_fu_632_p2 & or_ln895_fu_626_p2);

assign and_ln896_10_fu_1962_p2 = (tmp_50_fu_1936_p3 & tmp_49_fu_1928_p3);

assign and_ln896_11_fu_2099_p2 = (tmp_53_reg_3224 & tmp_52_reg_3218);

assign and_ln896_12_fu_2216_p2 = (tmp_56_fu_2190_p3 & tmp_55_fu_2182_p3);

assign and_ln896_13_fu_2347_p2 = (tmp_59_fu_2321_p3 & tmp_58_fu_2313_p3);

assign and_ln896_14_fu_2484_p2 = (tmp_62_reg_3252 & tmp_61_reg_3246);

assign and_ln896_15_fu_2601_p2 = (tmp_65_fu_2575_p3 & tmp_64_fu_2567_p3);

assign and_ln896_1_fu_774_p2 = (tmp_23_fu_748_p3 & tmp_22_fu_740_p3);

assign and_ln896_2_fu_895_p2 = (tmp_26_fu_869_p3 & tmp_25_fu_861_p3);

assign and_ln896_3_fu_1045_p2 = (tmp_29_fu_1019_p3 & tmp_28_fu_1011_p3);

assign and_ln896_4_fu_1176_p2 = (tmp_32_fu_1150_p3 & tmp_31_fu_1142_p3);

assign and_ln896_5_fu_1325_p2 = (tmp_35_reg_3143 & tmp_34_reg_3137);

assign and_ln896_6_fu_1442_p2 = (tmp_38_fu_1416_p3 & tmp_37_fu_1408_p3);

assign and_ln896_7_fu_1573_p2 = (tmp_41_fu_1547_p3 & tmp_40_fu_1539_p3);

assign and_ln896_8_fu_1714_p2 = (tmp_44_reg_3191 & tmp_43_reg_3185);

assign and_ln896_9_fu_1831_p2 = (tmp_47_fu_1805_p3 & tmp_46_fu_1797_p3);

assign and_ln896_fu_644_p2 = (tmp_20_fu_619_p3 & tmp_19_fu_612_p3);

assign and_ln898_10_fu_1996_p2 = (tmp_48_fu_1910_p3 & or_ln898_10_fu_1990_p2);

assign and_ln898_11_fu_2120_p2 = (tmp_51_reg_3212 & or_ln898_11_fu_2114_p2);

assign and_ln898_12_fu_2250_p2 = (tmp_54_fu_2164_p3 & or_ln898_12_fu_2244_p2);

assign and_ln898_13_fu_2381_p2 = (tmp_57_fu_2295_p3 & or_ln898_13_fu_2375_p2);

assign and_ln898_14_fu_2505_p2 = (tmp_60_reg_3240 & or_ln898_14_fu_2499_p2);

assign and_ln898_15_fu_2635_p2 = (tmp_63_fu_2549_p3 & or_ln898_15_fu_2629_p2);

assign and_ln898_1_fu_808_p2 = (tmp_21_fu_722_p3 & or_ln898_fu_802_p2);

assign and_ln898_2_fu_929_p2 = (tmp_24_fu_853_p3 & or_ln898_2_fu_923_p2);

assign and_ln898_3_fu_1079_p2 = (tmp_27_fu_993_p3 & or_ln898_3_fu_1073_p2);

assign and_ln898_4_fu_1210_p2 = (tmp_30_fu_1124_p3 & or_ln898_4_fu_1204_p2);

assign and_ln898_5_fu_1346_p2 = (tmp_33_reg_3131 & or_ln898_5_fu_1340_p2);

assign and_ln898_6_fu_1476_p2 = (tmp_36_fu_1390_p3 & or_ln898_6_fu_1470_p2);

assign and_ln898_7_fu_1607_p2 = (tmp_39_fu_1521_p3 & or_ln898_7_fu_1601_p2);

assign and_ln898_8_fu_1735_p2 = (tmp_42_reg_3179 & or_ln898_8_fu_1729_p2);

assign and_ln898_9_fu_1865_p2 = (tmp_45_fu_1779_p3 & or_ln898_9_fu_1859_p2);

assign and_ln898_fu_677_p2 = (tmp_fu_596_p3 & or_ln898_1_fu_671_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dense_1_biases_V_address0 = i_cast_reg_2957_pp0_iter7_reg;

assign dense_1_biases_V_load_cast_fu_2667_p0 = dense_1_biases_V_q0;

assign dense_1_biases_V_load_cast_fu_2667_p1 = dense_1_biases_V_load_cast_fu_2667_p0;

assign dense_1_weights_V_0_address0 = i_cast_fu_548_p1;

assign dense_1_weights_V_10_address0 = i_cast_reg_2957_pp0_iter2_reg;

assign dense_1_weights_V_11_address0 = i_cast_reg_2957_pp0_iter2_reg;

assign dense_1_weights_V_12_address0 = i_cast_reg_2957_pp0_iter3_reg;

assign dense_1_weights_V_13_address0 = i_cast_reg_2957_pp0_iter3_reg;

assign dense_1_weights_V_14_address0 = i_cast_reg_2957_pp0_iter3_reg;

assign dense_1_weights_V_15_address0 = i_cast_reg_2957_pp0_iter4_reg;

assign dense_1_weights_V_1_address0 = i_cast_fu_548_p1;

assign dense_1_weights_V_2_address0 = i_cast_fu_548_p1;

assign dense_1_weights_V_3_address0 = i_cast_reg_2957;

assign dense_1_weights_V_4_address0 = i_cast_reg_2957;

assign dense_1_weights_V_5_address0 = i_cast_reg_2957;

assign dense_1_weights_V_6_address0 = i_cast_reg_2957_pp0_iter1_reg;

assign dense_1_weights_V_7_address0 = i_cast_reg_2957_pp0_iter1_reg;

assign dense_1_weights_V_8_address0 = i_cast_reg_2957_pp0_iter1_reg;

assign dense_1_weights_V_9_address0 = i_cast_reg_2957_pp0_iter2_reg;

assign grp_fu_2766_p0 = sext_ln1273_cast_reg_2948;

assign grp_fu_2776_p0 = sext_ln1273_1_cast_reg_2943;

assign grp_fu_2782_p0 = sext_ln1273_2_cast_reg_2938;

assign grp_fu_2788_p0 = sext_ln1273_3_cast_reg_2933;

assign grp_fu_2794_p0 = sext_ln1273_4_cast_reg_2928;

assign grp_fu_2800_p0 = sext_ln1273_5_cast_reg_2923;

assign grp_fu_2806_p0 = sext_ln1273_6_cast_reg_2918;

assign grp_fu_2812_p0 = sext_ln1273_7_cast_reg_2913;

assign grp_fu_2818_p0 = sext_ln1273_8_cast_reg_2908;

assign grp_fu_2824_p0 = sext_ln1273_9_cast_reg_2903;

assign grp_fu_2830_p0 = sext_ln1273_10_cast_reg_2898;

assign grp_fu_2836_p0 = sext_ln1273_11_cast_reg_2893;

assign grp_fu_2842_p0 = sext_ln1273_12_cast_reg_2888;

assign grp_fu_2848_p0 = sext_ln1273_13_cast_reg_2883;

assign grp_fu_2854_p0 = sext_ln1273_14_cast_reg_2878;

assign grp_fu_2860_p0 = sext_ln1273_15_cast_reg_2873;

assign i_cast_fu_548_p1 = ap_sig_allocacmp_i_2;

assign icmp_ln109_fu_536_p2 = ((ap_sig_allocacmp_i_2 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln900_10_fu_1853_p2 = ((tmp_1_9_fu_1843_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_11_fu_1984_p2 = ((tmp_1_s_fu_1974_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_12_fu_2109_p2 = ((tmp_1_10_reg_3230 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_13_fu_2238_p2 = ((tmp_1_11_fu_2228_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_14_fu_2369_p2 = ((tmp_1_12_fu_2359_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_15_fu_2494_p2 = ((tmp_1_13_reg_3258 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_16_fu_2623_p2 = ((tmp_1_14_fu_2613_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_1_fu_665_p2 = ((tmp_1_fu_656_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_2_fu_796_p2 = ((tmp_1_1_fu_786_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_3_fu_917_p2 = ((tmp_1_2_fu_907_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_4_fu_1067_p2 = ((tmp_1_3_fu_1057_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_5_fu_1198_p2 = ((tmp_1_4_fu_1188_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_6_fu_1335_p2 = ((tmp_1_5_reg_3149 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_7_fu_1464_p2 = ((tmp_1_6_fu_1454_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_8_fu_1595_p2 = ((tmp_1_7_fu_1585_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_9_fu_1724_p2 = ((tmp_1_8_reg_3197 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_fu_2725_p2 = ((trunc_ln900_fu_2721_p1 == 23'd0) ? 1'b1 : 1'b0);

assign lhs_fu_2655_p3 = ((or_ln346_15_fu_2649_p2[0:0] == 1'b1) ? select_ln346_31_fu_2641_p3 : trunc_ln818_14_fu_2557_p4);

assign or_ln346_10_fu_2002_p2 = (and_ln898_10_fu_1996_p2 | and_ln895_10_fu_1956_p2);

assign or_ln346_11_fu_2125_p2 = (and_ln898_11_fu_2120_p2 | and_ln895_11_fu_2093_p2);

assign or_ln346_12_fu_2256_p2 = (and_ln898_12_fu_2250_p2 | and_ln895_12_fu_2210_p2);

assign or_ln346_13_fu_2387_p2 = (and_ln898_13_fu_2381_p2 | and_ln895_13_fu_2341_p2);

assign or_ln346_14_fu_2510_p2 = (and_ln898_14_fu_2505_p2 | and_ln895_14_fu_2478_p2);

assign or_ln346_15_fu_2649_p2 = (and_ln898_15_fu_2635_p2 | and_ln895_15_fu_2595_p2);

assign or_ln346_16_fu_2751_p2 = (underflow_fu_2737_p2 | overflow_fu_2709_p2);

assign or_ln346_1_fu_814_p2 = (and_ln898_1_fu_808_p2 | and_ln895_1_fu_768_p2);

assign or_ln346_2_fu_935_p2 = (and_ln898_2_fu_929_p2 | and_ln895_2_fu_889_p2);

assign or_ln346_3_fu_1085_p2 = (and_ln898_3_fu_1079_p2 | and_ln895_3_fu_1039_p2);

assign or_ln346_4_fu_1216_p2 = (and_ln898_4_fu_1210_p2 | and_ln895_4_fu_1170_p2);

assign or_ln346_5_fu_1351_p2 = (and_ln898_5_fu_1346_p2 | and_ln895_5_fu_1319_p2);

assign or_ln346_6_fu_1482_p2 = (and_ln898_6_fu_1476_p2 | and_ln895_6_fu_1436_p2);

assign or_ln346_7_fu_1613_p2 = (and_ln898_7_fu_1607_p2 | and_ln895_7_fu_1567_p2);

assign or_ln346_8_fu_1740_p2 = (and_ln898_8_fu_1735_p2 | and_ln895_8_fu_1708_p2);

assign or_ln346_9_fu_1871_p2 = (and_ln898_9_fu_1865_p2 | and_ln895_9_fu_1825_p2);

assign or_ln346_fu_683_p2 = (and_ln898_fu_677_p2 | and_ln895_fu_638_p2);

assign or_ln895_10_fu_1944_p2 = (tmp_50_fu_1936_p3 | tmp_49_fu_1928_p3);

assign or_ln895_11_fu_2084_p2 = (tmp_53_reg_3224 | tmp_52_reg_3218);

assign or_ln895_12_fu_2198_p2 = (tmp_56_fu_2190_p3 | tmp_55_fu_2182_p3);

assign or_ln895_13_fu_2329_p2 = (tmp_59_fu_2321_p3 | tmp_58_fu_2313_p3);

assign or_ln895_14_fu_2469_p2 = (tmp_62_reg_3252 | tmp_61_reg_3246);

assign or_ln895_15_fu_2583_p2 = (tmp_65_fu_2575_p3 | tmp_64_fu_2567_p3);

assign or_ln895_1_fu_756_p2 = (tmp_23_fu_748_p3 | tmp_22_fu_740_p3);

assign or_ln895_2_fu_877_p2 = (tmp_26_fu_869_p3 | tmp_25_fu_861_p3);

assign or_ln895_3_fu_1027_p2 = (tmp_29_fu_1019_p3 | tmp_28_fu_1011_p3);

assign or_ln895_4_fu_1158_p2 = (tmp_32_fu_1150_p3 | tmp_31_fu_1142_p3);

assign or_ln895_5_fu_1310_p2 = (tmp_35_reg_3143 | tmp_34_reg_3137);

assign or_ln895_6_fu_1424_p2 = (tmp_38_fu_1416_p3 | tmp_37_fu_1408_p3);

assign or_ln895_7_fu_1555_p2 = (tmp_41_fu_1547_p3 | tmp_40_fu_1539_p3);

assign or_ln895_8_fu_1699_p2 = (tmp_44_reg_3191 | tmp_43_reg_3185);

assign or_ln895_9_fu_1813_p2 = (tmp_47_fu_1805_p3 | tmp_46_fu_1797_p3);

assign or_ln895_fu_626_p2 = (tmp_20_fu_619_p3 | tmp_19_fu_612_p3);

assign or_ln898_10_fu_1990_p2 = (xor_ln896_11_fu_1968_p2 | icmp_ln900_11_fu_1984_p2);

assign or_ln898_11_fu_2114_p2 = (xor_ln896_12_fu_2103_p2 | icmp_ln900_12_fu_2109_p2);

assign or_ln898_12_fu_2244_p2 = (xor_ln896_13_fu_2222_p2 | icmp_ln900_13_fu_2238_p2);

assign or_ln898_13_fu_2375_p2 = (xor_ln896_14_fu_2353_p2 | icmp_ln900_14_fu_2369_p2);

assign or_ln898_14_fu_2499_p2 = (xor_ln896_15_fu_2488_p2 | icmp_ln900_15_fu_2494_p2);

assign or_ln898_15_fu_2629_p2 = (xor_ln896_16_fu_2607_p2 | icmp_ln900_16_fu_2623_p2);

assign or_ln898_16_fu_2731_p2 = (xor_ln896_fu_2715_p2 | icmp_ln900_fu_2725_p2);

assign or_ln898_1_fu_671_p2 = (xor_ln896_1_fu_650_p2 | icmp_ln900_1_fu_665_p2);

assign or_ln898_2_fu_923_p2 = (xor_ln896_3_fu_901_p2 | icmp_ln900_3_fu_917_p2);

assign or_ln898_3_fu_1073_p2 = (xor_ln896_4_fu_1051_p2 | icmp_ln900_4_fu_1067_p2);

assign or_ln898_4_fu_1204_p2 = (xor_ln896_5_fu_1182_p2 | icmp_ln900_5_fu_1198_p2);

assign or_ln898_5_fu_1340_p2 = (xor_ln896_6_fu_1329_p2 | icmp_ln900_6_fu_1335_p2);

assign or_ln898_6_fu_1470_p2 = (xor_ln896_7_fu_1448_p2 | icmp_ln900_7_fu_1464_p2);

assign or_ln898_7_fu_1601_p2 = (xor_ln896_8_fu_1579_p2 | icmp_ln900_8_fu_1595_p2);

assign or_ln898_8_fu_1729_p2 = (xor_ln896_9_fu_1718_p2 | icmp_ln900_9_fu_1724_p2);

assign or_ln898_9_fu_1859_p2 = (xor_ln896_10_fu_1837_p2 | icmp_ln900_10_fu_1853_p2);

assign or_ln898_fu_802_p2 = (xor_ln896_2_fu_780_p2 | icmp_ln900_2_fu_796_p2);

assign output_r_address0 = i_cast_reg_2957_pp0_iter8_reg;

assign output_r_d0 = ((or_ln346_16_fu_2751_p2[0:0] == 1'b1) ? select_ln346_33_fu_2743_p3 : p_Val2_13_fu_2689_p2);

assign overflow_fu_2709_p2 = (xor_ln895_fu_2703_p2 & p_Result_35_fu_2695_p3);

assign p_Result_35_fu_2695_p3 = p_Val2_13_fu_2689_p2[32'd23];

assign p_Result_s_fu_2681_p3 = ret_V_fu_2675_p2[32'd24];

assign p_Val2_13_fu_2689_p2 = ($signed(lhs_fu_2655_p3) + $signed(dense_1_biases_V_load_cast_fu_2667_p1));

assign ret_V_fu_2675_p2 = ($signed(sext_ln813_15_fu_2663_p1) + $signed(sext_ln813_16_fu_2671_p1));

assign select_ln346_10_fu_1230_p3 = ((or_ln346_4_fu_1216_p2[0:0] == 1'b1) ? select_ln346_9_fu_1222_p3 : trunc_ln818_4_fu_1132_p4);

assign select_ln346_11_fu_1357_p3 = ((and_ln895_5_fu_1319_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_12_fu_1365_p3 = ((or_ln346_5_fu_1351_p2[0:0] == 1'b1) ? select_ln346_11_fu_1357_p3 : trunc_ln818_5_fu_1301_p4);

assign select_ln346_13_fu_1488_p3 = ((and_ln895_6_fu_1436_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_14_fu_1496_p3 = ((or_ln346_6_fu_1482_p2[0:0] == 1'b1) ? select_ln346_13_fu_1488_p3 : trunc_ln818_6_fu_1398_p4);

assign select_ln346_15_fu_1619_p3 = ((and_ln895_7_fu_1567_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_16_fu_1627_p3 = ((or_ln346_7_fu_1613_p2[0:0] == 1'b1) ? select_ln346_15_fu_1619_p3 : trunc_ln818_7_fu_1529_p4);

assign select_ln346_17_fu_1746_p3 = ((and_ln895_8_fu_1708_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_18_fu_1754_p3 = ((or_ln346_8_fu_1740_p2[0:0] == 1'b1) ? select_ln346_17_fu_1746_p3 : trunc_ln818_8_fu_1690_p4);

assign select_ln346_19_fu_1877_p3 = ((and_ln895_9_fu_1825_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_1_fu_689_p3 = ((and_ln895_fu_638_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_20_fu_1885_p3 = ((or_ln346_9_fu_1871_p2[0:0] == 1'b1) ? select_ln346_19_fu_1877_p3 : trunc_ln818_9_fu_1787_p4);

assign select_ln346_21_fu_2008_p3 = ((and_ln895_10_fu_1956_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_22_fu_2016_p3 = ((or_ln346_10_fu_2002_p2[0:0] == 1'b1) ? select_ln346_21_fu_2008_p3 : trunc_ln818_s_fu_1918_p4);

assign select_ln346_23_fu_2131_p3 = ((and_ln895_11_fu_2093_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_24_fu_2139_p3 = ((or_ln346_11_fu_2125_p2[0:0] == 1'b1) ? select_ln346_23_fu_2131_p3 : trunc_ln818_10_fu_2075_p4);

assign select_ln346_25_fu_2262_p3 = ((and_ln895_12_fu_2210_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_26_fu_2270_p3 = ((or_ln346_12_fu_2256_p2[0:0] == 1'b1) ? select_ln346_25_fu_2262_p3 : trunc_ln818_11_fu_2172_p4);

assign select_ln346_27_fu_2393_p3 = ((and_ln895_13_fu_2341_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_28_fu_2401_p3 = ((or_ln346_13_fu_2387_p2[0:0] == 1'b1) ? select_ln346_27_fu_2393_p3 : trunc_ln818_12_fu_2303_p4);

assign select_ln346_29_fu_2516_p3 = ((and_ln895_14_fu_2478_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_2_fu_697_p3 = ((or_ln346_fu_683_p2[0:0] == 1'b1) ? select_ln346_1_fu_689_p3 : trunc_ln_fu_603_p4);

assign select_ln346_30_fu_2524_p3 = ((or_ln346_14_fu_2510_p2[0:0] == 1'b1) ? select_ln346_29_fu_2516_p3 : trunc_ln818_13_fu_2460_p4);

assign select_ln346_31_fu_2641_p3 = ((and_ln895_15_fu_2595_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_33_fu_2743_p3 = ((overflow_fu_2709_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_3_fu_820_p3 = ((and_ln895_1_fu_768_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_4_fu_828_p3 = ((or_ln346_1_fu_814_p2[0:0] == 1'b1) ? select_ln346_3_fu_820_p3 : trunc_ln818_1_fu_730_p4);

assign select_ln346_5_fu_962_p3 = ((and_ln895_2_reg_3086[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_6_fu_969_p3 = ((or_ln346_2_reg_3091[0:0] == 1'b1) ? select_ln346_5_fu_962_p3 : trunc_ln818_2_fu_953_p4);

assign select_ln346_7_fu_1091_p3 = ((and_ln895_3_fu_1039_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_8_fu_1099_p3 = ((or_ln346_3_fu_1085_p2[0:0] == 1'b1) ? select_ln346_7_fu_1091_p3 : trunc_ln818_3_fu_1001_p4);

assign select_ln346_9_fu_1222_p3 = ((and_ln895_4_fu_1170_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign sext_ln1273_10_cast_fu_484_p1 = $signed(sext_ln1273_10);

assign sext_ln1273_11_cast_fu_480_p1 = $signed(sext_ln1273_11);

assign sext_ln1273_12_cast_fu_476_p1 = $signed(sext_ln1273_12);

assign sext_ln1273_13_cast_fu_472_p1 = $signed(sext_ln1273_13);

assign sext_ln1273_14_cast_fu_468_p1 = $signed(sext_ln1273_14);

assign sext_ln1273_15_cast_fu_464_p1 = $signed(sext_ln1273_15);

assign sext_ln1273_1_cast_fu_520_p1 = $signed(sext_ln1273_1);

assign sext_ln1273_2_cast_fu_516_p1 = $signed(sext_ln1273_2);

assign sext_ln1273_3_cast_fu_512_p1 = $signed(sext_ln1273_3);

assign sext_ln1273_4_cast_fu_508_p1 = $signed(sext_ln1273_4);

assign sext_ln1273_5_cast_fu_504_p1 = $signed(sext_ln1273_5);

assign sext_ln1273_6_cast_fu_500_p1 = $signed(sext_ln1273_6);

assign sext_ln1273_7_cast_fu_496_p1 = $signed(sext_ln1273_7);

assign sext_ln1273_8_cast_fu_492_p1 = $signed(sext_ln1273_8);

assign sext_ln1273_9_cast_fu_488_p1 = $signed(sext_ln1273_9);

assign sext_ln1273_cast_fu_524_p1 = $signed(sext_ln1273);

assign sext_ln813_10_fu_2032_p1 = $signed(shl_ln838_s_fu_2024_p3);

assign sext_ln813_11_fu_2155_p1 = $signed(shl_ln838_10_fu_2147_p3);

assign sext_ln813_12_fu_2286_p1 = $signed(shl_ln838_11_fu_2278_p3);

assign sext_ln813_13_fu_2417_p1 = $signed(shl_ln838_12_fu_2409_p3);

assign sext_ln813_14_fu_2540_p1 = $signed(shl_ln838_13_fu_2532_p3);

assign sext_ln813_15_fu_2663_p1 = lhs_fu_2655_p3;

assign sext_ln813_16_fu_2671_p0 = dense_1_biases_V_q0;

assign sext_ln813_16_fu_2671_p1 = sext_ln813_16_fu_2671_p0;

assign sext_ln813_1_fu_844_p1 = $signed(shl_ln838_1_fu_836_p3);

assign sext_ln813_2_fu_984_p1 = $signed(shl_ln838_2_fu_976_p3);

assign sext_ln813_3_fu_1115_p1 = $signed(shl_ln838_3_fu_1107_p3);

assign sext_ln813_4_fu_1246_p1 = $signed(shl_ln838_4_fu_1238_p3);

assign sext_ln813_5_fu_1381_p1 = $signed(shl_ln838_5_fu_1373_p3);

assign sext_ln813_6_fu_1512_p1 = $signed(shl_ln838_6_fu_1504_p3);

assign sext_ln813_7_fu_1643_p1 = $signed(shl_ln838_7_fu_1635_p3);

assign sext_ln813_8_fu_1770_p1 = $signed(shl_ln838_8_fu_1762_p3);

assign sext_ln813_9_fu_1901_p1 = $signed(shl_ln838_9_fu_1893_p3);

assign sext_ln813_fu_713_p1 = $signed(shl_ln_fu_705_p3);

assign shl_ln838_10_fu_2147_p3 = {{select_ln346_24_fu_2139_p3}, {18'd0}};

assign shl_ln838_11_fu_2278_p3 = {{select_ln346_26_fu_2270_p3}, {18'd0}};

assign shl_ln838_12_fu_2409_p3 = {{select_ln346_28_fu_2401_p3}, {18'd0}};

assign shl_ln838_13_fu_2532_p3 = {{select_ln346_30_fu_2524_p3}, {18'd0}};

assign shl_ln838_1_fu_836_p3 = {{select_ln346_4_fu_828_p3}, {18'd0}};

assign shl_ln838_2_fu_976_p3 = {{select_ln346_6_fu_969_p3}, {18'd0}};

assign shl_ln838_3_fu_1107_p3 = {{select_ln346_8_fu_1099_p3}, {18'd0}};

assign shl_ln838_4_fu_1238_p3 = {{select_ln346_10_fu_1230_p3}, {18'd0}};

assign shl_ln838_5_fu_1373_p3 = {{select_ln346_12_fu_1365_p3}, {18'd0}};

assign shl_ln838_6_fu_1504_p3 = {{select_ln346_14_fu_1496_p3}, {18'd0}};

assign shl_ln838_7_fu_1635_p3 = {{select_ln346_16_fu_1627_p3}, {18'd0}};

assign shl_ln838_8_fu_1762_p3 = {{select_ln346_18_fu_1754_p3}, {18'd0}};

assign shl_ln838_9_fu_1893_p3 = {{select_ln346_20_fu_1885_p3}, {18'd0}};

assign shl_ln838_s_fu_2024_p3 = {{select_ln346_22_fu_2016_p3}, {18'd0}};

assign shl_ln_fu_705_p3 = {{select_ln346_2_fu_697_p3}, {18'd0}};

assign tmp_19_fu_612_p3 = grp_fu_2766_p2[32'd41];

assign tmp_1_11_fu_2228_p4 = {{add_ln1347_11_fu_2159_p2[40:18]}};

assign tmp_1_12_fu_2359_p4 = {{add_ln1347_12_fu_2290_p2[40:18]}};

assign tmp_1_14_fu_2613_p4 = {{add_ln1347_14_fu_2544_p2[40:18]}};

assign tmp_1_1_fu_786_p4 = {{add_ln1347_fu_717_p2[40:18]}};

assign tmp_1_2_fu_907_p4 = {{add_ln1347_1_fu_848_p2[40:18]}};

assign tmp_1_3_fu_1057_p4 = {{add_ln1347_2_fu_988_p2[40:18]}};

assign tmp_1_4_fu_1188_p4 = {{add_ln1347_3_fu_1119_p2[40:18]}};

assign tmp_1_6_fu_1454_p4 = {{add_ln1347_5_fu_1385_p2[40:18]}};

assign tmp_1_7_fu_1585_p4 = {{add_ln1347_6_fu_1516_p2[40:18]}};

assign tmp_1_9_fu_1843_p4 = {{add_ln1347_8_fu_1774_p2[40:18]}};

assign tmp_1_fu_656_p4 = {{grp_fu_2766_p2[40:18]}};

assign tmp_1_s_fu_1974_p4 = {{add_ln1347_9_fu_1905_p2[40:18]}};

assign tmp_20_fu_619_p3 = grp_fu_2766_p2[32'd42];

assign tmp_21_fu_722_p3 = add_ln1347_fu_717_p2[32'd42];

assign tmp_22_fu_740_p3 = add_ln1347_fu_717_p2[32'd41];

assign tmp_23_fu_748_p3 = add_ln1347_fu_717_p2[32'd42];

assign tmp_24_fu_853_p3 = add_ln1347_1_fu_848_p2[32'd42];

assign tmp_25_fu_861_p3 = add_ln1347_1_fu_848_p2[32'd41];

assign tmp_26_fu_869_p3 = add_ln1347_1_fu_848_p2[32'd42];

assign tmp_27_fu_993_p3 = add_ln1347_2_fu_988_p2[32'd42];

assign tmp_28_fu_1011_p3 = add_ln1347_2_fu_988_p2[32'd41];

assign tmp_29_fu_1019_p3 = add_ln1347_2_fu_988_p2[32'd42];

assign tmp_30_fu_1124_p3 = add_ln1347_3_fu_1119_p2[32'd42];

assign tmp_31_fu_1142_p3 = add_ln1347_3_fu_1119_p2[32'd41];

assign tmp_32_fu_1150_p3 = add_ln1347_3_fu_1119_p2[32'd42];

assign tmp_36_fu_1390_p3 = add_ln1347_5_fu_1385_p2[32'd42];

assign tmp_37_fu_1408_p3 = add_ln1347_5_fu_1385_p2[32'd41];

assign tmp_38_fu_1416_p3 = add_ln1347_5_fu_1385_p2[32'd42];

assign tmp_39_fu_1521_p3 = add_ln1347_6_fu_1516_p2[32'd42];

assign tmp_40_fu_1539_p3 = add_ln1347_6_fu_1516_p2[32'd41];

assign tmp_41_fu_1547_p3 = add_ln1347_6_fu_1516_p2[32'd42];

assign tmp_45_fu_1779_p3 = add_ln1347_8_fu_1774_p2[32'd42];

assign tmp_46_fu_1797_p3 = add_ln1347_8_fu_1774_p2[32'd41];

assign tmp_47_fu_1805_p3 = add_ln1347_8_fu_1774_p2[32'd42];

assign tmp_48_fu_1910_p3 = add_ln1347_9_fu_1905_p2[32'd42];

assign tmp_49_fu_1928_p3 = add_ln1347_9_fu_1905_p2[32'd41];

assign tmp_50_fu_1936_p3 = add_ln1347_9_fu_1905_p2[32'd42];

assign tmp_54_fu_2164_p3 = add_ln1347_11_fu_2159_p2[32'd42];

assign tmp_55_fu_2182_p3 = add_ln1347_11_fu_2159_p2[32'd41];

assign tmp_56_fu_2190_p3 = add_ln1347_11_fu_2159_p2[32'd42];

assign tmp_57_fu_2295_p3 = add_ln1347_12_fu_2290_p2[32'd42];

assign tmp_58_fu_2313_p3 = add_ln1347_12_fu_2290_p2[32'd41];

assign tmp_59_fu_2321_p3 = add_ln1347_12_fu_2290_p2[32'd42];

assign tmp_63_fu_2549_p3 = add_ln1347_14_fu_2544_p2[32'd42];

assign tmp_64_fu_2567_p3 = add_ln1347_14_fu_2544_p2[32'd41];

assign tmp_65_fu_2575_p3 = add_ln1347_14_fu_2544_p2[32'd42];

assign tmp_fu_596_p3 = grp_fu_2766_p2[32'd42];

assign trunc_ln818_10_fu_2075_p4 = {{add_ln1347_10_reg_3207[41:18]}};

assign trunc_ln818_11_fu_2172_p4 = {{add_ln1347_11_fu_2159_p2[41:18]}};

assign trunc_ln818_12_fu_2303_p4 = {{add_ln1347_12_fu_2290_p2[41:18]}};

assign trunc_ln818_13_fu_2460_p4 = {{add_ln1347_13_reg_3235[41:18]}};

assign trunc_ln818_14_fu_2557_p4 = {{add_ln1347_14_fu_2544_p2[41:18]}};

assign trunc_ln818_1_fu_730_p4 = {{add_ln1347_fu_717_p2[41:18]}};

assign trunc_ln818_2_fu_953_p4 = {{add_ln1347_1_reg_3081[41:18]}};

assign trunc_ln818_3_fu_1001_p4 = {{add_ln1347_2_fu_988_p2[41:18]}};

assign trunc_ln818_4_fu_1132_p4 = {{add_ln1347_3_fu_1119_p2[41:18]}};

assign trunc_ln818_5_fu_1301_p4 = {{add_ln1347_4_reg_3126[41:18]}};

assign trunc_ln818_6_fu_1398_p4 = {{add_ln1347_5_fu_1385_p2[41:18]}};

assign trunc_ln818_7_fu_1529_p4 = {{add_ln1347_6_fu_1516_p2[41:18]}};

assign trunc_ln818_8_fu_1690_p4 = {{add_ln1347_7_reg_3174[41:18]}};

assign trunc_ln818_9_fu_1787_p4 = {{add_ln1347_8_fu_1774_p2[41:18]}};

assign trunc_ln818_s_fu_1918_p4 = {{add_ln1347_9_fu_1905_p2[41:18]}};

assign trunc_ln900_fu_2721_p1 = p_Val2_13_fu_2689_p2[22:0];

assign trunc_ln_fu_603_p4 = {{grp_fu_2766_p2[41:18]}};

assign underflow_fu_2737_p2 = (p_Result_s_fu_2681_p3 & or_ln898_16_fu_2731_p2);

assign xor_ln895_10_fu_1819_p2 = (tmp_45_fu_1779_p3 ^ 1'd1);

assign xor_ln895_11_fu_1950_p2 = (tmp_48_fu_1910_p3 ^ 1'd1);

assign xor_ln895_12_fu_2088_p2 = (tmp_51_reg_3212 ^ 1'd1);

assign xor_ln895_13_fu_2204_p2 = (tmp_54_fu_2164_p3 ^ 1'd1);

assign xor_ln895_14_fu_2335_p2 = (tmp_57_fu_2295_p3 ^ 1'd1);

assign xor_ln895_15_fu_2473_p2 = (tmp_60_reg_3240 ^ 1'd1);

assign xor_ln895_16_fu_2589_p2 = (tmp_63_fu_2549_p3 ^ 1'd1);

assign xor_ln895_1_fu_632_p2 = (tmp_fu_596_p3 ^ 1'd1);

assign xor_ln895_2_fu_762_p2 = (tmp_21_fu_722_p3 ^ 1'd1);

assign xor_ln895_3_fu_883_p2 = (tmp_24_fu_853_p3 ^ 1'd1);

assign xor_ln895_4_fu_1033_p2 = (tmp_27_fu_993_p3 ^ 1'd1);

assign xor_ln895_5_fu_1164_p2 = (tmp_30_fu_1124_p3 ^ 1'd1);

assign xor_ln895_6_fu_1314_p2 = (tmp_33_reg_3131 ^ 1'd1);

assign xor_ln895_7_fu_1430_p2 = (tmp_36_fu_1390_p3 ^ 1'd1);

assign xor_ln895_8_fu_1561_p2 = (tmp_39_fu_1521_p3 ^ 1'd1);

assign xor_ln895_9_fu_1703_p2 = (tmp_42_reg_3179 ^ 1'd1);

assign xor_ln895_fu_2703_p2 = (p_Result_s_fu_2681_p3 ^ 1'd1);

assign xor_ln896_10_fu_1837_p2 = (1'd1 ^ and_ln896_9_fu_1831_p2);

assign xor_ln896_11_fu_1968_p2 = (1'd1 ^ and_ln896_10_fu_1962_p2);

assign xor_ln896_12_fu_2103_p2 = (1'd1 ^ and_ln896_11_fu_2099_p2);

assign xor_ln896_13_fu_2222_p2 = (1'd1 ^ and_ln896_12_fu_2216_p2);

assign xor_ln896_14_fu_2353_p2 = (1'd1 ^ and_ln896_13_fu_2347_p2);

assign xor_ln896_15_fu_2488_p2 = (1'd1 ^ and_ln896_14_fu_2484_p2);

assign xor_ln896_16_fu_2607_p2 = (1'd1 ^ and_ln896_15_fu_2601_p2);

assign xor_ln896_1_fu_650_p2 = (1'd1 ^ and_ln896_fu_644_p2);

assign xor_ln896_2_fu_780_p2 = (1'd1 ^ and_ln896_1_fu_774_p2);

assign xor_ln896_3_fu_901_p2 = (1'd1 ^ and_ln896_2_fu_895_p2);

assign xor_ln896_4_fu_1051_p2 = (1'd1 ^ and_ln896_3_fu_1045_p2);

assign xor_ln896_5_fu_1182_p2 = (1'd1 ^ and_ln896_4_fu_1176_p2);

assign xor_ln896_6_fu_1329_p2 = (1'd1 ^ and_ln896_5_fu_1325_p2);

assign xor_ln896_7_fu_1448_p2 = (1'd1 ^ and_ln896_6_fu_1442_p2);

assign xor_ln896_8_fu_1579_p2 = (1'd1 ^ and_ln896_7_fu_1573_p2);

assign xor_ln896_9_fu_1718_p2 = (1'd1 ^ and_ln896_8_fu_1714_p2);

assign xor_ln896_fu_2715_p2 = (p_Result_35_fu_2695_p3 ^ 1'd1);

always @ (posedge ap_clk) begin
    i_cast_reg_2957[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_2957_pp0_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_2957_pp0_iter2_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_2957_pp0_iter3_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_2957_pp0_iter4_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_2957_pp0_iter5_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_2957_pp0_iter6_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_2957_pp0_iter7_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    i_cast_reg_2957_pp0_iter8_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //gesture_model_dense_1_Pipeline_VITIS_LOOP_109_1
