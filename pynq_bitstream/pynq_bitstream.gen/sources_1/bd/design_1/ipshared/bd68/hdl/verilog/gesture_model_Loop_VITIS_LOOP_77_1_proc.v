// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gesture_model_Loop_VITIS_LOOP_77_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        max_pool_out_0_V_address0,
        max_pool_out_0_V_ce0,
        max_pool_out_0_V_q0,
        flatten_out_0_V_address0,
        flatten_out_0_V_ce0,
        flatten_out_0_V_we0,
        flatten_out_0_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] max_pool_out_0_V_address0;
output   max_pool_out_0_V_ce0;
input  [23:0] max_pool_out_0_V_q0;
output  [9:0] flatten_out_0_V_address0;
output   flatten_out_0_V_ce0;
output   flatten_out_0_V_we0;
output  [23:0] flatten_out_0_V_d0;

reg ap_idle;
reg max_pool_out_0_V_ce0;
reg flatten_out_0_V_ce0;
reg flatten_out_0_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln77_fu_123_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] icmp_ln79_fu_147_p2;
reg   [0:0] icmp_ln79_reg_298;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln81_1_fu_187_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] idx_1_cast_fu_239_p1;
reg   [4:0] j_fu_48;
wire   [4:0] add_ln79_fu_192_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [9:0] idx_1_fu_52;
wire   [9:0] add_ln81_fu_244_p2;
reg    ap_loop_init_pp0_iter1_reg;
reg   [9:0] ap_sig_allocacmp_idx_1_load;
reg   [5:0] i_1_fu_56;
wire   [5:0] select_ln76_2_fu_161_p3;
reg   [5:0] ap_sig_allocacmp_i_1_load;
reg   [9:0] idx_fu_60;
wire   [9:0] select_ln77_fu_232_p3;
reg   [9:0] ap_sig_allocacmp_idx_load;
reg   [9:0] indvar_flatten_fu_64;
wire   [9:0] add_ln77_2_fu_129_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [5:0] add_ln77_fu_141_p2;
wire   [4:0] select_ln76_1_fu_153_p3;
wire   [9:0] tmp_fu_169_p3;
wire   [9:0] zext_ln81_fu_177_p1;
wire   [9:0] add_ln81_1_fu_181_p2;
wire   [9:0] add_ln77_1_fu_219_p2;
wire   [9:0] select_ln76_fu_225_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_94;
reg    ap_condition_107;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gesture_model_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_94)) begin
        if ((icmp_ln77_fu_123_p2 == 1'd0)) begin
            i_1_fu_56 <= select_ln76_2_fu_161_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_56 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_107)) begin
        idx_1_fu_52 <= add_ln81_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_107)) begin
    idx_fu_60 <= select_ln77_fu_232_p3;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_94)) begin
    if ((icmp_ln77_fu_123_p2 == 1'd0)) begin
        indvar_flatten_fu_64 <= add_ln77_2_fu_129_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        indvar_flatten_fu_64 <= 10'd0;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_94)) begin
    if ((icmp_ln77_fu_123_p2 == 1'd0)) begin
        j_fu_48 <= add_ln79_fu_192_p2;
    end else if ((ap_loop_init == 1'b1)) begin
        j_fu_48 <= 5'd0;
    end
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_init_pp0_iter1_reg <= ap_loop_init;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln77_fu_123_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln79_reg_298 <= icmp_ln79_fu_147_p2;
    end
end

always @ (*) begin
    if (((icmp_ln77_fu_123_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1_load = 6'd0;
    end else begin
        ap_sig_allocacmp_i_1_load = i_1_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_idx_1_load = 10'd0;
    end else begin
        ap_sig_allocacmp_idx_1_load = idx_1_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init_pp0_iter1_reg == 1'b1))) begin
        ap_sig_allocacmp_idx_load = 10'd0;
    end else begin
        ap_sig_allocacmp_idx_load = idx_fu_60;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_64;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flatten_out_0_V_ce0 = 1'b1;
    end else begin
        flatten_out_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flatten_out_0_V_we0 = 1'b1;
    end else begin
        flatten_out_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_pool_out_0_V_ce0 = 1'b1;
    end else begin
        max_pool_out_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln77_1_fu_219_p2 = (ap_sig_allocacmp_idx_load + 10'd16);

assign add_ln77_2_fu_129_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln77_fu_141_p2 = (ap_sig_allocacmp_i_1_load + 6'd1);

assign add_ln79_fu_192_p2 = (select_ln76_1_fu_153_p3 + 5'd1);

assign add_ln81_1_fu_181_p2 = (tmp_fu_169_p3 + zext_ln81_fu_177_p1);

assign add_ln81_fu_244_p2 = (select_ln76_fu_225_p3 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_107 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_94 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign flatten_out_0_V_address0 = idx_1_cast_fu_239_p1;

assign flatten_out_0_V_d0 = max_pool_out_0_V_q0;

assign icmp_ln77_fu_123_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd944) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_147_p2 = ((ap_sig_allocacmp_j_load == 5'd16) ? 1'b1 : 1'b0);

assign idx_1_cast_fu_239_p1 = select_ln76_fu_225_p3;

assign max_pool_out_0_V_address0 = zext_ln81_1_fu_187_p1;

assign select_ln76_1_fu_153_p3 = ((icmp_ln79_fu_147_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign select_ln76_2_fu_161_p3 = ((icmp_ln79_fu_147_p2[0:0] == 1'b1) ? add_ln77_fu_141_p2 : ap_sig_allocacmp_i_1_load);

assign select_ln76_fu_225_p3 = ((icmp_ln79_reg_298[0:0] == 1'b1) ? add_ln77_1_fu_219_p2 : ap_sig_allocacmp_idx_1_load);

assign select_ln77_fu_232_p3 = ((icmp_ln79_reg_298[0:0] == 1'b1) ? add_ln77_1_fu_219_p2 : ap_sig_allocacmp_idx_load);

assign tmp_fu_169_p3 = {{select_ln76_2_fu_161_p3}, {4'd0}};

assign zext_ln81_1_fu_187_p1 = add_ln81_1_fu_181_p2;

assign zext_ln81_fu_177_p1 = select_ln76_1_fu_153_p3;

endmodule //gesture_model_Loop_VITIS_LOOP_77_1_proc
