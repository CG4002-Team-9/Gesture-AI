// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gesture_model_Loop_VITIS_LOOP_171_3_proc9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        output_stream_TREADY,
        output_stream_TDATA,
        output_stream_TVALID,
        output_stream_TKEEP,
        output_stream_TSTRB,
        output_stream_TLAST,
        output_V_address0,
        output_V_ce0,
        output_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   output_stream_TREADY;
output  [31:0] output_stream_TDATA;
output   output_stream_TVALID;
output  [3:0] output_stream_TKEEP;
output  [3:0] output_stream_TSTRB;
output  [0:0] output_stream_TLAST;
output  [4:0] output_V_address0;
output   output_V_ce0;
input  [23:0] output_V_q0;

reg ap_idle;
reg output_V_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    regslice_both_output_stream_V_data_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_loop_exit_ready;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln171_fu_159_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
reg    ap_ready_int;
reg    output_stream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] out_last_V_fu_176_p2;
reg   [0:0] out_last_V_reg_513;
reg   [0:0] out_last_V_reg_513_pp0_iter1_reg;
reg   [23:0] p_Val2_s_reg_518;
reg   [0:0] p_Result_77_reg_524;
wire   [23:0] tmp_V_fu_195_p2;
reg   [23:0] tmp_V_reg_530;
wire   [63:0] i_2_cast_fu_171_p1;
reg   [4:0] i_2_fu_116;
wire   [4:0] add_ln171_fu_165_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i;
reg    ap_block_pp0_stage0_01001;
wire   [23:0] tmp_V_6_fu_206_p3;
reg   [23:0] p_Result_s_fu_211_p4;
wire   [24:0] p_Result_78_fu_221_p3;
wire  signed [31:0] sext_ln1198_fu_229_p1;
reg   [31:0] l_fu_233_p3;
wire   [31:0] sub_ln1099_fu_241_p2;
wire   [31:0] lsb_index_fu_251_p2;
wire   [30:0] tmp_fu_257_p4;
wire   [4:0] trunc_ln1102_fu_273_p1;
wire   [4:0] sub_ln1102_fu_277_p2;
wire   [23:0] zext_ln1102_fu_283_p1;
wire   [23:0] lshr_ln1102_fu_287_p2;
wire   [23:0] p_Result_74_fu_293_p2;
wire   [0:0] icmp_ln1101_fu_267_p2;
wire   [0:0] icmp_ln1102_fu_299_p2;
wire   [0:0] tmp_98_fu_311_p3;
wire   [23:0] trunc_ln1099_fu_247_p1;
wire   [23:0] add_ln1104_fu_325_p2;
wire   [0:0] p_Result_4_fu_331_p3;
wire   [0:0] xor_ln1104_fu_319_p2;
wire   [0:0] and_ln1104_fu_339_p2;
wire   [0:0] a_fu_305_p2;
wire   [0:0] or_ln1104_fu_345_p2;
wire   [31:0] add_ln1113_fu_369_p2;
wire   [63:0] zext_ln1112_fu_359_p1;
wire   [63:0] zext_ln1113_fu_375_p1;
wire   [31:0] sub_ln1114_fu_385_p2;
wire   [63:0] zext_ln1114_fu_391_p1;
wire   [0:0] icmp_ln1113_fu_363_p2;
wire   [63:0] lshr_ln1113_fu_379_p2;
wire   [63:0] shl_ln1114_fu_395_p2;
wire   [1:0] or_ln_fu_351_p3;
wire   [63:0] m_15_fu_401_p3;
wire   [63:0] zext_ln1116_fu_409_p1;
wire   [63:0] m_16_fu_413_p2;
wire   [62:0] m_17_fu_419_p4;
wire   [0:0] p_Result_75_fu_433_p3;
wire   [7:0] trunc_ln1098_fu_449_p1;
wire   [7:0] sub_ln1119_fu_453_p2;
wire   [7:0] select_ln1098_fu_441_p3;
wire   [7:0] add_ln1124_fu_459_p2;
wire   [63:0] zext_ln1117_fu_429_p1;
wire   [8:0] tmp_2_fu_465_p3;
wire   [63:0] p_Result_79_fu_472_p5;
wire   [0:0] icmp_ln1090_fu_201_p2;
wire   [31:0] trunc_ln765_fu_484_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [31:0] output_stream_TDATA_int_regslice;
reg    output_stream_TVALID_int_regslice;
wire    output_stream_TREADY_int_regslice;
wire    regslice_both_output_stream_V_data_V_U_vld_out;
wire    regslice_both_output_stream_V_keep_V_U_apdone_blk;
wire    regslice_both_output_stream_V_keep_V_U_ack_in_dummy;
wire    regslice_both_output_stream_V_keep_V_U_vld_out;
wire    regslice_both_output_stream_V_strb_V_U_apdone_blk;
wire    regslice_both_output_stream_V_strb_V_U_ack_in_dummy;
wire    regslice_both_output_stream_V_strb_V_U_vld_out;
wire    regslice_both_output_stream_V_last_V_U_apdone_blk;
wire    regslice_both_output_stream_V_last_V_U_ack_in_dummy;
wire    regslice_both_output_stream_V_last_V_U_vld_out;
reg    ap_condition_127;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gesture_model_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

gesture_model_regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(output_stream_TDATA_int_regslice),
    .vld_in(output_stream_TVALID_int_regslice),
    .ack_in(output_stream_TREADY_int_regslice),
    .data_out(output_stream_TDATA),
    .vld_out(regslice_both_output_stream_V_data_V_U_vld_out),
    .ack_out(output_stream_TREADY),
    .apdone_blk(regslice_both_output_stream_V_data_V_U_apdone_blk)
);

gesture_model_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(4'd15),
    .vld_in(output_stream_TVALID_int_regslice),
    .ack_in(regslice_both_output_stream_V_keep_V_U_ack_in_dummy),
    .data_out(output_stream_TKEEP),
    .vld_out(regslice_both_output_stream_V_keep_V_U_vld_out),
    .ack_out(output_stream_TREADY),
    .apdone_blk(regslice_both_output_stream_V_keep_V_U_apdone_blk)
);

gesture_model_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(4'd0),
    .vld_in(output_stream_TVALID_int_regslice),
    .ack_in(regslice_both_output_stream_V_strb_V_U_ack_in_dummy),
    .data_out(output_stream_TSTRB),
    .vld_out(regslice_both_output_stream_V_strb_V_U_vld_out),
    .ack_out(output_stream_TREADY),
    .apdone_blk(regslice_both_output_stream_V_strb_V_U_apdone_blk)
);

gesture_model_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(out_last_V_reg_513_pp0_iter1_reg),
    .vld_in(output_stream_TVALID_int_regslice),
    .ack_in(regslice_both_output_stream_V_last_V_U_ack_in_dummy),
    .data_out(output_stream_TLAST),
    .vld_out(regslice_both_output_stream_V_last_V_U_vld_out),
    .ack_out(output_stream_TREADY),
    .apdone_blk(regslice_both_output_stream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_127)) begin
        if ((icmp_ln171_fu_159_p2 == 1'd0)) begin
            i_2_fu_116 <= add_ln171_fu_165_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_116 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        out_last_V_reg_513_pp0_iter1_reg <= out_last_V_reg_513;
        p_Result_77_reg_524 <= output_V_q0[32'd23];
        p_Val2_s_reg_518 <= output_V_q0;
        tmp_V_reg_530 <= tmp_V_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln171_fu_159_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_last_V_reg_513 <= out_last_V_fu_176_p2;
    end
end

always @ (*) begin
    if (((icmp_ln171_fu_159_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 5'd0;
    end else begin
        ap_sig_allocacmp_i = i_2_fu_116;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_V_ce0 = 1'b1;
    end else begin
        output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        output_stream_TDATA_blk_n = output_stream_TREADY_int_regslice;
    end else begin
        output_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_stream_TVALID_int_regslice = 1'b1;
    end else begin
        output_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_fu_305_p2 = (icmp_ln1102_fu_299_p2 & icmp_ln1101_fu_267_p2);

assign add_ln1104_fu_325_p2 = ($signed(trunc_ln1099_fu_247_p1) + $signed(24'd16777192));

assign add_ln1113_fu_369_p2 = ($signed(sub_ln1099_fu_241_p2) + $signed(32'd4294967271));

assign add_ln1124_fu_459_p2 = (sub_ln1119_fu_453_p2 + select_ln1098_fu_441_p3);

assign add_ln171_fu_165_p2 = (ap_sig_allocacmp_i + 5'd1);

assign and_ln1104_fu_339_p2 = (xor_ln1104_fu_319_p2 & p_Result_4_fu_331_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (regslice_both_output_stream_V_data_V_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_output_stream_V_data_V_U_apdone_blk == 1'b1) | (output_stream_TREADY_int_regslice == 1'b0))) | ((output_stream_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (regslice_both_output_stream_V_data_V_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_output_stream_V_data_V_U_apdone_blk == 1'b1) | (output_stream_TREADY_int_regslice == 1'b0))) | ((output_stream_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (regslice_both_output_stream_V_data_V_U_apdone_blk == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_output_stream_V_data_V_U_apdone_blk == 1'b1) | (output_stream_TREADY_int_regslice == 1'b0))) | ((output_stream_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_output_stream_V_data_V_U_apdone_blk == 1'b1) | (output_stream_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (output_stream_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_condition_127 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_2_cast_fu_171_p1 = ap_sig_allocacmp_i;

assign icmp_ln1090_fu_201_p2 = ((p_Val2_s_reg_518 == 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln1101_fu_267_p2 = (($signed(tmp_fu_257_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1102_fu_299_p2 = ((p_Result_74_fu_293_p2 != 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln1113_fu_363_p2 = (($signed(lsb_index_fu_251_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln171_fu_159_p2 = ((ap_sig_allocacmp_i == 5'd20) ? 1'b1 : 1'b0);


always @ (sext_ln1198_fu_229_p1) begin
    if (sext_ln1198_fu_229_p1[0] == 1'b1) begin
        l_fu_233_p3 = 32'd0;
    end else if (sext_ln1198_fu_229_p1[1] == 1'b1) begin
        l_fu_233_p3 = 32'd1;
    end else if (sext_ln1198_fu_229_p1[2] == 1'b1) begin
        l_fu_233_p3 = 32'd2;
    end else if (sext_ln1198_fu_229_p1[3] == 1'b1) begin
        l_fu_233_p3 = 32'd3;
    end else if (sext_ln1198_fu_229_p1[4] == 1'b1) begin
        l_fu_233_p3 = 32'd4;
    end else if (sext_ln1198_fu_229_p1[5] == 1'b1) begin
        l_fu_233_p3 = 32'd5;
    end else if (sext_ln1198_fu_229_p1[6] == 1'b1) begin
        l_fu_233_p3 = 32'd6;
    end else if (sext_ln1198_fu_229_p1[7] == 1'b1) begin
        l_fu_233_p3 = 32'd7;
    end else if (sext_ln1198_fu_229_p1[8] == 1'b1) begin
        l_fu_233_p3 = 32'd8;
    end else if (sext_ln1198_fu_229_p1[9] == 1'b1) begin
        l_fu_233_p3 = 32'd9;
    end else if (sext_ln1198_fu_229_p1[10] == 1'b1) begin
        l_fu_233_p3 = 32'd10;
    end else if (sext_ln1198_fu_229_p1[11] == 1'b1) begin
        l_fu_233_p3 = 32'd11;
    end else if (sext_ln1198_fu_229_p1[12] == 1'b1) begin
        l_fu_233_p3 = 32'd12;
    end else if (sext_ln1198_fu_229_p1[13] == 1'b1) begin
        l_fu_233_p3 = 32'd13;
    end else if (sext_ln1198_fu_229_p1[14] == 1'b1) begin
        l_fu_233_p3 = 32'd14;
    end else if (sext_ln1198_fu_229_p1[15] == 1'b1) begin
        l_fu_233_p3 = 32'd15;
    end else if (sext_ln1198_fu_229_p1[16] == 1'b1) begin
        l_fu_233_p3 = 32'd16;
    end else if (sext_ln1198_fu_229_p1[17] == 1'b1) begin
        l_fu_233_p3 = 32'd17;
    end else if (sext_ln1198_fu_229_p1[18] == 1'b1) begin
        l_fu_233_p3 = 32'd18;
    end else if (sext_ln1198_fu_229_p1[19] == 1'b1) begin
        l_fu_233_p3 = 32'd19;
    end else if (sext_ln1198_fu_229_p1[20] == 1'b1) begin
        l_fu_233_p3 = 32'd20;
    end else if (sext_ln1198_fu_229_p1[21] == 1'b1) begin
        l_fu_233_p3 = 32'd21;
    end else if (sext_ln1198_fu_229_p1[22] == 1'b1) begin
        l_fu_233_p3 = 32'd22;
    end else if (sext_ln1198_fu_229_p1[23] == 1'b1) begin
        l_fu_233_p3 = 32'd23;
    end else if (sext_ln1198_fu_229_p1[24] == 1'b1) begin
        l_fu_233_p3 = 32'd24;
    end else if (sext_ln1198_fu_229_p1[25] == 1'b1) begin
        l_fu_233_p3 = 32'd25;
    end else if (sext_ln1198_fu_229_p1[26] == 1'b1) begin
        l_fu_233_p3 = 32'd26;
    end else if (sext_ln1198_fu_229_p1[27] == 1'b1) begin
        l_fu_233_p3 = 32'd27;
    end else if (sext_ln1198_fu_229_p1[28] == 1'b1) begin
        l_fu_233_p3 = 32'd28;
    end else if (sext_ln1198_fu_229_p1[29] == 1'b1) begin
        l_fu_233_p3 = 32'd29;
    end else if (sext_ln1198_fu_229_p1[30] == 1'b1) begin
        l_fu_233_p3 = 32'd30;
    end else if (sext_ln1198_fu_229_p1[31] == 1'b1) begin
        l_fu_233_p3 = 32'd31;
    end else begin
        l_fu_233_p3 = 32'd32;
    end
end

assign lsb_index_fu_251_p2 = ($signed(sub_ln1099_fu_241_p2) + $signed(32'd4294967272));

assign lshr_ln1102_fu_287_p2 = 24'd16777215 >> zext_ln1102_fu_283_p1;

assign lshr_ln1113_fu_379_p2 = zext_ln1112_fu_359_p1 >> zext_ln1113_fu_375_p1;

assign m_15_fu_401_p3 = ((icmp_ln1113_fu_363_p2[0:0] == 1'b1) ? lshr_ln1113_fu_379_p2 : shl_ln1114_fu_395_p2);

assign m_16_fu_413_p2 = (m_15_fu_401_p3 + zext_ln1116_fu_409_p1);

assign m_17_fu_419_p4 = {{m_16_fu_413_p2[63:1]}};

assign or_ln1104_fu_345_p2 = (and_ln1104_fu_339_p2 | a_fu_305_p2);

assign or_ln_fu_351_p3 = {{1'd0}, {or_ln1104_fu_345_p2}};

assign out_last_V_fu_176_p2 = ((ap_sig_allocacmp_i == 5'd19) ? 1'b1 : 1'b0);

assign output_V_address0 = i_2_cast_fu_171_p1;

assign output_stream_TDATA_int_regslice = ((icmp_ln1090_fu_201_p2[0:0] == 1'b1) ? 32'd0 : trunc_ln765_fu_484_p1);

assign output_stream_TVALID = regslice_both_output_stream_V_data_V_U_vld_out;

assign p_Result_4_fu_331_p3 = tmp_V_6_fu_206_p3[add_ln1104_fu_325_p2];

assign p_Result_74_fu_293_p2 = (tmp_V_6_fu_206_p3 & lshr_ln1102_fu_287_p2);

assign p_Result_75_fu_433_p3 = m_16_fu_413_p2[32'd25];

assign p_Result_78_fu_221_p3 = {{1'd1}, {p_Result_s_fu_211_p4}};

assign p_Result_79_fu_472_p5 = {{zext_ln1117_fu_429_p1[63:32]}, {tmp_2_fu_465_p3}, {zext_ln1117_fu_429_p1[22:0]}};

integer ap_tvar_int_0;

always @ (tmp_V_6_fu_206_p3) begin
    for (ap_tvar_int_0 = 24 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 23 - 0) begin
            p_Result_s_fu_211_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_211_p4[ap_tvar_int_0] = tmp_V_6_fu_206_p3[23 - ap_tvar_int_0];
        end
    end
end

assign select_ln1098_fu_441_p3 = ((p_Result_75_fu_433_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign sext_ln1198_fu_229_p1 = $signed(p_Result_78_fu_221_p3);

assign shl_ln1114_fu_395_p2 = zext_ln1112_fu_359_p1 << zext_ln1114_fu_391_p1;

assign sub_ln1099_fu_241_p2 = (32'd24 - l_fu_233_p3);

assign sub_ln1102_fu_277_p2 = ($signed(5'd17) - $signed(trunc_ln1102_fu_273_p1));

assign sub_ln1114_fu_385_p2 = (32'd25 - sub_ln1099_fu_241_p2);

assign sub_ln1119_fu_453_p2 = (8'd6 - trunc_ln1098_fu_449_p1);

assign tmp_2_fu_465_p3 = {{p_Result_77_reg_524}, {add_ln1124_fu_459_p2}};

assign tmp_98_fu_311_p3 = lsb_index_fu_251_p2[32'd31];

assign tmp_V_6_fu_206_p3 = ((p_Result_77_reg_524[0:0] == 1'b1) ? tmp_V_reg_530 : p_Val2_s_reg_518);

assign tmp_V_fu_195_p2 = (24'd0 - output_V_q0);

assign tmp_fu_257_p4 = {{lsb_index_fu_251_p2[31:1]}};

assign trunc_ln1098_fu_449_p1 = l_fu_233_p3[7:0];

assign trunc_ln1099_fu_247_p1 = sub_ln1099_fu_241_p2[23:0];

assign trunc_ln1102_fu_273_p1 = sub_ln1099_fu_241_p2[4:0];

assign trunc_ln765_fu_484_p1 = p_Result_79_fu_472_p5[31:0];

assign xor_ln1104_fu_319_p2 = (tmp_98_fu_311_p3 ^ 1'd1);

assign zext_ln1102_fu_283_p1 = sub_ln1102_fu_277_p2;

assign zext_ln1112_fu_359_p1 = tmp_V_6_fu_206_p3;

assign zext_ln1113_fu_375_p1 = add_ln1113_fu_369_p2;

assign zext_ln1114_fu_391_p1 = sub_ln1114_fu_385_p2;

assign zext_ln1116_fu_409_p1 = or_ln_fu_351_p3;

assign zext_ln1117_fu_429_p1 = m_17_fu_419_p4;

endmodule //gesture_model_Loop_VITIS_LOOP_171_3_proc9
