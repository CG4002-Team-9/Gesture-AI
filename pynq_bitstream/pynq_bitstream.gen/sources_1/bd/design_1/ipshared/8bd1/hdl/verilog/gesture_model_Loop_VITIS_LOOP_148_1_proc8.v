// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gesture_model_Loop_VITIS_LOOP_148_1_proc8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_stream_TVALID,
        input_V_0_address0,
        input_V_0_ce0,
        input_V_0_we0,
        input_V_0_d0,
        input_stream_TDATA,
        input_stream_TREADY,
        input_stream_TKEEP,
        input_stream_TSTRB,
        input_stream_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   input_stream_TVALID;
output  [6:0] input_V_0_address0;
output   input_V_0_ce0;
output   input_V_0_we0;
output  [23:0] input_V_0_d0;
input  [31:0] input_stream_TDATA;
output   input_stream_TREADY;
input  [3:0] input_stream_TKEEP;
input  [3:0] input_stream_TSTRB;
input  [0:0] input_stream_TLAST;

reg ap_idle;
reg input_V_0_ce0;
reg input_V_0_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln148_fu_156_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    input_stream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg   [6:0] i_4_reg_771;
reg    ap_block_pp0_stage0_11001;
reg   [6:0] i_4_reg_771_pp0_iter1_reg;
reg   [31:0] p_0_reg_780;
wire   [0:0] neg_src_fu_190_p3;
reg   [0:0] neg_src_reg_790;
wire   [0:0] icmp_ln560_fu_242_p2;
reg   [0:0] icmp_ln560_reg_796;
wire  signed [11:0] sh_amt_fu_272_p3;
reg  signed [11:0] sh_amt_reg_802;
wire   [23:0] trunc_ln572_fu_286_p1;
reg   [23:0] trunc_ln572_reg_808;
wire   [23:0] select_ln574_4_fu_375_p3;
reg   [23:0] select_ln574_4_reg_813;
wire   [0:0] icmp_ln570_5_fu_383_p2;
reg   [0:0] icmp_ln570_5_reg_818;
wire   [0:0] icmp_ln600_fu_395_p2;
reg   [0:0] icmp_ln600_reg_823;
wire   [0:0] icmp_ln610_fu_421_p2;
reg   [0:0] icmp_ln610_reg_828;
wire   [0:0] Range1_all_zeros_5_fu_529_p2;
reg   [0:0] Range1_all_zeros_5_reg_833;
wire   [0:0] icmp_ln630_fu_535_p2;
reg   [0:0] icmp_ln630_reg_838;
wire   [0:0] or_ln610_fu_569_p2;
reg   [0:0] or_ln610_reg_843;
wire   [0:0] and_ln628_4_fu_581_p2;
reg   [0:0] and_ln628_4_reg_848;
wire   [0:0] deleted_ones_fu_593_p3;
reg   [0:0] deleted_ones_reg_853;
wire   [63:0] i_cast_fu_601_p1;
reg   [6:0] i_fu_116;
wire   [6:0] add_ln148_fu_162_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_4;
wire   [31:0] grp_fu_145_p0;
wire   [63:0] grp_fu_145_p1;
wire   [63:0] ireg_fu_182_p1;
wire   [10:0] exp_tmp_fu_198_p4;
wire   [51:0] trunc_ln554_fu_212_p1;
wire   [52:0] p_Result_s_fu_216_p3;
wire   [53:0] zext_ln558_fu_224_p1;
wire   [53:0] man_V_fu_228_p2;
wire   [62:0] trunc_ln544_fu_186_p1;
wire   [11:0] zext_ln455_fu_208_p1;
wire   [11:0] F2_fu_248_p2;
wire   [0:0] icmp_ln570_fu_254_p2;
wire   [11:0] add_ln570_fu_260_p2;
wire   [11:0] sub_ln570_fu_266_p2;
wire   [53:0] man_V_11_fu_234_p3;
wire   [5:0] trunc_ln575_fu_296_p1;
wire   [53:0] zext_ln575_fu_300_p1;
wire   [53:0] ashr_ln575_fu_304_p2;
wire   [0:0] tmp_fu_314_p3;
wire   [0:0] icmp_ln571_fu_280_p2;
wire   [0:0] xor_ln571_fu_337_p2;
wire   [0:0] and_ln570_fu_343_p2;
wire   [0:0] icmp_ln574_fu_290_p2;
wire   [0:0] and_ln574_fu_349_p2;
wire   [23:0] trunc_ln575_5_fu_310_p1;
wire   [23:0] select_ln571_fu_329_p3;
wire   [0:0] xor_ln574_fu_363_p2;
wire   [0:0] and_ln574_4_fu_369_p2;
wire   [23:0] sext_ln577_cast_fu_321_p3;
wire   [23:0] select_ln574_fu_355_p3;
wire   [11:0] add_ln601_fu_389_p2;
wire  signed [11:0] pos1_fu_401_p2;
wire   [0:0] tmp_101_fu_427_p3;
wire  signed [31:0] sext_ln607_fu_407_p1;
wire   [0:0] icmp_ln610_2_fu_441_p2;
wire   [0:0] lD_fu_447_p3;
wire   [11:0] pos2_fu_415_p2;
wire   [5:0] trunc_ln608_fu_411_p1;
wire   [5:0] add_ln624_fu_473_p2;
wire   [53:0] zext_ln624_fu_479_p1;
wire   [53:0] Range2_V_5_fu_483_p2;
wire   [53:0] r_V_fu_489_p2;
wire   [0:0] tmp_102_fu_501_p3;
wire   [0:0] icmp_ln620_1_fu_467_p2;
wire   [0:0] Range2_all_ones_fu_495_p2;
wire   [0:0] Range2_all_ones_9_fu_509_p2;
wire   [0:0] Range2_all_ones_10_fu_515_p3;
wire   [0:0] Range1_all_ones_19_fu_455_p2;
wire   [0:0] icmp_ln631_fu_541_p2;
wire   [0:0] Range1_all_ones_18_fu_435_p2;
wire   [0:0] select_ln631_fu_547_p3;
wire   [0:0] xor_ln610_fu_563_p2;
wire   [0:0] icmp_ln620_fu_461_p2;
wire   [0:0] and_ln628_fu_575_p2;
wire   [0:0] select_ln631_1_fu_555_p3;
wire   [0:0] Range1_all_ones_fu_523_p2;
wire   [0:0] or_ln610_7_fu_587_p2;
wire  signed [31:0] sext_ln570_fu_605_p1;
wire   [23:0] sext_ln570cast_fu_613_p1;
wire   [0:0] icmp_ln592_fu_608_p2;
wire   [0:0] and_ln592_fu_622_p2;
wire   [23:0] shl_ln593_fu_617_p2;
wire   [23:0] p_Val2_28_fu_627_p3;
wire   [0:0] and_ln630_fu_642_p2;
wire   [0:0] p_Result_80_fu_634_p3;
wire   [0:0] deleted_zeros_fu_646_p3;
wire   [0:0] xor_ln647_fu_657_p2;
wire   [0:0] or_ln647_fu_663_p2;
wire   [0:0] xor_ln647_1_fu_669_p2;
wire   [0:0] and_ln648_fu_680_p2;
wire   [22:0] trunc_ln652_fu_691_p1;
wire   [0:0] icmp_ln652_fu_695_p2;
wire   [0:0] xor_ln648_fu_685_p2;
wire   [0:0] or_ln610_8_fu_652_p2;
wire   [0:0] or_ln650_fu_701_p2;
wire   [0:0] and_ln650_fu_707_p2;
wire   [0:0] underflow_fu_713_p2;
wire   [0:0] overflow_fu_674_p2;
wire   [0:0] or_ln302_fu_718_p2;
wire   [0:0] xor_ln560_fu_732_p2;
wire   [0:0] and_ln302_fu_737_p2;
wire   [0:0] and_ln302_4_fu_743_p2;
wire   [23:0] select_ln346_fu_724_p3;
wire   [23:0] select_ln302_fu_748_p3;
reg    grp_fu_145_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    regslice_both_input_stream_V_data_V_U_apdone_blk;
wire   [31:0] input_stream_TDATA_int_regslice;
wire    input_stream_TVALID_int_regslice;
reg    input_stream_TREADY_int_regslice;
wire    regslice_both_input_stream_V_data_V_U_ack_in;
wire    regslice_both_input_stream_V_keep_V_U_apdone_blk;
wire   [3:0] input_stream_TKEEP_int_regslice;
wire    regslice_both_input_stream_V_keep_V_U_vld_out;
wire    regslice_both_input_stream_V_keep_V_U_ack_in;
wire    regslice_both_input_stream_V_strb_V_U_apdone_blk;
wire   [3:0] input_stream_TSTRB_int_regslice;
wire    regslice_both_input_stream_V_strb_V_U_vld_out;
wire    regslice_both_input_stream_V_strb_V_U_ack_in;
wire    regslice_both_input_stream_V_last_V_U_apdone_blk;
wire   [0:0] input_stream_TLAST_int_regslice;
wire    regslice_both_input_stream_V_last_V_U_vld_out;
wire    regslice_both_input_stream_V_last_V_U_ack_in;
reg    ap_condition_133;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gesture_model_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_145_p0),
    .ce(grp_fu_145_ce),
    .dout(grp_fu_145_p1)
);

gesture_model_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

gesture_model_regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_stream_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_stream_TDATA),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_data_V_U_ack_in),
    .data_out(input_stream_TDATA_int_regslice),
    .vld_out(input_stream_TVALID_int_regslice),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_data_V_U_apdone_blk)
);

gesture_model_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_stream_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_stream_TKEEP),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_keep_V_U_ack_in),
    .data_out(input_stream_TKEEP_int_regslice),
    .vld_out(regslice_both_input_stream_V_keep_V_U_vld_out),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_keep_V_U_apdone_blk)
);

gesture_model_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_stream_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_stream_TSTRB),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_strb_V_U_ack_in),
    .data_out(input_stream_TSTRB_int_regslice),
    .vld_out(regslice_both_input_stream_V_strb_V_U_vld_out),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_strb_V_U_apdone_blk)
);

gesture_model_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_stream_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(input_stream_TLAST),
    .vld_in(input_stream_TVALID),
    .ack_in(regslice_both_input_stream_V_last_V_U_ack_in),
    .data_out(input_stream_TLAST_int_regslice),
    .vld_out(regslice_both_input_stream_V_last_V_U_vld_out),
    .ack_out(input_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_stream_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_133)) begin
        if ((icmp_ln148_fu_156_p2 == 1'd0)) begin
            i_fu_116 <= add_ln148_fu_162_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_116 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Range1_all_zeros_5_reg_833 <= Range1_all_zeros_5_fu_529_p2;
        and_ln628_4_reg_848 <= and_ln628_4_fu_581_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        deleted_ones_reg_853 <= deleted_ones_fu_593_p3;
        i_4_reg_771 <= ap_sig_allocacmp_i_4;
        i_4_reg_771_pp0_iter1_reg <= i_4_reg_771;
        icmp_ln560_reg_796 <= icmp_ln560_fu_242_p2;
        icmp_ln570_5_reg_818 <= icmp_ln570_5_fu_383_p2;
        icmp_ln600_reg_823 <= icmp_ln600_fu_395_p2;
        icmp_ln610_reg_828 <= icmp_ln610_fu_421_p2;
        icmp_ln630_reg_838 <= icmp_ln630_fu_535_p2;
        neg_src_reg_790 <= ireg_fu_182_p1[32'd63];
        or_ln610_reg_843 <= or_ln610_fu_569_p2;
        select_ln574_4_reg_813 <= select_ln574_4_fu_375_p3;
        sh_amt_reg_802 <= sh_amt_fu_272_p3;
        trunc_ln572_reg_808 <= trunc_ln572_fu_286_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln148_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_0_reg_780 <= input_stream_TDATA_int_regslice;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln148_fu_156_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_4 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_4 = i_fu_116;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_145_ce = 1'b1;
    end else begin
        grp_fu_145_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input_V_0_ce0 = 1'b1;
    end else begin
        input_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input_V_0_we0 = 1'b1;
    end else begin
        input_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (icmp_ln148_fu_156_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_stream_TDATA_blk_n = input_stream_TVALID_int_regslice;
    end else begin
        input_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln148_fu_156_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_stream_TREADY_int_regslice = 1'b1;
    end else begin
        input_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_248_p2 = (12'd1075 - zext_ln455_fu_208_p1);

assign Range1_all_ones_18_fu_435_p2 = (tmp_101_fu_427_p3 ^ 1'd1);

assign Range1_all_ones_19_fu_455_p2 = (lD_fu_447_p3 & icmp_ln610_2_fu_441_p2);

assign Range1_all_ones_fu_523_p2 = (Range2_all_ones_10_fu_515_p3 & Range1_all_ones_19_fu_455_p2);

assign Range1_all_zeros_5_fu_529_p2 = (1'd1 ^ Range1_all_ones_19_fu_455_p2);

assign Range2_V_5_fu_483_p2 = man_V_11_fu_234_p3 >> zext_ln624_fu_479_p1;

assign Range2_all_ones_10_fu_515_p3 = ((icmp_ln620_1_fu_467_p2[0:0] == 1'b1) ? Range2_all_ones_fu_495_p2 : Range2_all_ones_9_fu_509_p2);

assign Range2_all_ones_9_fu_509_p2 = (tmp_102_fu_501_p3 ^ 1'd1);

assign Range2_all_ones_fu_495_p2 = ((Range2_V_5_fu_483_p2 == r_V_fu_489_p2) ? 1'b1 : 1'b0);

assign add_ln148_fu_162_p2 = (ap_sig_allocacmp_i_4 + 7'd1);

assign add_ln570_fu_260_p2 = ($signed(F2_fu_248_p2) + $signed(12'd4078));

assign add_ln601_fu_389_p2 = ($signed(zext_ln455_fu_208_p1) + $signed(12'd3075));

assign add_ln624_fu_473_p2 = (trunc_ln608_fu_411_p1 + 6'd7);

assign and_ln302_4_fu_743_p2 = (icmp_ln600_reg_823 & and_ln302_fu_737_p2);

assign and_ln302_fu_737_p2 = (xor_ln560_fu_732_p2 & or_ln302_fu_718_p2);

assign and_ln570_fu_343_p2 = (xor_ln571_fu_337_p2 & icmp_ln570_fu_254_p2);

assign and_ln574_4_fu_369_p2 = (xor_ln574_fu_363_p2 & and_ln570_fu_343_p2);

assign and_ln574_fu_349_p2 = (icmp_ln574_fu_290_p2 & and_ln570_fu_343_p2);

assign and_ln592_fu_622_p2 = (icmp_ln592_fu_608_p2 & icmp_ln570_5_reg_818);

assign and_ln628_4_fu_581_p2 = (and_ln628_fu_575_p2 & Range1_all_ones_18_fu_435_p2);

assign and_ln628_fu_575_p2 = (icmp_ln620_fu_461_p2 & icmp_ln610_fu_421_p2);

assign and_ln630_fu_642_p2 = (icmp_ln630_reg_838 & Range1_all_zeros_5_reg_833);

assign and_ln648_fu_680_p2 = (p_Result_80_fu_634_p3 & deleted_ones_reg_853);

assign and_ln650_fu_707_p2 = (or_ln650_fu_701_p2 & or_ln610_8_fu_652_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((input_stream_TVALID_int_regslice == 1'b0) & (icmp_ln148_fu_156_p2 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start_int == 1'b1) & ((ap_done_reg == 1'b1) | ((input_stream_TVALID_int_regslice == 1'b0) & (icmp_ln148_fu_156_p2 == 1'd0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((input_stream_TVALID_int_regslice == 1'b0) & (icmp_ln148_fu_156_p2 == 1'd0)));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_133 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ashr_ln575_fu_304_p2 = $signed(man_V_11_fu_234_p3) >>> zext_ln575_fu_300_p1;

assign deleted_ones_fu_593_p3 = ((and_ln628_4_fu_581_p2[0:0] == 1'b1) ? Range1_all_ones_fu_523_p2 : or_ln610_7_fu_587_p2);

assign deleted_zeros_fu_646_p3 = ((and_ln628_4_reg_848[0:0] == 1'b1) ? and_ln630_fu_642_p2 : or_ln610_reg_843);

assign exp_tmp_fu_198_p4 = {{ireg_fu_182_p1[62:52]}};

assign grp_fu_145_p0 = input_stream_TDATA_int_regslice;

assign i_cast_fu_601_p1 = i_4_reg_771_pp0_iter1_reg;

assign icmp_ln148_fu_156_p2 = ((ap_sig_allocacmp_i_4 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln560_fu_242_p2 = ((trunc_ln544_fu_186_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln570_5_fu_383_p2 = (($signed(F2_fu_248_p2) < $signed(12'd18)) ? 1'b1 : 1'b0);

assign icmp_ln570_fu_254_p2 = (($signed(F2_fu_248_p2) > $signed(12'd18)) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_280_p2 = ((F2_fu_248_p2 == 12'd18) ? 1'b1 : 1'b0);

assign icmp_ln574_fu_290_p2 = ((sh_amt_fu_272_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln592_fu_608_p2 = ((sh_amt_reg_802 < 12'd24) ? 1'b1 : 1'b0);

assign icmp_ln600_fu_395_p2 = (($signed(add_ln601_fu_389_p2) > $signed(12'd5)) ? 1'b1 : 1'b0);

assign icmp_ln610_2_fu_441_p2 = ((pos1_fu_401_p2 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln610_fu_421_p2 = (($signed(pos1_fu_401_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln620_1_fu_467_p2 = ((pos2_fu_415_p2 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln620_fu_461_p2 = (($signed(pos2_fu_415_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln630_fu_535_p2 = ((Range2_V_5_fu_483_p2 == 54'd0) ? 1'b1 : 1'b0);

assign icmp_ln631_fu_541_p2 = ((pos2_fu_415_p2 == 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln652_fu_695_p2 = ((trunc_ln652_fu_691_p1 == 23'd0) ? 1'b1 : 1'b0);

assign input_V_0_address0 = i_cast_fu_601_p1;

assign input_V_0_d0 = ((icmp_ln560_reg_796[0:0] == 1'b1) ? 24'd0 : select_ln302_fu_748_p3);

assign input_stream_TREADY = regslice_both_input_stream_V_data_V_U_ack_in;

assign ireg_fu_182_p1 = grp_fu_145_p1;

assign lD_fu_447_p3 = man_V_11_fu_234_p3[sext_ln607_fu_407_p1];

assign man_V_11_fu_234_p3 = ((neg_src_fu_190_p3[0:0] == 1'b1) ? man_V_fu_228_p2 : zext_ln558_fu_224_p1);

assign man_V_fu_228_p2 = (54'd0 - zext_ln558_fu_224_p1);

assign neg_src_fu_190_p3 = ireg_fu_182_p1[32'd63];

assign or_ln302_fu_718_p2 = (underflow_fu_713_p2 | overflow_fu_674_p2);

assign or_ln610_7_fu_587_p2 = (xor_ln610_fu_563_p2 | select_ln631_1_fu_555_p3);

assign or_ln610_8_fu_652_p2 = (p_Result_80_fu_634_p3 | icmp_ln610_reg_828);

assign or_ln610_fu_569_p2 = (xor_ln610_fu_563_p2 | select_ln631_fu_547_p3);

assign or_ln647_fu_663_p2 = (xor_ln647_fu_657_p2 | p_Result_80_fu_634_p3);

assign or_ln650_fu_701_p2 = (xor_ln648_fu_685_p2 | icmp_ln652_fu_695_p2);

assign overflow_fu_674_p2 = (xor_ln647_1_fu_669_p2 & or_ln647_fu_663_p2);

assign p_Result_80_fu_634_p3 = p_Val2_28_fu_627_p3[32'd23];

assign p_Result_s_fu_216_p3 = {{1'd1}, {trunc_ln554_fu_212_p1}};

assign p_Val2_28_fu_627_p3 = ((and_ln592_fu_622_p2[0:0] == 1'b1) ? shl_ln593_fu_617_p2 : select_ln574_4_reg_813);

assign pos1_fu_401_p2 = (F2_fu_248_p2 + 12'd6);

assign pos2_fu_415_p2 = (F2_fu_248_p2 + 12'd7);

assign r_V_fu_489_p2 = 54'd18014398509481983 >> zext_ln624_fu_479_p1;

assign select_ln302_fu_748_p3 = ((and_ln302_4_fu_743_p2[0:0] == 1'b1) ? select_ln346_fu_724_p3 : p_Val2_28_fu_627_p3);

assign select_ln346_fu_724_p3 = ((overflow_fu_674_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln571_fu_329_p3 = ((icmp_ln571_fu_280_p2[0:0] == 1'b1) ? trunc_ln572_fu_286_p1 : 24'd0);

assign select_ln574_4_fu_375_p3 = ((and_ln574_4_fu_369_p2[0:0] == 1'b1) ? sext_ln577_cast_fu_321_p3 : select_ln574_fu_355_p3);

assign select_ln574_fu_355_p3 = ((and_ln574_fu_349_p2[0:0] == 1'b1) ? trunc_ln575_5_fu_310_p1 : select_ln571_fu_329_p3);

assign select_ln631_1_fu_555_p3 = ((icmp_ln631_fu_541_p2[0:0] == 1'b1) ? Range1_all_ones_19_fu_455_p2 : Range1_all_ones_18_fu_435_p2);

assign select_ln631_fu_547_p3 = ((icmp_ln631_fu_541_p2[0:0] == 1'b1) ? Range1_all_zeros_5_fu_529_p2 : Range1_all_ones_18_fu_435_p2);

assign sext_ln570_fu_605_p1 = sh_amt_reg_802;

assign sext_ln570cast_fu_613_p1 = sext_ln570_fu_605_p1[23:0];

assign sext_ln577_cast_fu_321_p3 = ((tmp_fu_314_p3[0:0] == 1'b1) ? 24'd16777215 : 24'd0);

assign sext_ln607_fu_407_p1 = pos1_fu_401_p2;

assign sh_amt_fu_272_p3 = ((icmp_ln570_fu_254_p2[0:0] == 1'b1) ? add_ln570_fu_260_p2 : sub_ln570_fu_266_p2);

assign shl_ln593_fu_617_p2 = trunc_ln572_reg_808 << sext_ln570cast_fu_613_p1;

assign sub_ln570_fu_266_p2 = (12'd18 - F2_fu_248_p2);

assign tmp_101_fu_427_p3 = pos1_fu_401_p2[32'd11];

assign tmp_102_fu_501_p3 = pos2_fu_415_p2[32'd11];

assign tmp_fu_314_p3 = p_0_reg_780[32'd31];

assign trunc_ln544_fu_186_p1 = ireg_fu_182_p1[62:0];

assign trunc_ln554_fu_212_p1 = ireg_fu_182_p1[51:0];

assign trunc_ln572_fu_286_p1 = man_V_11_fu_234_p3[23:0];

assign trunc_ln575_5_fu_310_p1 = ashr_ln575_fu_304_p2[23:0];

assign trunc_ln575_fu_296_p1 = sh_amt_fu_272_p3[5:0];

assign trunc_ln608_fu_411_p1 = F2_fu_248_p2[5:0];

assign trunc_ln652_fu_691_p1 = p_Val2_28_fu_627_p3[22:0];

assign underflow_fu_713_p2 = (neg_src_reg_790 & and_ln650_fu_707_p2);

assign xor_ln560_fu_732_p2 = (icmp_ln560_reg_796 ^ 1'd1);

assign xor_ln571_fu_337_p2 = (icmp_ln571_fu_280_p2 ^ 1'd1);

assign xor_ln574_fu_363_p2 = (icmp_ln574_fu_290_p2 ^ 1'd1);

assign xor_ln610_fu_563_p2 = (icmp_ln610_fu_421_p2 ^ 1'd1);

assign xor_ln647_1_fu_669_p2 = (neg_src_reg_790 ^ 1'd1);

assign xor_ln647_fu_657_p2 = (deleted_zeros_fu_646_p3 ^ 1'd1);

assign xor_ln648_fu_685_p2 = (1'd1 ^ and_ln648_fu_680_p2);

assign zext_ln455_fu_208_p1 = exp_tmp_fu_198_p4;

assign zext_ln558_fu_224_p1 = p_Result_s_fu_216_p3;

assign zext_ln575_fu_300_p1 = trunc_ln575_fu_296_p1;

assign zext_ln624_fu_479_p1 = add_ln624_fu_473_p2;

endmodule //gesture_model_Loop_VITIS_LOOP_148_1_proc8
