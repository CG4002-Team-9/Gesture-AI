// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gesture_model_dense_1_Pipeline_VITIS_LOOP_120_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_r_address0,
        output_r_ce0,
        output_r_q0,
        softmax_sum_V_3_out,
        softmax_sum_V_3_out_ap_vld,
        grp_fu_478_p_din0,
        grp_fu_478_p_din1,
        grp_fu_478_p_dout0,
        grp_fu_478_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] output_r_address0;
output   output_r_ce0;
input  [23:0] output_r_q0;
output  [23:0] softmax_sum_V_3_out;
output   softmax_sum_V_3_out_ap_vld;
output  [63:0] grp_fu_478_p_din0;
output  [63:0] grp_fu_478_p_din1;
input  [63:0] grp_fu_478_p_dout0;
output   grp_fu_478_p_ce;

reg ap_idle;
reg output_r_ce0;
reg softmax_sum_V_3_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln120_fu_188_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln120_reg_1225;
reg   [0:0] icmp_ln120_reg_1225_pp0_iter1_reg;
reg   [0:0] icmp_ln120_reg_1225_pp0_iter2_reg;
reg   [0:0] icmp_ln120_reg_1225_pp0_iter3_reg;
reg   [0:0] icmp_ln120_reg_1225_pp0_iter4_reg;
reg   [0:0] icmp_ln120_reg_1225_pp0_iter5_reg;
reg   [0:0] icmp_ln120_reg_1225_pp0_iter6_reg;
reg   [0:0] icmp_ln120_reg_1225_pp0_iter7_reg;
reg   [0:0] icmp_ln120_reg_1225_pp0_iter8_reg;
reg   [0:0] icmp_ln120_reg_1225_pp0_iter9_reg;
reg   [0:0] icmp_ln120_reg_1225_pp0_iter10_reg;
reg   [0:0] icmp_ln120_reg_1225_pp0_iter11_reg;
reg   [0:0] icmp_ln120_reg_1225_pp0_iter12_reg;
reg   [0:0] icmp_ln120_reg_1225_pp0_iter13_reg;
reg   [0:0] icmp_ln120_reg_1225_pp0_iter14_reg;
reg   [0:0] icmp_ln120_reg_1225_pp0_iter15_reg;
reg   [23:0] p_Val2_s_reg_1234;
reg   [0:0] p_Result_28_reg_1240;
wire   [23:0] tmp_V_fu_218_p2;
reg   [23:0] tmp_V_reg_1246;
wire   [63:0] select_ln1040_fu_511_p3;
reg   [63:0] select_ln1040_reg_1251;
reg   [63:0] d_reg_1256;
wire   [0:0] neg_src_fu_526_p3;
reg   [0:0] neg_src_reg_1261;
wire   [0:0] icmp_ln560_fu_578_p2;
reg   [0:0] icmp_ln560_reg_1266;
wire   [23:0] p_Val2_10_fu_752_p3;
reg   [23:0] p_Val2_10_reg_1272;
wire   [0:0] icmp_ln600_fu_766_p2;
reg   [0:0] icmp_ln600_reg_1277;
wire   [0:0] p_Result_32_fu_792_p3;
reg   [0:0] p_Result_32_reg_1282;
wire   [0:0] icmp_ln610_fu_800_p2;
reg   [0:0] icmp_ln610_reg_1288;
wire   [0:0] deleted_ones_fu_986_p3;
reg   [0:0] deleted_ones_reg_1293;
wire   [0:0] overflow_fu_1012_p2;
reg   [0:0] overflow_reg_1298;
wire   [0:0] icmp_ln652_fu_1022_p2;
reg   [0:0] icmp_ln652_reg_1304;
wire   [63:0] i_3_cast_fu_200_p1;
wire    ap_block_pp0_stage0;
reg   [23:0] lhs_fu_142;
wire   [23:0] softmax_sum_V_fu_1193_p3;
wire    ap_loop_init;
reg   [4:0] i_1_fu_146;
wire   [4:0] add_ln120_fu_194_p2;
reg   [4:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0_01001;
wire   [23:0] tmp_V_4_fu_229_p3;
reg   [23:0] p_Result_s_fu_234_p4;
wire   [24:0] p_Result_29_fu_244_p3;
wire  signed [31:0] sext_ln1198_fu_252_p1;
reg   [31:0] l_fu_256_p3;
wire   [31:0] sub_ln1049_fu_264_p2;
wire   [31:0] lsb_index_fu_274_p2;
wire   [30:0] tmp_fu_280_p4;
wire   [4:0] trunc_ln1052_fu_296_p1;
wire   [4:0] sub_ln1052_fu_300_p2;
wire   [23:0] zext_ln1052_fu_306_p1;
wire   [23:0] lshr_ln1052_fu_310_p2;
wire   [23:0] p_Result_20_fu_316_p2;
wire   [0:0] icmp_ln1051_fu_290_p2;
wire   [0:0] icmp_ln1052_fu_322_p2;
wire   [0:0] tmp_10_fu_334_p3;
wire   [23:0] trunc_ln1049_fu_270_p1;
wire   [23:0] add_ln1054_fu_348_p2;
wire   [0:0] p_Result_7_fu_354_p3;
wire   [0:0] xor_ln1054_fu_342_p2;
wire   [0:0] and_ln1054_fu_362_p2;
wire   [0:0] a_fu_328_p2;
wire   [0:0] or_ln1054_fu_368_p2;
wire   [31:0] add_ln1063_fu_392_p2;
wire   [63:0] zext_ln1062_fu_382_p1;
wire   [63:0] zext_ln1063_fu_398_p1;
wire   [31:0] sub_ln1064_fu_408_p2;
wire   [63:0] zext_ln1064_fu_414_p1;
wire   [0:0] icmp_ln1063_fu_386_p2;
wire   [63:0] lshr_ln1063_fu_402_p2;
wire   [63:0] shl_ln1064_fu_418_p2;
wire   [1:0] or_ln_fu_374_p3;
wire   [63:0] m_4_fu_424_p3;
wire   [63:0] zext_ln1066_fu_432_p1;
wire   [63:0] m_5_fu_436_p2;
wire   [62:0] m_fu_442_p4;
wire   [0:0] p_Result_21_fu_456_p3;
wire   [10:0] trunc_ln1048_fu_472_p1;
wire   [10:0] sub_ln1070_fu_476_p2;
wire   [10:0] select_ln1048_fu_464_p3;
wire   [10:0] add_ln1076_fu_482_p2;
wire   [63:0] zext_ln1067_fu_452_p1;
wire   [11:0] tmp_s_fu_488_p3;
wire   [63:0] p_Result_30_fu_495_p5;
wire   [0:0] icmp_ln1040_fu_224_p2;
wire   [63:0] bitcast_ln756_fu_507_p1;
wire   [63:0] ireg_fu_519_p1;
wire   [10:0] exp_tmp_fu_534_p4;
wire   [51:0] trunc_ln554_fu_548_p1;
wire   [52:0] p_Result_31_fu_552_p3;
wire   [53:0] zext_ln558_fu_560_p1;
wire   [53:0] man_V_4_fu_564_p2;
wire   [62:0] trunc_ln544_fu_522_p1;
wire   [11:0] zext_ln455_fu_544_p1;
wire   [11:0] F2_fu_584_p2;
wire   [0:0] icmp_ln570_fu_590_p2;
wire   [11:0] add_ln570_fu_596_p2;
wire   [11:0] sub_ln570_fu_602_p2;
wire  signed [11:0] sh_amt_fu_608_p3;
wire   [53:0] man_V_fu_570_p3;
wire   [5:0] trunc_ln575_fu_642_p1;
wire   [53:0] zext_ln575_fu_646_p1;
wire   [53:0] ashr_ln575_fu_650_p2;
wire   [0:0] tmp_13_fu_660_p3;
wire  signed [31:0] sext_ln570_fu_616_p1;
wire   [23:0] trunc_ln572_fu_626_p1;
wire   [23:0] sext_ln570cast_fu_676_p1;
wire   [0:0] icmp_ln571_fu_620_p2;
wire   [0:0] xor_ln571_fu_694_p2;
wire   [0:0] and_ln570_fu_700_p2;
wire   [0:0] icmp_ln574_fu_630_p2;
wire   [0:0] and_ln574_fu_706_p2;
wire   [23:0] trunc_ln575_2_fu_656_p1;
wire   [23:0] select_ln571_fu_686_p3;
wire   [0:0] xor_ln574_fu_720_p2;
wire   [0:0] and_ln574_1_fu_726_p2;
wire   [23:0] sext_ln577_cast_fu_668_p3;
wire   [23:0] select_ln574_fu_712_p3;
wire   [0:0] icmp_ln570_2_fu_740_p2;
wire   [0:0] icmp_ln592_fu_636_p2;
wire   [0:0] and_ln592_fu_746_p2;
wire   [23:0] shl_ln593_fu_680_p2;
wire   [23:0] select_ln574_1_fu_732_p3;
wire   [11:0] add_ln601_fu_760_p2;
wire  signed [11:0] pos1_fu_772_p2;
wire   [0:0] tmp_15_fu_806_p3;
wire  signed [31:0] sext_ln607_fu_778_p1;
wire   [0:0] icmp_ln610_2_fu_820_p2;
wire   [0:0] lD_fu_826_p3;
wire   [11:0] pos2_fu_786_p2;
wire   [5:0] trunc_ln608_fu_782_p1;
wire   [5:0] add_ln624_fu_852_p2;
wire   [53:0] zext_ln624_fu_858_p1;
wire   [53:0] Range2_V_2_fu_862_p2;
wire   [53:0] r_V_fu_868_p2;
wire   [0:0] tmp_16_fu_880_p3;
wire   [0:0] icmp_ln620_1_fu_846_p2;
wire   [0:0] Range2_all_ones_fu_874_p2;
wire   [0:0] Range2_all_ones_3_fu_888_p2;
wire   [0:0] Range2_all_ones_4_fu_894_p3;
wire   [0:0] Range1_all_ones_7_fu_834_p2;
wire   [0:0] icmp_ln630_fu_914_p2;
wire   [0:0] Range1_all_zeros_2_fu_908_p2;
wire   [0:0] icmp_ln631_fu_926_p2;
wire   [0:0] Range1_all_ones_6_fu_814_p2;
wire   [0:0] select_ln631_fu_932_p3;
wire   [0:0] xor_ln610_fu_948_p2;
wire   [0:0] icmp_ln620_fu_840_p2;
wire   [0:0] and_ln628_fu_960_p2;
wire   [0:0] and_ln628_1_fu_966_p2;
wire   [0:0] and_ln630_fu_920_p2;
wire   [0:0] or_ln610_fu_954_p2;
wire   [0:0] select_ln631_1_fu_940_p3;
wire   [0:0] Range1_all_ones_fu_902_p2;
wire   [0:0] or_ln610_1_fu_980_p2;
wire   [0:0] deleted_zeros_fu_972_p3;
wire   [0:0] xor_ln647_fu_994_p2;
wire   [0:0] or_ln647_fu_1000_p2;
wire   [0:0] xor_ln647_1_fu_1006_p2;
wire   [22:0] trunc_ln652_fu_1018_p1;
wire   [0:0] and_ln648_fu_1035_p2;
wire   [0:0] xor_ln648_fu_1039_p2;
wire   [0:0] or_ln610_2_fu_1031_p2;
wire   [0:0] and_ln650_fu_1050_p2;
wire   [0:0] or_ln650_fu_1045_p2;
wire   [0:0] underflow_fu_1055_p2;
wire   [0:0] xor_ln560_fu_1073_p2;
wire   [0:0] and_ln302_fu_1078_p2;
wire   [0:0] or_ln302_fu_1061_p2;
wire   [0:0] and_ln302_1_fu_1083_p2;
wire   [23:0] select_ln346_fu_1066_p3;
wire   [23:0] select_ln302_fu_1089_p3;
wire  signed [23:0] sext_ln813_fu_1103_p0;
wire  signed [23:0] rhs_fu_1096_p3;
wire  signed [24:0] sext_ln813_1_fu_1107_p1;
wire  signed [24:0] sext_ln813_fu_1103_p1;
wire   [24:0] ret_V_fu_1111_p2;
wire  signed [23:0] softmax_sum_V_2_fu_1125_p1;
wire   [23:0] softmax_sum_V_2_fu_1125_p2;
wire   [0:0] p_Result_33_fu_1117_p3;
wire   [0:0] p_Result_34_fu_1131_p3;
wire   [0:0] xor_ln895_fu_1139_p2;
wire   [22:0] trunc_ln900_fu_1157_p1;
wire   [0:0] icmp_ln900_fu_1161_p2;
wire   [0:0] xor_ln896_fu_1151_p2;
wire   [0:0] or_ln898_fu_1167_p2;
wire   [0:0] overflow_2_fu_1145_p2;
wire   [0:0] underflow_2_fu_1173_p2;
wire   [0:0] or_ln346_fu_1187_p2;
wire   [23:0] select_ln346_3_fu_1179_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_done_reg = 1'b0;
end

gesture_model_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter16_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln120_fu_188_p2 == 1'd0))) begin
            i_1_fu_146 <= add_ln120_fu_194_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_146 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lhs_fu_142 <= 24'd0;
        end else if ((ap_enable_reg_pp0_iter17 == 1'b1)) begin
            lhs_fu_142 <= softmax_sum_V_fu_1193_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        d_reg_1256 <= grp_fu_478_p_dout0;
        deleted_ones_reg_1293 <= deleted_ones_fu_986_p3;
        icmp_ln120_reg_1225_pp0_iter10_reg <= icmp_ln120_reg_1225_pp0_iter9_reg;
        icmp_ln120_reg_1225_pp0_iter11_reg <= icmp_ln120_reg_1225_pp0_iter10_reg;
        icmp_ln120_reg_1225_pp0_iter12_reg <= icmp_ln120_reg_1225_pp0_iter11_reg;
        icmp_ln120_reg_1225_pp0_iter13_reg <= icmp_ln120_reg_1225_pp0_iter12_reg;
        icmp_ln120_reg_1225_pp0_iter14_reg <= icmp_ln120_reg_1225_pp0_iter13_reg;
        icmp_ln120_reg_1225_pp0_iter15_reg <= icmp_ln120_reg_1225_pp0_iter14_reg;
        icmp_ln120_reg_1225_pp0_iter2_reg <= icmp_ln120_reg_1225_pp0_iter1_reg;
        icmp_ln120_reg_1225_pp0_iter3_reg <= icmp_ln120_reg_1225_pp0_iter2_reg;
        icmp_ln120_reg_1225_pp0_iter4_reg <= icmp_ln120_reg_1225_pp0_iter3_reg;
        icmp_ln120_reg_1225_pp0_iter5_reg <= icmp_ln120_reg_1225_pp0_iter4_reg;
        icmp_ln120_reg_1225_pp0_iter6_reg <= icmp_ln120_reg_1225_pp0_iter5_reg;
        icmp_ln120_reg_1225_pp0_iter7_reg <= icmp_ln120_reg_1225_pp0_iter6_reg;
        icmp_ln120_reg_1225_pp0_iter8_reg <= icmp_ln120_reg_1225_pp0_iter7_reg;
        icmp_ln120_reg_1225_pp0_iter9_reg <= icmp_ln120_reg_1225_pp0_iter8_reg;
        icmp_ln560_reg_1266 <= icmp_ln560_fu_578_p2;
        icmp_ln600_reg_1277 <= icmp_ln600_fu_766_p2;
        icmp_ln610_reg_1288 <= icmp_ln610_fu_800_p2;
        icmp_ln652_reg_1304 <= icmp_ln652_fu_1022_p2;
        neg_src_reg_1261 <= ireg_fu_519_p1[32'd63];
        overflow_reg_1298 <= overflow_fu_1012_p2;
        p_Result_32_reg_1282 <= p_Val2_10_fu_752_p3[32'd23];
        p_Val2_10_reg_1272 <= p_Val2_10_fu_752_p3;
        select_ln1040_reg_1251 <= select_ln1040_fu_511_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln120_reg_1225 <= icmp_ln120_fu_188_p2;
        icmp_ln120_reg_1225_pp0_iter1_reg <= icmp_ln120_reg_1225;
        p_Result_28_reg_1240 <= output_r_q0[32'd23];
        p_Val2_s_reg_1234 <= output_r_q0;
        tmp_V_reg_1246 <= tmp_V_fu_218_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln120_fu_188_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter16_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 5'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_146;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln120_reg_1225_pp0_iter15_reg == 1'd1))) begin
        softmax_sum_V_3_out_ap_vld = 1'b1;
    end else begin
        softmax_sum_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_584_p2 = (12'd1075 - zext_ln455_fu_544_p1);

assign Range1_all_ones_6_fu_814_p2 = (tmp_15_fu_806_p3 ^ 1'd1);

assign Range1_all_ones_7_fu_834_p2 = (lD_fu_826_p3 & icmp_ln610_2_fu_820_p2);

assign Range1_all_ones_fu_902_p2 = (Range2_all_ones_4_fu_894_p3 & Range1_all_ones_7_fu_834_p2);

assign Range1_all_zeros_2_fu_908_p2 = (1'd1 ^ Range1_all_ones_7_fu_834_p2);

assign Range2_V_2_fu_862_p2 = man_V_fu_570_p3 >> zext_ln624_fu_858_p1;

assign Range2_all_ones_3_fu_888_p2 = (tmp_16_fu_880_p3 ^ 1'd1);

assign Range2_all_ones_4_fu_894_p3 = ((icmp_ln620_1_fu_846_p2[0:0] == 1'b1) ? Range2_all_ones_fu_874_p2 : Range2_all_ones_3_fu_888_p2);

assign Range2_all_ones_fu_874_p2 = ((Range2_V_2_fu_862_p2 == r_V_fu_868_p2) ? 1'b1 : 1'b0);

assign a_fu_328_p2 = (icmp_ln1052_fu_322_p2 & icmp_ln1051_fu_290_p2);

assign add_ln1054_fu_348_p2 = ($signed(trunc_ln1049_fu_270_p1) + $signed(24'd16777163));

assign add_ln1063_fu_392_p2 = ($signed(sub_ln1049_fu_264_p2) + $signed(32'd4294967242));

assign add_ln1076_fu_482_p2 = (sub_ln1070_fu_476_p2 + select_ln1048_fu_464_p3);

assign add_ln120_fu_194_p2 = (ap_sig_allocacmp_i + 5'd1);

assign add_ln570_fu_596_p2 = ($signed(F2_fu_584_p2) + $signed(12'd4078));

assign add_ln601_fu_760_p2 = ($signed(zext_ln455_fu_544_p1) + $signed(12'd3075));

assign add_ln624_fu_852_p2 = (trunc_ln608_fu_782_p1 + 6'd7);

assign and_ln1054_fu_362_p2 = (xor_ln1054_fu_342_p2 & p_Result_7_fu_354_p3);

assign and_ln302_1_fu_1083_p2 = (or_ln302_fu_1061_p2 & and_ln302_fu_1078_p2);

assign and_ln302_fu_1078_p2 = (xor_ln560_fu_1073_p2 & icmp_ln600_reg_1277);

assign and_ln570_fu_700_p2 = (xor_ln571_fu_694_p2 & icmp_ln570_fu_590_p2);

assign and_ln574_1_fu_726_p2 = (xor_ln574_fu_720_p2 & and_ln570_fu_700_p2);

assign and_ln574_fu_706_p2 = (icmp_ln574_fu_630_p2 & and_ln570_fu_700_p2);

assign and_ln592_fu_746_p2 = (icmp_ln592_fu_636_p2 & icmp_ln570_2_fu_740_p2);

assign and_ln628_1_fu_966_p2 = (and_ln628_fu_960_p2 & Range1_all_ones_6_fu_814_p2);

assign and_ln628_fu_960_p2 = (icmp_ln620_fu_840_p2 & icmp_ln610_fu_800_p2);

assign and_ln630_fu_920_p2 = (icmp_ln630_fu_914_p2 & Range1_all_zeros_2_fu_908_p2);

assign and_ln648_fu_1035_p2 = (p_Result_32_reg_1282 & deleted_ones_reg_1293);

assign and_ln650_fu_1050_p2 = (or_ln610_2_fu_1031_p2 & neg_src_reg_1261);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ashr_ln575_fu_650_p2 = $signed(man_V_fu_570_p3) >>> zext_ln575_fu_646_p1;

assign bitcast_ln756_fu_507_p1 = p_Result_30_fu_495_p5;

assign deleted_ones_fu_986_p3 = ((and_ln628_1_fu_966_p2[0:0] == 1'b1) ? Range1_all_ones_fu_902_p2 : or_ln610_1_fu_980_p2);

assign deleted_zeros_fu_972_p3 = ((and_ln628_1_fu_966_p2[0:0] == 1'b1) ? and_ln630_fu_920_p2 : or_ln610_fu_954_p2);

assign exp_tmp_fu_534_p4 = {{ireg_fu_519_p1[62:52]}};

assign grp_fu_478_p_ce = 1'b1;

assign grp_fu_478_p_din0 = 64'd0;

assign grp_fu_478_p_din1 = select_ln1040_reg_1251;

assign i_3_cast_fu_200_p1 = ap_sig_allocacmp_i;

assign icmp_ln1040_fu_224_p2 = ((p_Val2_s_reg_1234 == 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln1051_fu_290_p2 = (($signed(tmp_fu_280_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1052_fu_322_p2 = ((p_Result_20_fu_316_p2 != 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln1063_fu_386_p2 = (($signed(lsb_index_fu_274_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln120_fu_188_p2 = ((ap_sig_allocacmp_i == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln560_fu_578_p2 = ((trunc_ln544_fu_522_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln570_2_fu_740_p2 = (($signed(F2_fu_584_p2) < $signed(12'd18)) ? 1'b1 : 1'b0);

assign icmp_ln570_fu_590_p2 = (($signed(F2_fu_584_p2) > $signed(12'd18)) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_620_p2 = ((F2_fu_584_p2 == 12'd18) ? 1'b1 : 1'b0);

assign icmp_ln574_fu_630_p2 = ((sh_amt_fu_608_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln592_fu_636_p2 = ((sh_amt_fu_608_p3 < 12'd24) ? 1'b1 : 1'b0);

assign icmp_ln600_fu_766_p2 = (($signed(add_ln601_fu_760_p2) > $signed(12'd5)) ? 1'b1 : 1'b0);

assign icmp_ln610_2_fu_820_p2 = ((pos1_fu_772_p2 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln610_fu_800_p2 = (($signed(pos1_fu_772_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln620_1_fu_846_p2 = ((pos2_fu_786_p2 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln620_fu_840_p2 = (($signed(pos2_fu_786_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln630_fu_914_p2 = ((Range2_V_2_fu_862_p2 == 54'd0) ? 1'b1 : 1'b0);

assign icmp_ln631_fu_926_p2 = ((pos2_fu_786_p2 == 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln652_fu_1022_p2 = ((trunc_ln652_fu_1018_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln900_fu_1161_p2 = ((trunc_ln900_fu_1157_p1 == 23'd0) ? 1'b1 : 1'b0);

assign ireg_fu_519_p1 = d_reg_1256;

assign lD_fu_826_p3 = man_V_fu_570_p3[sext_ln607_fu_778_p1];


always @ (sext_ln1198_fu_252_p1) begin
    if (sext_ln1198_fu_252_p1[0] == 1'b1) begin
        l_fu_256_p3 = 32'd0;
    end else if (sext_ln1198_fu_252_p1[1] == 1'b1) begin
        l_fu_256_p3 = 32'd1;
    end else if (sext_ln1198_fu_252_p1[2] == 1'b1) begin
        l_fu_256_p3 = 32'd2;
    end else if (sext_ln1198_fu_252_p1[3] == 1'b1) begin
        l_fu_256_p3 = 32'd3;
    end else if (sext_ln1198_fu_252_p1[4] == 1'b1) begin
        l_fu_256_p3 = 32'd4;
    end else if (sext_ln1198_fu_252_p1[5] == 1'b1) begin
        l_fu_256_p3 = 32'd5;
    end else if (sext_ln1198_fu_252_p1[6] == 1'b1) begin
        l_fu_256_p3 = 32'd6;
    end else if (sext_ln1198_fu_252_p1[7] == 1'b1) begin
        l_fu_256_p3 = 32'd7;
    end else if (sext_ln1198_fu_252_p1[8] == 1'b1) begin
        l_fu_256_p3 = 32'd8;
    end else if (sext_ln1198_fu_252_p1[9] == 1'b1) begin
        l_fu_256_p3 = 32'd9;
    end else if (sext_ln1198_fu_252_p1[10] == 1'b1) begin
        l_fu_256_p3 = 32'd10;
    end else if (sext_ln1198_fu_252_p1[11] == 1'b1) begin
        l_fu_256_p3 = 32'd11;
    end else if (sext_ln1198_fu_252_p1[12] == 1'b1) begin
        l_fu_256_p3 = 32'd12;
    end else if (sext_ln1198_fu_252_p1[13] == 1'b1) begin
        l_fu_256_p3 = 32'd13;
    end else if (sext_ln1198_fu_252_p1[14] == 1'b1) begin
        l_fu_256_p3 = 32'd14;
    end else if (sext_ln1198_fu_252_p1[15] == 1'b1) begin
        l_fu_256_p3 = 32'd15;
    end else if (sext_ln1198_fu_252_p1[16] == 1'b1) begin
        l_fu_256_p3 = 32'd16;
    end else if (sext_ln1198_fu_252_p1[17] == 1'b1) begin
        l_fu_256_p3 = 32'd17;
    end else if (sext_ln1198_fu_252_p1[18] == 1'b1) begin
        l_fu_256_p3 = 32'd18;
    end else if (sext_ln1198_fu_252_p1[19] == 1'b1) begin
        l_fu_256_p3 = 32'd19;
    end else if (sext_ln1198_fu_252_p1[20] == 1'b1) begin
        l_fu_256_p3 = 32'd20;
    end else if (sext_ln1198_fu_252_p1[21] == 1'b1) begin
        l_fu_256_p3 = 32'd21;
    end else if (sext_ln1198_fu_252_p1[22] == 1'b1) begin
        l_fu_256_p3 = 32'd22;
    end else if (sext_ln1198_fu_252_p1[23] == 1'b1) begin
        l_fu_256_p3 = 32'd23;
    end else if (sext_ln1198_fu_252_p1[24] == 1'b1) begin
        l_fu_256_p3 = 32'd24;
    end else if (sext_ln1198_fu_252_p1[25] == 1'b1) begin
        l_fu_256_p3 = 32'd25;
    end else if (sext_ln1198_fu_252_p1[26] == 1'b1) begin
        l_fu_256_p3 = 32'd26;
    end else if (sext_ln1198_fu_252_p1[27] == 1'b1) begin
        l_fu_256_p3 = 32'd27;
    end else if (sext_ln1198_fu_252_p1[28] == 1'b1) begin
        l_fu_256_p3 = 32'd28;
    end else if (sext_ln1198_fu_252_p1[29] == 1'b1) begin
        l_fu_256_p3 = 32'd29;
    end else if (sext_ln1198_fu_252_p1[30] == 1'b1) begin
        l_fu_256_p3 = 32'd30;
    end else if (sext_ln1198_fu_252_p1[31] == 1'b1) begin
        l_fu_256_p3 = 32'd31;
    end else begin
        l_fu_256_p3 = 32'd32;
    end
end

assign lsb_index_fu_274_p2 = ($signed(sub_ln1049_fu_264_p2) + $signed(32'd4294967243));

assign lshr_ln1052_fu_310_p2 = 24'd16777215 >> zext_ln1052_fu_306_p1;

assign lshr_ln1063_fu_402_p2 = zext_ln1062_fu_382_p1 >> zext_ln1063_fu_398_p1;

assign m_4_fu_424_p3 = ((icmp_ln1063_fu_386_p2[0:0] == 1'b1) ? lshr_ln1063_fu_402_p2 : shl_ln1064_fu_418_p2);

assign m_5_fu_436_p2 = (m_4_fu_424_p3 + zext_ln1066_fu_432_p1);

assign m_fu_442_p4 = {{m_5_fu_436_p2[63:1]}};

assign man_V_4_fu_564_p2 = (54'd0 - zext_ln558_fu_560_p1);

assign man_V_fu_570_p3 = ((neg_src_fu_526_p3[0:0] == 1'b1) ? man_V_4_fu_564_p2 : zext_ln558_fu_560_p1);

assign neg_src_fu_526_p3 = ireg_fu_519_p1[32'd63];

assign or_ln1054_fu_368_p2 = (and_ln1054_fu_362_p2 | a_fu_328_p2);

assign or_ln302_fu_1061_p2 = (underflow_fu_1055_p2 | overflow_reg_1298);

assign or_ln346_fu_1187_p2 = (underflow_2_fu_1173_p2 | overflow_2_fu_1145_p2);

assign or_ln610_1_fu_980_p2 = (xor_ln610_fu_948_p2 | select_ln631_1_fu_940_p3);

assign or_ln610_2_fu_1031_p2 = (p_Result_32_reg_1282 | icmp_ln610_reg_1288);

assign or_ln610_fu_954_p2 = (xor_ln610_fu_948_p2 | select_ln631_fu_932_p3);

assign or_ln647_fu_1000_p2 = (xor_ln647_fu_994_p2 | p_Result_32_fu_792_p3);

assign or_ln650_fu_1045_p2 = (xor_ln648_fu_1039_p2 | icmp_ln652_reg_1304);

assign or_ln898_fu_1167_p2 = (xor_ln896_fu_1151_p2 | icmp_ln900_fu_1161_p2);

assign or_ln_fu_374_p3 = {{1'd0}, {or_ln1054_fu_368_p2}};

assign output_r_address0 = i_3_cast_fu_200_p1;

assign overflow_2_fu_1145_p2 = (xor_ln895_fu_1139_p2 & p_Result_34_fu_1131_p3);

assign overflow_fu_1012_p2 = (xor_ln647_1_fu_1006_p2 & or_ln647_fu_1000_p2);

assign p_Result_20_fu_316_p2 = (tmp_V_4_fu_229_p3 & lshr_ln1052_fu_310_p2);

assign p_Result_21_fu_456_p3 = m_5_fu_436_p2[32'd54];

assign p_Result_29_fu_244_p3 = {{1'd1}, {p_Result_s_fu_234_p4}};

assign p_Result_30_fu_495_p5 = {{tmp_s_fu_488_p3}, {zext_ln1067_fu_452_p1[51:0]}};

assign p_Result_31_fu_552_p3 = {{1'd1}, {trunc_ln554_fu_548_p1}};

assign p_Result_32_fu_792_p3 = p_Val2_10_fu_752_p3[32'd23];

assign p_Result_33_fu_1117_p3 = ret_V_fu_1111_p2[32'd24];

assign p_Result_34_fu_1131_p3 = softmax_sum_V_2_fu_1125_p2[32'd23];

assign p_Result_7_fu_354_p3 = tmp_V_4_fu_229_p3[add_ln1054_fu_348_p2];

integer ap_tvar_int_0;

always @ (tmp_V_4_fu_229_p3) begin
    for (ap_tvar_int_0 = 24 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 23 - 0) begin
            p_Result_s_fu_234_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_234_p4[ap_tvar_int_0] = tmp_V_4_fu_229_p3[23 - ap_tvar_int_0];
        end
    end
end

assign p_Val2_10_fu_752_p3 = ((and_ln592_fu_746_p2[0:0] == 1'b1) ? shl_ln593_fu_680_p2 : select_ln574_1_fu_732_p3);

assign pos1_fu_772_p2 = (F2_fu_584_p2 + 12'd6);

assign pos2_fu_786_p2 = (F2_fu_584_p2 + 12'd7);

assign r_V_fu_868_p2 = 54'd18014398509481983 >> zext_ln624_fu_858_p1;

assign ret_V_fu_1111_p2 = ($signed(sext_ln813_1_fu_1107_p1) + $signed(sext_ln813_fu_1103_p1));

assign rhs_fu_1096_p3 = ((icmp_ln560_reg_1266[0:0] == 1'b1) ? 24'd0 : select_ln302_fu_1089_p3);

assign select_ln1040_fu_511_p3 = ((icmp_ln1040_fu_224_p2[0:0] == 1'b1) ? 64'd0 : bitcast_ln756_fu_507_p1);

assign select_ln1048_fu_464_p3 = ((p_Result_21_fu_456_p3[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign select_ln302_fu_1089_p3 = ((and_ln302_1_fu_1083_p2[0:0] == 1'b1) ? select_ln346_fu_1066_p3 : p_Val2_10_reg_1272);

assign select_ln346_3_fu_1179_p3 = ((overflow_2_fu_1145_p2[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln346_fu_1066_p3 = ((overflow_reg_1298[0:0] == 1'b1) ? 24'd8388607 : 24'd8388609);

assign select_ln571_fu_686_p3 = ((icmp_ln571_fu_620_p2[0:0] == 1'b1) ? trunc_ln572_fu_626_p1 : 24'd0);

assign select_ln574_1_fu_732_p3 = ((and_ln574_1_fu_726_p2[0:0] == 1'b1) ? sext_ln577_cast_fu_668_p3 : select_ln574_fu_712_p3);

assign select_ln574_fu_712_p3 = ((and_ln574_fu_706_p2[0:0] == 1'b1) ? trunc_ln575_2_fu_656_p1 : select_ln571_fu_686_p3);

assign select_ln631_1_fu_940_p3 = ((icmp_ln631_fu_926_p2[0:0] == 1'b1) ? Range1_all_ones_7_fu_834_p2 : Range1_all_ones_6_fu_814_p2);

assign select_ln631_fu_932_p3 = ((icmp_ln631_fu_926_p2[0:0] == 1'b1) ? Range1_all_zeros_2_fu_908_p2 : Range1_all_ones_6_fu_814_p2);

assign sext_ln1198_fu_252_p1 = $signed(p_Result_29_fu_244_p3);

assign sext_ln570_fu_616_p1 = sh_amt_fu_608_p3;

assign sext_ln570cast_fu_676_p1 = sext_ln570_fu_616_p1[23:0];

assign sext_ln577_cast_fu_668_p3 = ((tmp_13_fu_660_p3[0:0] == 1'b1) ? 24'd16777215 : 24'd0);

assign sext_ln607_fu_778_p1 = pos1_fu_772_p2;

assign sext_ln813_1_fu_1107_p1 = rhs_fu_1096_p3;

assign sext_ln813_fu_1103_p0 = lhs_fu_142;

assign sext_ln813_fu_1103_p1 = sext_ln813_fu_1103_p0;

assign sh_amt_fu_608_p3 = ((icmp_ln570_fu_590_p2[0:0] == 1'b1) ? add_ln570_fu_596_p2 : sub_ln570_fu_602_p2);

assign shl_ln1064_fu_418_p2 = zext_ln1062_fu_382_p1 << zext_ln1064_fu_414_p1;

assign shl_ln593_fu_680_p2 = trunc_ln572_fu_626_p1 << sext_ln570cast_fu_676_p1;

assign softmax_sum_V_2_fu_1125_p1 = lhs_fu_142;

assign softmax_sum_V_2_fu_1125_p2 = ($signed(rhs_fu_1096_p3) + $signed(softmax_sum_V_2_fu_1125_p1));

assign softmax_sum_V_3_out = lhs_fu_142;

assign softmax_sum_V_fu_1193_p3 = ((or_ln346_fu_1187_p2[0:0] == 1'b1) ? select_ln346_3_fu_1179_p3 : softmax_sum_V_2_fu_1125_p2);

assign sub_ln1049_fu_264_p2 = (32'd24 - l_fu_256_p3);

assign sub_ln1052_fu_300_p2 = (5'd14 - trunc_ln1052_fu_296_p1);

assign sub_ln1064_fu_408_p2 = (32'd54 - sub_ln1049_fu_264_p2);

assign sub_ln1070_fu_476_p2 = (11'd6 - trunc_ln1048_fu_472_p1);

assign sub_ln570_fu_602_p2 = (12'd18 - F2_fu_584_p2);

assign tmp_10_fu_334_p3 = lsb_index_fu_274_p2[32'd31];

assign tmp_13_fu_660_p3 = ireg_fu_519_p1[32'd63];

assign tmp_15_fu_806_p3 = pos1_fu_772_p2[32'd11];

assign tmp_16_fu_880_p3 = pos2_fu_786_p2[32'd11];

assign tmp_V_4_fu_229_p3 = ((p_Result_28_reg_1240[0:0] == 1'b1) ? tmp_V_reg_1246 : p_Val2_s_reg_1234);

assign tmp_V_fu_218_p2 = (24'd0 - output_r_q0);

assign tmp_fu_280_p4 = {{lsb_index_fu_274_p2[31:1]}};

assign tmp_s_fu_488_p3 = {{p_Result_28_reg_1240}, {add_ln1076_fu_482_p2}};

assign trunc_ln1048_fu_472_p1 = l_fu_256_p3[10:0];

assign trunc_ln1049_fu_270_p1 = sub_ln1049_fu_264_p2[23:0];

assign trunc_ln1052_fu_296_p1 = sub_ln1049_fu_264_p2[4:0];

assign trunc_ln544_fu_522_p1 = ireg_fu_519_p1[62:0];

assign trunc_ln554_fu_548_p1 = ireg_fu_519_p1[51:0];

assign trunc_ln572_fu_626_p1 = man_V_fu_570_p3[23:0];

assign trunc_ln575_2_fu_656_p1 = ashr_ln575_fu_650_p2[23:0];

assign trunc_ln575_fu_642_p1 = sh_amt_fu_608_p3[5:0];

assign trunc_ln608_fu_782_p1 = F2_fu_584_p2[5:0];

assign trunc_ln652_fu_1018_p1 = p_Val2_10_fu_752_p3[22:0];

assign trunc_ln900_fu_1157_p1 = softmax_sum_V_2_fu_1125_p2[22:0];

assign underflow_2_fu_1173_p2 = (p_Result_33_fu_1117_p3 & or_ln898_fu_1167_p2);

assign underflow_fu_1055_p2 = (or_ln650_fu_1045_p2 & and_ln650_fu_1050_p2);

assign xor_ln1054_fu_342_p2 = (tmp_10_fu_334_p3 ^ 1'd1);

assign xor_ln560_fu_1073_p2 = (icmp_ln560_reg_1266 ^ 1'd1);

assign xor_ln571_fu_694_p2 = (icmp_ln571_fu_620_p2 ^ 1'd1);

assign xor_ln574_fu_720_p2 = (icmp_ln574_fu_630_p2 ^ 1'd1);

assign xor_ln610_fu_948_p2 = (icmp_ln610_fu_800_p2 ^ 1'd1);

assign xor_ln647_1_fu_1006_p2 = (neg_src_fu_526_p3 ^ 1'd1);

assign xor_ln647_fu_994_p2 = (deleted_zeros_fu_972_p3 ^ 1'd1);

assign xor_ln648_fu_1039_p2 = (1'd1 ^ and_ln648_fu_1035_p2);

assign xor_ln895_fu_1139_p2 = (p_Result_33_fu_1117_p3 ^ 1'd1);

assign xor_ln896_fu_1151_p2 = (p_Result_34_fu_1131_p3 ^ 1'd1);

assign zext_ln1052_fu_306_p1 = sub_ln1052_fu_300_p2;

assign zext_ln1062_fu_382_p1 = tmp_V_4_fu_229_p3;

assign zext_ln1063_fu_398_p1 = add_ln1063_fu_392_p2;

assign zext_ln1064_fu_414_p1 = sub_ln1064_fu_408_p2;

assign zext_ln1066_fu_432_p1 = or_ln_fu_374_p3;

assign zext_ln1067_fu_452_p1 = m_fu_442_p4;

assign zext_ln455_fu_544_p1 = exp_tmp_fu_534_p4;

assign zext_ln558_fu_560_p1 = p_Result_31_fu_552_p3;

assign zext_ln575_fu_646_p1 = trunc_ln575_fu_642_p1;

assign zext_ln624_fu_858_p1 = add_ln624_fu_852_p2;

endmodule //gesture_model_dense_1_Pipeline_VITIS_LOOP_120_3
